
gherkin.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  000056ca  0000575e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000056ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c1  00800138  00800138  00005796  2**0
                  ALLOC
  3 .noinit       00000004  008001f9  008001f9  00005796  2**0
                  ALLOC
  4 .stab         000023dc  00000000  00000000  00005798  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000405  00000000  00000000  00007b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00007f79  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000ae0  00000000  00000000  00007f8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00010d78  00000000  00000000  00008a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004158  00000000  00000000  000197e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00005614  00000000  00000000  0001d93a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001dd8  00000000  00000000  00022f50  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00004af7  00000000  00000000  00024d28  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000909f  00000000  00000000  0002981f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000c40  00000000  00000000  000328be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <__ctors_end>
       4:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__bad_interrupt>
       8:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__bad_interrupt>
       c:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__bad_interrupt>
      10:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__bad_interrupt>
      14:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__bad_interrupt>
      18:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__bad_interrupt>
      1c:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__bad_interrupt>
      20:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__bad_interrupt>
      24:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__bad_interrupt>
      28:	0c 94 5b 0e 	jmp	0x1cb6	; 0x1cb6 <__vector_10>
      2c:	0c 94 2d 0f 	jmp	0x1e5a	; 0x1e5a <__vector_11>
      30:	0c 94 33 1e 	jmp	0x3c66	; 0x3c66 <__vector_12>
      34:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__bad_interrupt>
      3c:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__bad_interrupt>
      40:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__bad_interrupt>
      44:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      48:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__bad_interrupt>
      4c:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__bad_interrupt>
      50:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__bad_interrupt>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	0c 94 a6 1e 	jmp	0x3d4c	; 0x3d4c <__vector_21>
      58:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__bad_interrupt>
      5c:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__bad_interrupt>
      60:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      64:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__bad_interrupt>
      68:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__bad_interrupt>

	ParserData->TotalDeviceReports = 1;
      6c:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__bad_interrupt>
      70:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__bad_interrupt>
      74:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__bad_interrupt>
      78:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__bad_interrupt>
      7c:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__bad_interrupt>
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__bad_interrupt>
      84:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__bad_interrupt>
      88:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__bad_interrupt>
      90:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      94:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__bad_interrupt>
      98:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__bad_interrupt>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      9c:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__bad_interrupt>
      a0:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__bad_interrupt>
      a4:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__bad_interrupt>
      a8:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__bad_interrupt>

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      ac:	92 0f       	add	r25, r18
      ae:	b4 0f       	add	r27, r20
      b0:	9f 10       	cpse	r9, r15
      b2:	b4 0f       	add	r27, r20
      b4:	9f 10       	cpse	r9, r15
      b6:	f6 0f       	add	r31, r22
      b8:	19 10       	cpse	r1, r9
      ba:	9f 10       	cpse	r9, r15
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      bc:	6e 10       	cpse	r6, r14
      be:	81 10       	cpse	r8, r1
      c0:	f5 13       	cpse	r31, r21
      c2:	f5 13       	cpse	r31, r21
      c4:	23 14       	cp	r2, r3
      c6:	23 14       	cp	r2, r3
      c8:	7f 14       	cp	r7, r15
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
      ca:	bb 14       	cp	r11, r11
      cc:	28 17       	cp	r18, r24
      ce:	28 17       	cp	r18, r24
      d0:	d3 14       	cp	r13, r3
      d2:	28 17       	cp	r18, r24
      d4:	ca 15       	cp	r28, r10
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      d6:	ca 15       	cp	r28, r10
      d8:	98 16       	cp	r9, r24
      da:	ac 16       	cp	r10, r28
      dc:	28 17       	cp	r18, r24
	{
		uint8_t  HIDReportItem  = *ReportData;
      de:	16 17       	cp	r17, r22

000000e0 <actionmaps>:
      e0:	14 00 1a 00 08 00 15 00 17 00 1c 00 18 00 0c 00     ................
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      f0:	12 00 13 00 04 00 16 00 07 00 09 00 0a 00 0b 00     ................
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
     100:	0d 00 0e 00 0f 00 28 00 1d 21 1b 32 06 a3 19 a4     ......(..!.2....

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     110:	29 a2 2c a1 05 a5 11 34 10 31 2a 00 1e 00 1f 00     ).,....4.1*.....
     120:	20 00 21 00 22 00 23 00 24 00 25 00 26 00 27 00      .!.".#.$.%.&.'.
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     130:	3a 00 3b 00 3c 00 3d 00 3e 00 3f 00 40 00 41 00     :.;.<.=.>.?.@.A.
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     140:	42 00 43 00 01 00 01 00 01 00 01 00 4c 00 01 00     B.C.........L...
				ReportSize     -= 4;
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     150:	01 00 01 00 01 00 01 00 1e 02 1f 02 20 02 21 02     ............ .!.
     160:	22 02 23 02 24 02 25 02 26 02 27 02 44 00 45 00     ".#.$.%.&.'.D.E.
				ReportSize     -= 2;
				ReportData     += 2;
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     170:	01 00 01 00 38 00 31 00 01 00 01 00 52 00 35 00     ....8.1.....R.5.
				ReportSize     -= 1;
				ReportData     += 1;
     180:	01 00 01 00 01 00 01 00 01 00 01 00 01 00 50 00     ..............P.
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     190:	51 00 4f 00 01 00 01 00 01 00 01 00 01 00 2d 00     Q.O...........-.
     1a0:	2e 00 31 00 2f 00 30 00 2b 00 01 00 01 00 01 00     ..1./.0.+.......

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1b0:	01 00 36 00 37 00 38 00 33 00 34 00 01 00 01 00     ..6.7.8.3.4.....
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1c0:	01 00 01 00 01 00 01 00 50 00 51 00 52 00 4f 00     ........P.Q.R.O.
     1d0:	01 00 01 00 01 00 01 00 01 00 2d 02 2e 02 31 02     ..........-...1.
     1e0:	2f 02 30 02 2b 00 01 00 01 00 01 00 01 00 36 02     /.0.+.........6.
     1f0:	37 02 38 02 33 02 34 02 01 00 01 00 01 00 01 00     7.8.3.4.........
     200:	01 00 01 00 4a 00 4e 00 4b 00 4d 00 92 45 23 46     ....J.N.K.M..E#F
     210:	8a 45 94 45 01 00 01 00 01 00 01 00 01 00 46 00     .E.E..........F.
     220:	01 00 01 00 01 00 01 00 01 00 01 00 01 00 01 00     ................
     230:	00 d1 00 d0 01 00 01 00 01 00 01 00 bf 00 01 00     ................
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     240:	01 00 01 00 01 00 01 00                             ........

00000248 <__c.1928>:
     248:	0a 00                                               ..

0000024a <__c.1926>:
     24a:	25 30 31 36 62 00                                   %016b.

00000250 <__c.1924>:
     250:	3a 20 00                                            : .

00000253 <__c.1922>:
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     253:	25 30 32 58 00                                      %02X.

00000258 <__c.1919>:
     258:	0a 72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41     .r/c 0123456789A
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     268:	42 43 44 45 46 0a 00                                BCDEF..

0000026f <__c.1897>:
     26f:	0a 00                                               ..

00000271 <__c.1895>:
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     271:	25 30 32 58 00                                      %02X.

00000276 <__c.1893>:
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     276:	62 6f 75 6e 63 65 21 3a 20 00                       bounce!: .

00000280 <__c.4870>:
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     280:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
				break;
     290:	00                                                  .

00000291 <__c.4868>:
     291:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
				break;
     2a1:	00                                                  .

000002a2 <__c.4863>:

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a2:	0d 0a 69 6e 69 74 0a 00                             ..init..

000002aa <__c.4757>:
     2aa:	5b 44 5d 00                                         [D].

000002ae <__c.4752>:
				break;

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2ae:	5b 43 5d 00                                         [C].

000002b2 <ProductString>:
     2b2:	2a 03 54 00 68 00 65 00 20 00 67 00 68 00 65 00     *.T.h.e. .g.h.e.
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2c2:	72 00 6b 00 69 00 6e 00 20 00 4b 00 65 00 79 00     r.k.i.n. .K.e.y.
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2d2:	62 00 6f 00 61 00 72 00 64 00 00 00                 b.o.a.r.d...

000002de <ManufacturerString>:
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
     2de:	0c 03 64 00 69 00 30 00 69 00 62 00 00 00           ..d.i.0.i.b...

000002ec <LanguageString>:
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2ec:	04 03 09 04                                         ....

000002f0 <ConfigurationDescriptor>:
     2f0:	09 02 8d 00 05 01 00 a0 32 09 04 00 00 01 03 01     ........2.......
     300:	01 00 09 21 11 01 00 01 22 40 00 07 05 81 03 08     ...!...."@......
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     310:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     320:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
     330:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     340:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
     350:	01 00 01 22 22 00 07 05 84 03 20 00 01 07 05 04     ...""..... .....
     360:	03 20 00 01 09 04 04 00 01 03 00 00 00 09 21 11     . ............!.
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
					}
				}

				ParserData->UsingReportIDs = true;
     370:	01 00 01 22 39 00 07 05 85 03 20 00 01              ..."9..... ..

0000037d <DeviceDescriptor>:

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     37d:	12 01 10 01 00 00 00 08 ed fe 0c 0a 70 00 01 02     ............p...
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     38d:	00 01                                               ..

0000038f <NKROReport>:
     38f:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     39f:	95 08 75 01 81 02 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
     3af:	91 02 95 01 75 03 91 01 05 07 19 00 29 f7 15 00     ....u.......)...
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3bf:	25 01 95 f8 75 01 81 02 c0                          %...u....

000003c8 <ConsoleReport>:
     3c8:	06 31 ff 09 74 a1 01 09 75 15 00 26 ff 00 95 20     .1..t...u..&... 
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     3d8:	75 08 81 02 09 76 15 00 26 ff 00 95 20 75 08 91     u....v..&... u..
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3e8:	02 c0                                               ..

000003ea <ExtrakeyReport>:
     3ea:	05 01 09 80 a1 01 85 02 16 81 00 26 b7 00 1a 81     ...........&....
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3fa:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
				}

				CurrCollectionPath->Type       = ReportItemData;
     40a:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     41a:	10 95 01 81 00 c0                                   ......

00000420 <MouseReport>:

				if (UsageListSize)
     420:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     430:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...

					for (uint8_t i = 1; i < UsageListSize; i++)
     440:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
					  UsageList[i - 1] = UsageList[i];
     450:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8

					UsageListSize--;
     460:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

0000046d <KeyboardReport>:
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     46d:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     47d:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48d:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49d:	19 00 29 ff 15 00 26 ff 00 95 06 75 08 81 00 c0     ..)...&....u....

000004ad <__c.4488>:
				break;
     4ad:	63 6f 6e 73 75 6d 65 72 3a 20 25 30 34 58 0a 00     consumer: %04X..

000004bd <__c.4483>:
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4bd:	73 79 73 74 65 6d 3a 20 25 30 34 58 0a 00           system: %04X..

000004cb <__c.4475>:
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4cb:	0a 00                                               ..

000004cd <__c.4470>:
     4cd:	25 30 32 58 20 00                                   %02X .

000004d3 <__c.4467>:
     4d3:	6b 65 79 62 6f 61 72 64 3a 20 00                    keyboard: .

000004de <__c.4834>:
     4de:	4c 45 44 3a 20 25 30 32 58 0a 00                    LED: %02X..

000004e9 <__c.4615>:
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e9:	64 65 6c 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     del_key_bit: can
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f9:	27 74 20 64 65 6c 3a 20 25 30 32 58 0a 00           't del: %02X..

00000507 <__c.4610>:
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
					NewReportItem.CollectionPath = CurrCollectionPath;
     507:	61 64 64 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     add_key_bit: can
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     517:	27 74 20 61 64 64 3a 20 25 30 32 58 0a 00           't add: %02X..

00000525 <__c.4786>:

					if (UsageListSize)
     525:	64 6f 6e 65 2e 0a 00                                done...

0000052c <__c.4780>:
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     52c:	62 6f 6f 74 6d 61 67 69 63 20 73 63 61 6e 3a 20     bootmagic scan: 
     53c:	2e 2e 2e 20 00                                      ... .

00000541 <__c.4547>:

						for (uint8_t i = 1; i < UsageListSize; i++)
     541:	29 0a 00                                            )..

00000544 <__c.4545>:
     544:	25 75 00                                            %u.

00000547 <__c.4543>:
     547:	2f 00                                               /.

00000549 <__c.4541>:
     549:	25 75 00                                            %u.

0000054c <__c.4539>:
						  UsageList[i - 1] = UsageList[i];
     54c:	5d 28 00                                            ](.

0000054f <__c.4537>:
     54f:	25 64 00                                            %d.

00000552 <__c.4535>:

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     552:	20 00                                                .

00000554 <__c.4533>:
     554:	25 64 00                                            %d.

00000557 <__c.4531>:
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     557:	20 00                                                .

00000559 <__c.4529>:
     559:	25 64 00                                            %d.

0000055c <__c.4527>:
     55c:	20 00                                                .

0000055e <__c.4525>:
     55e:	25 64 00                                            %d.

00000561 <__c.4523>:
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     561:	7c 00                                               |.

00000563 <__c.4521>:
     563:	25 30 32 58 00                                      %02X.

00000568 <__c.4519>:
     568:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     578:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     588:	20 5b 00                                             [.

0000058b <__c.5178>:
     58b:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     59b:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

000005a6 <__c.5175>:
     5a6:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5b6:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

000005bf <__c.5172>:

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5bf:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     5cf:	20 25 64 0a 00                                       %d..

000005d4 <__c.5169>:
     5d4:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     5e4:	64 0a 00                                            d..

000005e7 <__c.5166>:
     5e7:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f7:	0a 00                                               ..

000005f9 <__c.5162>:
     5f9:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000608 <__c.5155>:
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     608:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     618:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

00000623 <__c.5152>:
     623:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     633:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

0000063c <__c.5149>:
     63c:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     64c:	20 25 64 0a 00                                       %d..

00000651 <__c.5146>:
     651:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     661:	64 0a 00                                            d..

00000664 <__c.5143>:
     664:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     674:	0a 00                                               ..

00000676 <__c.5139>:
     676:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000685 <__c.5132>:
     685:	0a 00                                               ..

00000687 <__c.5130>:
     687:	25 75 00                                            %u.

0000068a <__c.5128>:
					  ParserData->TotalReportItems++;
     68a:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     69a:	5f 6d 61 78 3a 20 00                                _max: .

000006a1 <__c.5126>:
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     6a1:	0a 00                                               ..

000006a3 <__c.5124>:
     6a3:	25 75 00                                            %u.

000006a6 <__c.5122>:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6a6:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     6b6:	65 64 3a 20 00                                      ed: .

000006bb <__c.5120>:
	  return HID_PARSE_NoUnfilteredReportItems;
     6bb:	0a 00                                               ..

000006bd <__c.5118>:
     6bd:	25 75 00                                            %u.

000006c0 <__c.5116>:

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6c0:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6d0:	00                                                  .

000006d1 <__c.5114>:
     6d1:	0a 00                                               ..

000006d3 <__c.5112>:
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6d3:	25 75 00                                            %u.

000006d6 <__c.5110>:
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6d6:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

000006e5 <__c.5108>:

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6e5:	0a 00                                               ..

000006e7 <__c.5106>:
     6e7:	25 75 00                                            %u.

000006ea <__c.5104>:
     6ea:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
     6fa:	20 00                                                .

000006fc <__c.5102>:
     6fc:	0a 00                                               ..

000006fe <__c.5100>:
     6fe:	25 75 00                                            %u.

00000701 <__c.5098>:
     701:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
     711:	20 00                                                .

00000713 <__c.5096>:
     713:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

00000721 <__c.5216>:
     721:	4d 3e 00                                            M>.

00000724 <__c.5214>:
     724:	4d 25 64 3e 20 00                                   M%d> .

0000072a <__c.5212>:
     72a:	3f 00                                               ?.

0000072c <__c.5209>:
     72c:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

00000739 <__c.5195>:
     739:	43 3e 20 00                                         C> .

0000073d <__c.5185>:
     73d:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     74d:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d
     75d:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
     76d:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik
     77d:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

0000078b <__c.5183>:
     78b:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
     79b:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
     7ab:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
     7bb:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma
     7cb:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_
     7db:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     7eb:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     7fb:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     80b:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
     81b:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     82b:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     83b:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     84b:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     85b:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     86b:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     87b:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

00000886 <__c.5088>:
     886:	3f 00                                               ?.

00000888 <__c.5085>:
     888:	4d 3e 20 00                                         M> .

0000088c <__c.5090>:
     88c:	43 3e 20 00                                         C> .

00000890 <__c.5234>:
     890:	4c 25 64 0a 00                                      L%d..

00000895 <__c.5074>:
     895:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     8a5:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     8b5:	73 65 6b 65 79 0a 00                                sekey..

000008bc <__c.4880>:
     8bc:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     8cc:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     8dc:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     8ec:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     8fc:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     90c:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     91c:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     92c:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     93c:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     94c:	72 0a 65 3a 09 65 65 70 72 6f 6d 0a 6e 3a 09 4e     r.e:.eeprom.n:.N
     95c:	4b 52 4f 0a 00                                      KRO..

00000961 <__c.4994>:
     961:	0a 00                                               ..

00000963 <__c.4992>:
     963:	25 75 00                                            %u.

00000966 <__c.4990>:
     966:	2e 6c 65 76 65 6c 3a 20 00                          .level: .

0000096f <__c.4988>:
     96f:	0a 00                                               ..

00000971 <__c.4986>:
     971:	25 75 00                                            %u.

00000974 <__c.4984>:
     974:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

0000097e <__c.4982>:
     97e:	0a 00                                               ..

00000980 <__c.4980>:
     980:	25 30 32 58 00                                      %02X.

00000985 <__c.4978>:
     985:	62 61 63 6b 6c 69 67 68 74 5f 63 6f 6e 66 69 67     backlight_config
     995:	2e 72 61 77 3a 20 00                                .raw: .

0000099c <__c.4975>:
     99c:	0a 00                                               ..

0000099e <__c.4973>:
     99e:	25 75 00                                            %u.

000009a1 <__c.4971>:
     9a1:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

000009a9 <__c.4969>:
     9a9:	0a 00                                               ..

000009ab <__c.4967>:
     9ab:	25 75 00                                            %u.

000009ae <__c.4965>:
     9ae:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     9be:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

000009ca <__c.4963>:
     9ca:	0a 00                                               ..

000009cc <__c.4961>:
     9cc:	25 75 00                                            %u.

000009cf <__c.4959>:
     9cf:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     9df:	20 00                                                .

000009e1 <__c.4957>:
     9e1:	0a 00                                               ..

000009e3 <__c.4955>:
     9e3:	25 75 00                                            %u.

000009e6 <__c.4953>:
     9e6:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

000009f0 <__c.4951>:
     9f0:	0a 00                                               ..

000009f2 <__c.4949>:
     9f2:	25 75 00                                            %u.

000009f5 <__c.4947>:
     9f5:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     a05:	20 00                                                .

00000a07 <__c.4945>:
     a07:	0a 00                                               ..

00000a09 <__c.4943>:
     a09:	25 75 00                                            %u.

00000a0c <__c.4941>:
     a0c:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     a1c:	20 00                                                .

00000a1e <__c.4939>:
     a1e:	0a 00                                               ..

00000a20 <__c.4937>:
     a20:	25 75 00                                            %u.

00000a23 <__c.4935>:
     a23:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     a33:	74 72 6f 6c 3a 20 00                                trol: .

00000a3a <__c.4933>:
     a3a:	0a 00                                               ..

00000a3c <__c.4931>:
     a3c:	25 75 00                                            %u.

00000a3f <__c.4929>:
     a3f:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     a4f:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

00000a58 <__c.4927>:
     a58:	0a 00                                               ..

00000a5a <__c.4925>:
     a5a:	25 30 32 58 00                                      %02X.

00000a5f <__c.4923>:
     a5f:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     a6f:	77 3a 20 00                                         w: .

00000a73 <__c.4920>:
     a73:	0a 00                                               ..

00000a75 <__c.4918>:
     a75:	25 75 00                                            %u.

00000a78 <__c.4916>:
     a78:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

00000a81 <__c.4914>:
     a81:	0a 00                                               ..

00000a83 <__c.4912>:
     a83:	25 75 00                                            %u.

00000a86 <__c.4910>:
     a86:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

00000a92 <__c.4908>:
     a92:	0a 00                                               ..

00000a94 <__c.4906>:
     a94:	25 75 00                                            %u.

00000a97 <__c.4904>:
     a97:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

00000aa1 <__c.4902>:
     aa1:	0a 00                                               ..

00000aa3 <__c.4900>:
     aa3:	25 75 00                                            %u.

00000aa6 <__c.4898>:
     aa6:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

00000ab0 <__c.4896>:
     ab0:	0a 00                                               ..

00000ab2 <__c.4894>:
     ab2:	25 30 32 58 00                                      %02X.

00000ab7 <__c.4892>:
     ab7:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     ac7:	3a 20 00                                            : .

00000aca <__c.4889>:
     aca:	0a 00                                               ..

00000acc <__c.4887>:
     acc:	25 75 00                                            %u.

00000acf <__c.4885>:
     acf:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

00000adf <__c.5069>:
     adf:	3f 00                                               ?.

00000ae1 <__c.5060>:
     ae1:	4e 4b 52 4f 3a 20 6f 66 66 0a 00                    NKRO: off..

00000aec <__c.5058>:
     aec:	4e 4b 52 4f 3a 20 6f 6e 0a 00                       NKRO: on..

00000af6 <__c.5055>:
     af6:	74 69 6d 65 72 5f 72 65 61 64 33 32 28 29 3a 20     timer_read32(): 
     b06:	25 30 34 6c 58 0a 00                                %04lX..

00000b0d <__c.5053>:
     b0d:	6b 65 79 62 6f 61 72 64 5f 6e 6b 72 6f 3a 20 25     keyboard_nkro: %
     b1d:	58 0a 00                                            X..

00000b20 <__c.5051>:
     b20:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     b30:	58 0a 00                                            X..

00000b33 <__c.5049>:
     b33:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     b43:	6c 3a 20 25 58 0a 00                                l: %X..

00000b4a <__c.5047>:
     b4a:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     b5a:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

00000b64 <__c.5045>:
     b64:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

00000b72 <__c.5042>:
     b72:	47 43 43 3a 20 34 2e 38 2e 32 20 41 56 52 2d 4c     GCC: 4.8.2 AVR-L
     b82:	49 42 43 3a 20 31 2e 38 2e 30 20 41 56 52 5f 41     IBC: 1.8.0 AVR_A
     b92:	52 43 48 3a 20 61 76 72 35 0a 00                    RCH: avr5..

00000b9d <__c.5040>:
     b9d:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     bad:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     bbd:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     bcd:	45 20 43 4f 4d 4d 41 4e 44 20 4e 4b 52 4f 20 34     E COMMAND NKRO 4
     bdd:	30 39 36 0a 00                                      096..

00000be2 <__c.5038>:
     be2:	42 55 49 4c 44 3a 20 66 38 38 66 38 32 38 20 28     BUILD: f88f828 (
     bf2:	30 31 3a 35 39 3a 32 33 20 4a 75 6c 20 20 36 20     01:59:23 Jul  6 
     c02:	32 30 31 37 29 0a 00                                2017)..

00000c09 <__c.5036>:
     c09:	56 49 44 3a 20 30 78 46 45 45 44 28 64 69 30 69     VID: 0xFEED(di0i
     c19:	62 29 20 50 49 44 3a 20 30 78 30 41 30 43 28 54     b) PID: 0x0A0C(T
     c29:	68 65 20 67 68 65 72 6b 69 6e 20 4b 65 79 62 6f     he gherkin Keybo
     c39:	61 72 64 29 20 56 45 52 3a 20 30 78 30 30 37 30     ard) VER: 0x0070
     c49:	0a 00                                               ..

00000c4b <__c.5034>:
     c4b:	44 45 53 43 3a 20 41 20 33 30 20 6b 65 79 20 6b     DESC: A 30 key k
     c5b:	65 79 62 6f 61 72 64 0a 00                          eyboard..

00000c64 <__c.5032>:
     c64:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

00000c73 <__c.5029>:
     c73:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

00000c80 <__c.5027>:
     c80:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

00000c8c <__c.5024>:
     c8c:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

00000c9c <__c.5022>:
     c9c:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

00000cab <__c.5019>:
     cab:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

00000cb9 <__c.5017>:
     cb9:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

00000cc6 <__c.5014>:
     cc6:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000cd2 <__c.5012>:
     cd2:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000cdf <__c.5009>:
     cdf:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     cef:	00                                                  .

00000cf0 <__c.5006>:
     cf0:	43 3e 20 00                                         C> .

00000cf4 <__c.5000>:
     cf4:	65 65 63 6f 6e 66 69 67 3a 0a 00                    eeconfig:..

00000cff <__c.1777>:
     cff:	62 61 63 6b 6c 69 67 68 74 20 73 74 65 70 3a 20     backlight step: 
     d0f:	25 75 0a 00                                         %u..

00000d13 <__c.1772>:
     d13:	62 61 63 6b 6c 69 67 68 74 20 74 6f 67 67 6c 65     backlight toggle
     d23:	3a 20 25 75 0a 00                                   : %u..

00000d29 <__c.1767>:
     d29:	62 61 63 6b 6c 69 67 68 74 20 64 65 63 72 65 61     backlight decrea
     d39:	73 65 3a 20 25 75 0a 00                             se: %u..

00000d41 <__c.1762>:
     d41:	62 61 63 6b 6c 69 67 68 74 20 69 6e 63 72 65 61     backlight increa
     d51:	73 65 3a 20 25 75 0a 00 00                          se: %u...

00000d5a <__ctors_end>:
     d5a:	11 24       	eor	r1, r1
     d5c:	1f be       	out	0x3f, r1	; 63
     d5e:	cf ef       	ldi	r28, 0xFF	; 255
     d60:	da e0       	ldi	r29, 0x0A	; 10
     d62:	de bf       	out	0x3e, r29	; 62
     d64:	cd bf       	out	0x3d, r28	; 61

00000d66 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     d66:	04 b6       	in	r0, 0x34	; 52
     d68:	03 fe       	sbrs	r0, 3
     d6a:	24 c0       	rjmp	.+72     	; 0xdb4 <__do_copy_data>
     d6c:	80 91 f9 01 	lds	r24, 0x01F9
     d70:	90 91 fa 01 	lds	r25, 0x01FA
     d74:	a0 91 fb 01 	lds	r26, 0x01FB
     d78:	b0 91 fc 01 	lds	r27, 0x01FC
     d7c:	87 30       	cpi	r24, 0x07	; 7
     d7e:	90 4b       	sbci	r25, 0xB0	; 176
     d80:	a7 40       	sbci	r26, 0x07	; 7
     d82:	b0 4b       	sbci	r27, 0xB0	; 176
     d84:	b9 f4       	brne	.+46     	; 0xdb4 <__do_copy_data>
        reset_key = 0;
     d86:	10 92 f9 01 	sts	0x01F9, r1
     d8a:	10 92 fa 01 	sts	0x01FA, r1
     d8e:	10 92 fb 01 	sts	0x01FB, r1
     d92:	10 92 fc 01 	sts	0x01FC, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     d96:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     d98:	84 b7       	in	r24, 0x34	; 52
     d9a:	87 7f       	andi	r24, 0xF7	; 247
     d9c:	84 bf       	out	0x34, r24	; 52
        wdt_disable();
     d9e:	88 e1       	ldi	r24, 0x18	; 24
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	80 93 60 00 	sts	0x0060, r24
     da8:	10 92 60 00 	sts	0x0060, r1
     dac:	0f be       	out	0x3f, r0	; 63

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     dae:	e0 e0       	ldi	r30, 0x00	; 0
     db0:	f8 e3       	ldi	r31, 0x38	; 56
     db2:	09 95       	icall

00000db4 <__do_copy_data>:
     db4:	11 e0       	ldi	r17, 0x01	; 1
     db6:	a0 e0       	ldi	r26, 0x00	; 0
     db8:	b1 e0       	ldi	r27, 0x01	; 1
     dba:	ea ec       	ldi	r30, 0xCA	; 202
     dbc:	f6 e5       	ldi	r31, 0x56	; 86
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <__do_copy_data+0x10>
     dc0:	05 90       	lpm	r0, Z+
     dc2:	0d 92       	st	X+, r0
     dc4:	a8 33       	cpi	r26, 0x38	; 56
     dc6:	b1 07       	cpc	r27, r17
     dc8:	d9 f7       	brne	.-10     	; 0xdc0 <__do_copy_data+0xc>

00000dca <__do_clear_bss>:
     dca:	11 e0       	ldi	r17, 0x01	; 1
     dcc:	a8 e3       	ldi	r26, 0x38	; 56
     dce:	b1 e0       	ldi	r27, 0x01	; 1
     dd0:	01 c0       	rjmp	.+2      	; 0xdd4 <.do_clear_bss_start>

00000dd2 <.do_clear_bss_loop>:
     dd2:	1d 92       	st	X+, r1

00000dd4 <.do_clear_bss_start>:
     dd4:	a9 3f       	cpi	r26, 0xF9	; 249
     dd6:	b1 07       	cpc	r27, r17
     dd8:	e1 f7       	brne	.-8      	; 0xdd2 <.do_clear_bss_loop>
     dda:	0e 94 8e 0b 	call	0x171c	; 0x171c <main>
     dde:	0c 94 63 2b 	jmp	0x56c6	; 0x56c6 <_exit>

00000de2 <__bad_interrupt>:
     de2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000de6 <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     de6:	ff 93       	push	r31
	push	ZL
     de8:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     dea:	e0 91 38 01 	lds	r30, 0x0138
	lds	ZH, xfunc_out+1	;/
     dee:	f0 91 39 01 	lds	r31, 0x0139
	sbiw	ZL, 0		;Skip if null
     df2:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     df4:	09 f0       	breq	.+2      	; 0xdf8 <xputc+0x12>
	icall
     df6:	09 95       	icall
2:	pop	ZL
     df8:	ef 91       	pop	r30
	pop	ZH
     dfa:	ff 91       	pop	r31
	ret
     dfc:	08 95       	ret

00000dfe <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     dfe:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     e00:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     e02:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     e04:	11 f0       	breq	.+4      	; 0xe0a <xputs+0xc>
	rcall	xputc
     e06:	ef df       	rcall	.-34     	; 0xde6 <xputc>
	rjmp	1b
     e08:	fb cf       	rjmp	.-10     	; 0xe00 <xputs+0x2>
2:	ret
     e0a:	08 95       	ret

00000e0c <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     e0c:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     e0e:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     e10:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     e12:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     e14:	0c c0       	rjmp	.+24     	; 0xe2e <xitoa+0x22>
	neg	r20		;
     e16:	41 95       	neg	r20
	sbrs	r25, 7		;
     e18:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     e1a:	09 c0       	rjmp	.+18     	; 0xe2e <xitoa+0x22>
	ldi	r30, '-'	;
     e1c:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     e1e:	60 95       	com	r22
	com	r23		;
     e20:	70 95       	com	r23
	com	r24		;
     e22:	80 95       	com	r24
	com	r25		;
     e24:	90 95       	com	r25
	adc	r22, r1		;
     e26:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     e28:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     e2a:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     e2c:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     e2e:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <xitoa+0x2a>
	neg	r18		;
     e32:	21 95       	neg	r18
	ldi	r19, '0'	;/
     e34:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     e36:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     e38:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     e3a:	66 0f       	add	r22, r22
	rol	r23		;
     e3c:	77 1f       	adc	r23, r23
	rol	r24		;
     e3e:	88 1f       	adc	r24, r24
	rol	r25		;
     e40:	99 1f       	adc	r25, r25
	rol	r26		;
     e42:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     e44:	a4 17       	cp	r26, r20
	brcs	3f		;
     e46:	10 f0       	brcs	.+4      	; 0xe4c <xitoa+0x40>
	sub	r26, r20	;
     e48:	a4 1b       	sub	r26, r20
	inc	r22		;
     e4a:	63 95       	inc	r22
3:	dec	r21		;
     e4c:	5a 95       	dec	r21
	brne	2b		;/
     e4e:	a9 f7       	brne	.-22     	; 0xe3a <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     e50:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     e52:	08 f0       	brcs	.+2      	; 0xe56 <xitoa+0x4a>
	subi	r26, -7		;
     e54:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     e56:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     e58:	af 93       	push	r26
	inc	r31		;/
     e5a:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     e5c:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     e5e:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     e60:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     e62:	91 05       	cpc	r25, r1
	brne	1b		;/
     e64:	41 f7       	brne	.-48     	; 0xe36 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     e66:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     e68:	11 f4       	brne	.+4      	; 0xe6e <xitoa+0x62>
	push	r30		;
     e6a:	ef 93       	push	r30
	inc	r31		;/
     e6c:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     e6e:	f2 17       	cp	r31, r18
	brcc	6f		;
     e70:	18 f4       	brcc	.+6      	; 0xe78 <xitoa+0x6c>
	push	r19		;
     e72:	3f 93       	push	r19
	inc	r31		;
     e74:	f3 95       	inc	r31
	rjmp	5b		;/
     e76:	fb cf       	rjmp	.-10     	; 0xe6e <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     e78:	8f 91       	pop	r24
	rcall	xputc		;
     e7a:	b5 df       	rcall	.-150    	; 0xde6 <xputc>
	dec	r31		;
     e7c:	fa 95       	dec	r31
	brne	6b		;/
     e7e:	e1 f7       	brne	.-8      	; 0xe78 <xitoa+0x6c>

	ret
     e80:	08 95       	ret

00000e82 <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     e82:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     e84:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     e86:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     e88:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     e8a:	21 f0       	breq	.+8      	; 0xe94 <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     e8c:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     e8e:	19 f0       	breq	.+6      	; 0xe96 <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     e90:	aa df       	rcall	.-172    	; 0xde6 <xputc>
	rjmp	0b		;/
     e92:	f9 cf       	rjmp	.-14     	; 0xe86 <xvprintf+0x4>
90:	ret
     e94:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     e96:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     e98:	e8 94       	clt
	_LPMI	r21		;Get flags
     e9a:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     e9c:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     e9e:	c1 f3       	breq	.-16     	; 0xe90 <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     ea0:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     ea2:	11 f4       	brne	.+4      	; 0xea8 <xvprintf+0x26>
	set			;/
     ea4:	68 94       	set
22:	_LPMI	r21		;Get width
     ea6:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     ea8:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     eaa:	48 f4       	brcc	.+18     	; 0xebe <xvprintf+0x3c>
	subi	r21, '0'	;
     eac:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     eae:	90 f3       	brcs	.-28     	; 0xe94 <xvprintf+0x12>
	lsl	r18		;
     eb0:	22 0f       	add	r18, r18
	mov	r0, r18		;
     eb2:	02 2e       	mov	r0, r18
	lsl	r18		;
     eb4:	22 0f       	add	r18, r18
	lsl	r18		;
     eb6:	22 0f       	add	r18, r18
	add	r18, r0		;
     eb8:	20 0d       	add	r18, r0
	add	r18, r21	;
     eba:	25 0f       	add	r18, r21
	rjmp	22b		;/
     ebc:	f4 cf       	rjmp	.-24     	; 0xea6 <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     ebe:	0e f4       	brtc	.+2      	; 0xec2 <xvprintf+0x40>
	neg	r18		;
     ec0:	21 95       	neg	r18
25:	ld	r24, Y+		;
     ec2:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     ec4:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     ec6:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     ec8:	19 f3       	breq	.-58     	; 0xe90 <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     eca:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     ecc:	29 f1       	breq	.+74     	; 0xf18 <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     ece:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     ed0:	59 f1       	breq	.+86     	; 0xf28 <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     ed2:	bc 01       	movw	r22, r24
	clr	r24		;
     ed4:	88 27       	eor	r24, r24
	clr	r25		;
     ed6:	99 27       	eor	r25, r25
	clt			;/
     ed8:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     eda:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     edc:	21 f4       	brne	.+8      	; 0xee6 <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     ede:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     ee0:	99 91       	ld	r25, Y+
	set			;
     ee2:	68 94       	set
	_LPMI	r21		;/
     ee4:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     ee6:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     ee8:	39 f4       	brne	.+14     	; 0xef8 <xvprintf+0x76>
	ldi	r20, -10	;
     eea:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     eec:	7e f0       	brts	.+30     	; 0xf0c <xvprintf+0x8a>
	sbrs	r23, 7		;
     eee:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     ef0:	0d c0       	rjmp	.+26     	; 0xf0c <xvprintf+0x8a>
	ldi	r24, -1		;
     ef2:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     ef4:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     ef6:	0a c0       	rjmp	.+20     	; 0xf0c <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     ef8:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     efa:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     efc:	39 f0       	breq	.+14     	; 0xf0c <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     efe:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     f00:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     f02:	21 f0       	breq	.+8      	; 0xf0c <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     f04:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     f06:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     f08:	09 f0       	breq	.+2      	; 0xf0c <xvprintf+0x8a>
	ret			;abort
     f0a:	08 95       	ret
40:	push	ZH		;Output the value
     f0c:	ff 93       	push	r31
	push	ZL		;
     f0e:	ef 93       	push	r30
	rcall	xitoa		;
     f10:	7d df       	rcall	.-262    	; 0xe0c <xitoa>
42:	pop	ZL		;
     f12:	ef 91       	pop	r30
	pop	ZH		;
     f14:	ff 91       	pop	r31
	rjmp	0b		;/
     f16:	b7 cf       	rjmp	.-146    	; 0xe86 <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     f18:	ff 93       	push	r31
	push	ZL
     f1a:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     f1c:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     f1e:	81 91       	ld	r24, Z+
	cpi	r24, 0
     f20:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     f22:	b9 f3       	breq	.-18     	; 0xf12 <xvprintf+0x90>
	rcall	xputc
     f24:	60 df       	rcall	.-320    	; 0xde6 <xputc>
	rjmp	51b
     f26:	fb cf       	rjmp	.-10     	; 0xf1e <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     f28:	ff 93       	push	r31
	push	ZL
     f2a:	ef 93       	push	r30
	rcall	xputs
     f2c:	68 df       	rcall	.-304    	; 0xdfe <xputs>
	rjmp	42b
     f2e:	f1 cf       	rjmp	.-30     	; 0xf12 <xvprintf+0x90>

00000f30 <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     f30:	df 93       	push	r29
	push	YL
     f32:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     f34:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     f36:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     f38:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     f3a:	a3 df       	rcall	.-186    	; 0xe82 <xvprintf>
	pop	YL
     f3c:	cf 91       	pop	r28
	pop	YH
     f3e:	df 91       	pop	r29
	ret
     f40:	08 95       	ret

00000f42 <unselect_rows>:
 */
 
static void unselect_rows(void)
{
    // Hi-Z(DDR:0, PORT:0) to unselect
    DDRF  &= ~0b10000000;
     f42:	87 98       	cbi	0x10, 7	; 16
    PORTF &= ~0b10000000;
     f44:	8f 98       	cbi	0x11, 7	; 17
	DDRB  &= ~0b01001110;
     f46:	84 b1       	in	r24, 0x04	; 4
     f48:	81 7b       	andi	r24, 0xB1	; 177
     f4a:	84 b9       	out	0x04, r24	; 4
    PORTB &= ~0b01001110;
     f4c:	85 b1       	in	r24, 0x05	; 5
     f4e:	81 7b       	andi	r24, 0xB1	; 177
     f50:	85 b9       	out	0x05, r24	; 5
     f52:	08 95       	ret

00000f54 <matrix_init>:
}

void matrix_init(void)
{
    // To use PORTF disable JTAG with writing JTD bit twice within four cycles.
    MCUCR |= (1<<JTD);
     f54:	85 b7       	in	r24, 0x35	; 53
     f56:	80 68       	ori	r24, 0x80	; 128
     f58:	85 bf       	out	0x35, r24	; 53
    MCUCR |= (1<<JTD);
     f5a:	85 b7       	in	r24, 0x35	; 53
     f5c:	80 68       	ori	r24, 0x80	; 128
     f5e:	85 bf       	out	0x35, r24	; 53

    backlight_init_ports();
     f60:	0e 94 c6 08 	call	0x118c	; 0x118c <backlight_init_ports>

    // initialize row and col
    unselect_rows();
     f64:	0e 94 a1 07 	call	0xf42	; 0xf42 <unselect_rows>
 */
 
static void  init_cols(void)
{
    // Input with pull-up(DDR:0, PORT:1)
    DDRD  &= ~(1<<0 | 1<<4 | 1<<7 );
     f68:	8a b1       	in	r24, 0x0a	; 10
     f6a:	8e 76       	andi	r24, 0x6E	; 110
     f6c:	8a b9       	out	0x0a, r24	; 10
    PORTD |=  (1<<0 | 1<<4 | 1<<7 );
     f6e:	8b b1       	in	r24, 0x0b	; 11
     f70:	81 69       	ori	r24, 0x91	; 145
     f72:	8b b9       	out	0x0b, r24	; 11
    DDRB  &= ~(1<<4);
     f74:	24 98       	cbi	0x04, 4	; 4
    PORTB |=  (1<<4);
     f76:	2c 9a       	sbi	0x05, 4	; 5
    DDRC  &= ~(1<<6);
     f78:	3e 98       	cbi	0x07, 6	; 7
    PORTC |=  (1<<6);
     f7a:	46 9a       	sbi	0x08, 6	; 8
    DDRE  &= ~(1<<6);
     f7c:	6e 98       	cbi	0x0d, 6	; 13
    PORTE |=  (1<<6);
     f7e:	76 9a       	sbi	0x0e, 6	; 14
     f80:	ef e3       	ldi	r30, 0x3F	; 63
     f82:	f1 e0       	ldi	r31, 0x01	; 1
     f84:	aa e3       	ldi	r26, 0x3A	; 58
     f86:	b1 e0       	ldi	r27, 0x01	; 1
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
     f88:	11 92       	st	Z+, r1
        matrix_debouncing[i] = 0;
     f8a:	1d 92       	st	X+, r1
    // initialize row and col
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	e4 34       	cpi	r30, 0x44	; 68
     f90:	f8 07       	cpc	r31, r24
     f92:	d1 f7       	brne	.-12     	; 0xf88 <matrix_init+0x34>
        matrix[i] = 0;
        matrix_debouncing[i] = 0;
    }
}
     f94:	08 95       	ret

00000f96 <matrix_scan>:

uint8_t matrix_scan(void)
{
     f96:	df 92       	push	r13
     f98:	ef 92       	push	r14
     f9a:	ff 92       	push	r15
     f9c:	0f 93       	push	r16
     f9e:	1f 93       	push	r17
     fa0:	cf 93       	push	r28
     fa2:	df 93       	push	r29
     fa4:	ca e3       	ldi	r28, 0x3A	; 58
     fa6:	d1 e0       	ldi	r29, 0x01	; 1

    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
     fa8:	10 e0       	ldi	r17, 0x00	; 0
    return (PIND&(1<<0) ? 0 : (1<<5)) |
           (PIND&(1<<4) ? 0 : (1<<4)) |
           (PINC&(1<<6) ? 0 : (1<<3)) |
           (PIND&(1<<7) ? 0 : (1<<2)) |
           (PINE&(1<<6) ? 0 : (1<<1)) |
           (PINB&(1<<4) ? 0 : (1<<0));
     faa:	01 e0       	ldi	r16, 0x01	; 1
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
            }
            debouncing = DEBOUNCE;
     fac:	85 e0       	ldi	r24, 0x05	; 5
     fae:	d8 2e       	mov	r13, r24
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
     fb0:	91 e7       	ldi	r25, 0x71	; 113
     fb2:	e9 2e       	mov	r14, r25
     fb4:	92 e0       	ldi	r25, 0x02	; 2
     fb6:	f9 2e       	mov	r15, r25
            PORTF &= ~(1<<7);
            break;
    }
*/
//LED on Top of switch
    switch (row) {
     fb8:	12 30       	cpi	r17, 0x02	; 2
     fba:	81 f0       	breq	.+32     	; 0xfdc <matrix_scan+0x46>
     fbc:	28 f4       	brcc	.+10     	; 0xfc8 <matrix_scan+0x32>
     fbe:	11 30       	cpi	r17, 0x01	; 1
     fc0:	81 f4       	brne	.+32     	; 0xfe2 <matrix_scan+0x4c>
        case 2:
            DDRB  |= (1<<3);
            PORTB &= ~(1<<3);
            break;
        case 1:
            DDRB  |= (1<<1);
     fc2:	21 9a       	sbi	0x04, 1	; 4
            PORTB &= ~(1<<1);
     fc4:	29 98       	cbi	0x05, 1	; 5
     fc6:	0f c0       	rjmp	.+30     	; 0xfe6 <matrix_scan+0x50>
            PORTF &= ~(1<<7);
            break;
    }
*/
//LED on Top of switch
    switch (row) {
     fc8:	13 30       	cpi	r17, 0x03	; 3
     fca:	29 f0       	breq	.+10     	; 0xfd6 <matrix_scan+0x40>
     fcc:	14 30       	cpi	r17, 0x04	; 4
     fce:	49 f4       	brne	.+18     	; 0xfe2 <matrix_scan+0x4c>
        case 4:
            DDRB  |= (1<<6);
     fd0:	26 9a       	sbi	0x04, 6	; 4
            PORTB &= ~(1<<6);
     fd2:	2e 98       	cbi	0x05, 6	; 5
     fd4:	08 c0       	rjmp	.+16     	; 0xfe6 <matrix_scan+0x50>
            break;
        case 3:
            DDRB  |= (1<<2);
     fd6:	22 9a       	sbi	0x04, 2	; 4
            PORTB &= ~(1<<2);
     fd8:	2a 98       	cbi	0x05, 2	; 5
     fda:	05 c0       	rjmp	.+10     	; 0xfe6 <matrix_scan+0x50>
            break;
        case 2:
            DDRB  |= (1<<3);
     fdc:	23 9a       	sbi	0x04, 3	; 4
            PORTB &= ~(1<<3);
     fde:	2b 98       	cbi	0x05, 3	; 5
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <matrix_scan+0x50>
        case 1:
            DDRB  |= (1<<1);
            PORTB &= ~(1<<1);
            break;
        case 0:
            DDRF  |= (1<<7);
     fe2:	87 9a       	sbi	0x10, 7	; 16
            PORTF &= ~(1<<7);
     fe4:	8f 98       	cbi	0x11, 7	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fe6:	80 ea       	ldi	r24, 0xA0	; 160
     fe8:	8a 95       	dec	r24
     fea:	f1 f7       	brne	.-4      	; 0xfe8 <matrix_scan+0x52>
           (PIND&(1<<7) ? 0 : (1<<3)) |
           (PINE&(1<<6) ? 0 : (1<<4)) |
           (PINB&(1<<4) ? 0 : (1<<5));
*/
//LED on Top of switch
    return (PIND&(1<<0) ? 0 : (1<<5)) |
     fec:	48 9b       	sbis	0x09, 0	; 9
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <matrix_scan+0x5e>
     ff0:	50 e0       	ldi	r21, 0x00	; 0
     ff2:	01 c0       	rjmp	.+2      	; 0xff6 <matrix_scan+0x60>
     ff4:	50 e2       	ldi	r21, 0x20	; 32
     ff6:	4c 9b       	sbis	0x09, 4	; 9
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <matrix_scan+0x68>
     ffa:	40 e0       	ldi	r20, 0x00	; 0
     ffc:	01 c0       	rjmp	.+2      	; 0x1000 <matrix_scan+0x6a>
     ffe:	40 e1       	ldi	r20, 0x10	; 16
    1000:	36 9b       	sbis	0x06, 6	; 6
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <matrix_scan+0x72>
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	01 c0       	rjmp	.+2      	; 0x100a <matrix_scan+0x74>
    1008:	38 e0       	ldi	r19, 0x08	; 8
           (PIND&(1<<4) ? 0 : (1<<4)) |
           (PINC&(1<<6) ? 0 : (1<<3)) |
           (PIND&(1<<7) ? 0 : (1<<2)) |
    100a:	99 b1       	in	r25, 0x09	; 9
           (PIND&(1<<7) ? 0 : (1<<3)) |
           (PINE&(1<<6) ? 0 : (1<<4)) |
           (PINB&(1<<4) ? 0 : (1<<5));
*/
//LED on Top of switch
    return (PIND&(1<<0) ? 0 : (1<<5)) |
    100c:	90 95       	com	r25
    100e:	99 1f       	adc	r25, r25
    1010:	99 27       	eor	r25, r25
    1012:	99 1f       	adc	r25, r25
    1014:	99 0f       	add	r25, r25
    1016:	99 0f       	add	r25, r25
    1018:	66 9b       	sbis	0x0c, 6	; 12
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <matrix_scan+0x8a>
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	01 c0       	rjmp	.+2      	; 0x1022 <matrix_scan+0x8c>
    1020:	22 e0       	ldi	r18, 0x02	; 2
           (PIND&(1<<4) ? 0 : (1<<4)) |
           (PINC&(1<<6) ? 0 : (1<<3)) |
           (PIND&(1<<7) ? 0 : (1<<2)) |
           (PINE&(1<<6) ? 0 : (1<<1)) |
           (PINB&(1<<4) ? 0 : (1<<0));
    1022:	83 b1       	in	r24, 0x03	; 3
    1024:	82 95       	swap	r24
    1026:	81 70       	andi	r24, 0x01	; 1
    1028:	80 27       	eor	r24, r16
           (PIND&(1<<7) ? 0 : (1<<3)) |
           (PINE&(1<<6) ? 0 : (1<<4)) |
           (PINB&(1<<4) ? 0 : (1<<5));
*/
//LED on Top of switch
    return (PIND&(1<<0) ? 0 : (1<<5)) |
    102a:	85 2b       	or	r24, r21
    102c:	84 2b       	or	r24, r20
    102e:	83 2b       	or	r24, r19
    1030:	89 2b       	or	r24, r25
    1032:	82 2b       	or	r24, r18

    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
    1034:	98 81       	ld	r25, Y
    1036:	98 17       	cp	r25, r24
    1038:	39 f1       	breq	.+78     	; 0x1088 <matrix_scan+0xf2>
            matrix_debouncing[i] = cols;
    103a:	88 83       	st	Y, r24
            if (debouncing) {
    103c:	80 91 00 01 	lds	r24, 0x0100
    1040:	88 23       	and	r24, r24
    1042:	01 f1       	breq	.+64     	; 0x1084 <matrix_scan+0xee>
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
    1044:	80 91 d9 01 	lds	r24, 0x01D9
    1048:	80 ff       	sbrs	r24, 0
    104a:	04 c0       	rjmp	.+8      	; 0x1054 <matrix_scan+0xbe>
    104c:	86 e7       	ldi	r24, 0x76	; 118
    104e:	92 e0       	ldi	r25, 0x02	; 2
    1050:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    1054:	80 91 d9 01 	lds	r24, 0x01D9
    1058:	80 ff       	sbrs	r24, 0
    105a:	0c c0       	rjmp	.+24     	; 0x1074 <matrix_scan+0xde>
    105c:	80 91 00 01 	lds	r24, 0x0100
    1060:	1f 92       	push	r1
    1062:	8f 93       	push	r24
    1064:	ff 92       	push	r15
    1066:	ef 92       	push	r14
    1068:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    106c:	0f 90       	pop	r0
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	80 91 d9 01 	lds	r24, 0x01D9
    1078:	80 ff       	sbrs	r24, 0
    107a:	04 c0       	rjmp	.+8      	; 0x1084 <matrix_scan+0xee>
    107c:	8f e6       	ldi	r24, 0x6F	; 111
    107e:	92 e0       	ldi	r25, 0x02	; 2
    1080:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
            }
            debouncing = DEBOUNCE;
    1084:	d0 92 00 01 	sts	0x0100, r13
        }
        unselect_rows();
    1088:	0e 94 a1 07 	call	0xf42	; 0xf42 <unselect_rows>
}

uint8_t matrix_scan(void)
{

    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    108c:	1f 5f       	subi	r17, 0xFF	; 255
    108e:	21 96       	adiw	r28, 0x01	; 1
    1090:	15 30       	cpi	r17, 0x05	; 5
    1092:	09 f0       	breq	.+2      	; 0x1096 <matrix_scan+0x100>
    1094:	91 cf       	rjmp	.-222    	; 0xfb8 <matrix_scan+0x22>
            debouncing = DEBOUNCE;
        }
        unselect_rows();
    }

    if (debouncing) {
    1096:	80 91 00 01 	lds	r24, 0x0100
    109a:	88 23       	and	r24, r24
    109c:	b1 f0       	breq	.+44     	; 0x10ca <matrix_scan+0x134>
        if (--debouncing) {
    109e:	81 50       	subi	r24, 0x01	; 1
    10a0:	80 93 00 01 	sts	0x0100, r24
    10a4:	88 23       	and	r24, r24
    10a6:	39 f0       	breq	.+14     	; 0x10b6 <matrix_scan+0x120>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10a8:	8f e9       	ldi	r24, 0x9F	; 159
    10aa:	9f e0       	ldi	r25, 0x0F	; 15
    10ac:	01 97       	sbiw	r24, 0x01	; 1
    10ae:	f1 f7       	brne	.-4      	; 0x10ac <matrix_scan+0x116>
    10b0:	00 c0       	rjmp	.+0      	; 0x10b2 <matrix_scan+0x11c>
    10b2:	00 00       	nop
    10b4:	0a c0       	rjmp	.+20     	; 0x10ca <matrix_scan+0x134>
    10b6:	af e3       	ldi	r26, 0x3F	; 63
    10b8:	b1 e0       	ldi	r27, 0x01	; 1
    10ba:	ea e3       	ldi	r30, 0x3A	; 58
    10bc:	f1 e0       	ldi	r31, 0x01	; 1
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
                matrix[i] = matrix_debouncing[i];
    10be:	81 91       	ld	r24, Z+
    10c0:	8d 93       	st	X+, r24

    if (debouncing) {
        if (--debouncing) {
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    10c2:	91 e0       	ldi	r25, 0x01	; 1
    10c4:	ef 33       	cpi	r30, 0x3F	; 63
    10c6:	f9 07       	cpc	r31, r25
    10c8:	d1 f7       	brne	.-12     	; 0x10be <matrix_scan+0x128>
            }
        }
    }

    return 1;
}
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	1f 91       	pop	r17
    10d2:	0f 91       	pop	r16
    10d4:	ff 90       	pop	r15
    10d6:	ef 90       	pop	r14
    10d8:	df 90       	pop	r13
    10da:	08 95       	ret

000010dc <matrix_get_row>:
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
    10dc:	e8 2f       	mov	r30, r24
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	e1 5c       	subi	r30, 0xC1	; 193
    10e2:	fe 4f       	sbci	r31, 0xFE	; 254
}
    10e4:	80 81       	ld	r24, Z
    10e6:	08 95       	ret

000010e8 <matrix_print>:

void matrix_print(void)
{
    10e8:	cf 92       	push	r12
    10ea:	df 92       	push	r13
    10ec:	ef 92       	push	r14
    10ee:	ff 92       	push	r15
    10f0:	0f 93       	push	r16
    10f2:	1f 93       	push	r17
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
    print("\nr/c 0123456789ABCDEF\n");
    10f8:	88 e5       	ldi	r24, 0x58	; 88
    10fa:	92 e0       	ldi	r25, 0x02	; 2
    10fc:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    1100:	2f e3       	ldi	r18, 0x3F	; 63
    1102:	e2 2e       	mov	r14, r18
    1104:	21 e0       	ldi	r18, 0x01	; 1
    1106:	f2 2e       	mov	r15, r18
    1108:	c0 e0       	ldi	r28, 0x00	; 0
    110a:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    110c:	33 e5       	ldi	r19, 0x53	; 83
    110e:	c3 2e       	mov	r12, r19
    1110:	32 e0       	ldi	r19, 0x02	; 2
    1112:	d3 2e       	mov	r13, r19
        pbin_reverse16(matrix_get_row(row));
    1114:	0a e4       	ldi	r16, 0x4A	; 74
    1116:	12 e0       	ldi	r17, 0x02	; 2

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    1118:	df 93       	push	r29
    111a:	cf 93       	push	r28
    111c:	df 92       	push	r13
    111e:	cf 92       	push	r12
    1120:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    1124:	80 e5       	ldi	r24, 0x50	; 80
    1126:	92 e0       	ldi	r25, 0x02	; 2
    1128:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
    112c:	f7 01       	movw	r30, r14
    112e:	81 91       	ld	r24, Z+
    1130:	7f 01       	movw	r14, r30
void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <bitrev16>
    1138:	9f 93       	push	r25
    113a:	8f 93       	push	r24
    113c:	1f 93       	push	r17
    113e:	0f 93       	push	r16
    1140:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
        print("\n");
    1144:	88 e4       	ldi	r24, 0x48	; 72
    1146:	92 e0       	ldi	r25, 0x02	; 2
    1148:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    114c:	21 96       	adiw	r28, 0x01	; 1
}

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    114e:	8d b7       	in	r24, 0x3d	; 61
    1150:	9e b7       	in	r25, 0x3e	; 62
    1152:	08 96       	adiw	r24, 0x08	; 8
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	f8 94       	cli
    1158:	9e bf       	out	0x3e, r25	; 62
    115a:	0f be       	out	0x3f, r0	; 63
    115c:	8d bf       	out	0x3d, r24	; 61
    115e:	c5 30       	cpi	r28, 0x05	; 5
    1160:	d1 05       	cpc	r29, r1
    1162:	d1 f6       	brne	.-76     	; 0x1118 <matrix_print+0x30>
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
        print("\n");
    }
}
    1164:	df 91       	pop	r29
    1166:	cf 91       	pop	r28
    1168:	1f 91       	pop	r17
    116a:	0f 91       	pop	r16
    116c:	ff 90       	pop	r15
    116e:	ef 90       	pop	r14
    1170:	df 90       	pop	r13
    1172:	cf 90       	pop	r12
    1174:	08 95       	ret

00001176 <led_set>:
#include "led.h"


void led_set(uint8_t usb_led)
{
    if (usb_led & (1<<USB_LED_CAPS_LOCK)) {
    1176:	81 ff       	sbrs	r24, 1
    1178:	04 c0       	rjmp	.+8      	; 0x1182 <led_set+0xc>
        // output low
        DDRB |= (1<<0);
    117a:	20 9a       	sbi	0x04, 0	; 4
        PORTB &= ~(1<<0);
    117c:	28 98       	cbi	0x05, 0	; 5
        DDRD |= (1<<5);
    117e:	55 9a       	sbi	0x0a, 5	; 10
    1180:	03 c0       	rjmp	.+6      	; 0x1188 <led_set+0x12>
        PORTD &= ~(1<<5);
    } else {
        // Hi-Z
        DDRB &= ~(1<<0);
    1182:	20 98       	cbi	0x04, 0	; 4
        PORTB &= ~(1<<0);
    1184:	28 98       	cbi	0x05, 0	; 5
        DDRD &= ~(1<<5);
    1186:	55 98       	cbi	0x0a, 5	; 10
        PORTD &= ~(1<<5);
    1188:	5d 98       	cbi	0x0b, 5	; 11
    118a:	08 95       	ret

0000118c <backlight_init_ports>:
uint8_t led_level = 0;


void backlight_init_ports()
{
    DDRB |= (1<<5);
    118c:	25 9a       	sbi	0x04, 5	; 4
    PORTB &= ~(1<<5);
    118e:	2d 98       	cbi	0x05, 5	; 5

    TCCR1A = _BV(COM1A1) | _BV(WGM11); // = 0b10000010;
    1190:	82 e8       	ldi	r24, 0x82	; 130
    1192:	80 93 80 00 	sts	0x0080, r24
    TCCR1B = _BV(WGM13) | _BV(WGM12) | _BV(CS10); // = 0b00011001;
    1196:	89 e1       	ldi	r24, 0x19	; 25
    1198:	80 93 81 00 	sts	0x0081, r24

    ICR1 = 0xFFFF;
    119c:	8f ef       	ldi	r24, 0xFF	; 255
    119e:	9f ef       	ldi	r25, 0xFF	; 255
    11a0:	90 93 87 00 	sts	0x0087, r25
    11a4:	80 93 86 00 	sts	0x0086, r24

    FET = 0x0000;
    11a8:	10 92 89 00 	sts	0x0089, r1
    11ac:	10 92 88 00 	sts	0x0088, r1

    backlight_init();
    11b0:	0c 94 f2 28 	jmp	0x51e4	; 0x51e4 <backlight_init>

000011b4 <backlight_set>:
}

void backlight_set(uint8_t level)
{
    if ( level == 0 )
    11b4:	81 11       	cpse	r24, r1
    11b6:	0b c0       	rjmp	.+22     	; 0x11ce <backlight_set+0x1a>
    {
        // Turn off PWM control on PB5, revert to output low.
        TCCR1A &= ~(_BV(COM1A1));
    11b8:	80 91 80 00 	lds	r24, 0x0080
    11bc:	8f 77       	andi	r24, 0x7F	; 127
    11be:	80 93 80 00 	sts	0x0080, r24
        FET = 0x0000;
    11c2:	10 92 89 00 	sts	0x0089, r1
    11c6:	10 92 88 00 	sts	0x0088, r1
        // Prevent backlight blink on lowest level
        PORTB &= ~(_BV(PORTB5));
    11ca:	2d 98       	cbi	0x05, 5	; 5
    11cc:	08 95       	ret
    }
    else if ( level == BACKLIGHT_LEVELS )
    {
        // Prevent backlight blink on lowest level
        PORTB &= ~(_BV(PORTB5));
    11ce:	2d 98       	cbi	0x05, 5	; 5
        TCCR1A &= ~(_BV(COM1A1));
        FET = 0x0000;
        // Prevent backlight blink on lowest level
        PORTB &= ~(_BV(PORTB5));
    }
    else if ( level == BACKLIGHT_LEVELS )
    11d0:	84 30       	cpi	r24, 0x04	; 4
    11d2:	41 f4       	brne	.+16     	; 0x11e4 <backlight_set+0x30>
    {
        // Prevent backlight blink on lowest level
        PORTB &= ~(_BV(PORTB5));
        // Turn on PWM control of PB5
        TCCR1A |= _BV(COM1A1);
    11d4:	80 91 80 00 	lds	r24, 0x0080
    11d8:	80 68       	ori	r24, 0x80	; 128
    11da:	80 93 80 00 	sts	0x0080, r24
        // Set the brightness
        FET = 0xFFFF;
    11de:	8f ef       	ldi	r24, 0xFF	; 255
    11e0:	9f ef       	ldi	r25, 0xFF	; 255
    11e2:	12 c0       	rjmp	.+36     	; 0x1208 <backlight_set+0x54>
    else        
    {
        // Prevent backlight blink on lowest level
        PORTB &= ~(_BV(PORTB5));
        // Turn on PWM control of PB5
        TCCR1A |= _BV(COM1A1);
    11e4:	90 91 80 00 	lds	r25, 0x0080
    11e8:	90 68       	ori	r25, 0x80	; 128
    11ea:	90 93 80 00 	sts	0x0080, r25
        // Set the brightness
        FET = 0xFFFF >> ((BACKLIGHT_LEVELS - level) * ((BACKLIGHT_LEVELS + 1) / 2));
    11ee:	24 e0       	ldi	r18, 0x04	; 4
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	28 1b       	sub	r18, r24
    11f4:	31 09       	sbc	r19, r1
    11f6:	22 0f       	add	r18, r18
    11f8:	33 1f       	adc	r19, r19
    11fa:	8f ef       	ldi	r24, 0xFF	; 255
    11fc:	9f ef       	ldi	r25, 0xFF	; 255
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <backlight_set+0x50>
    1200:	96 95       	lsr	r25
    1202:	87 95       	ror	r24
    1204:	2a 95       	dec	r18
    1206:	e2 f7       	brpl	.-8      	; 0x1200 <backlight_set+0x4c>
    1208:	90 93 89 00 	sts	0x0089, r25
    120c:	80 93 88 00 	sts	0x0088, r24
    1210:	08 95       	ret

00001212 <keyboard_leds>:
 * Host driver
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    1212:	80 91 68 01 	lds	r24, 0x0168
    1216:	08 95       	ret

00001218 <sendchar>:
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);
    1218:	9f b7       	in	r25, 0x3f	; 63
    121a:	f8 94       	cli
    121c:	10 92 47 01 	sts	0x0147, r1
    1220:	9f bf       	out	0x3f, r25	; 63

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1222:	90 91 ee 01 	lds	r25, 0x01EE
    1226:	94 30       	cpi	r25, 0x04	; 4
    1228:	09 f0       	breq	.+2      	; 0x122c <sendchar+0x14>
    122a:	58 c0       	rjmp	.+176    	; 0x12dc <sendchar+0xc4>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    122c:	90 91 e9 00 	lds	r25, 0x00E9
    1230:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1232:	20 91 ec 00 	lds	r18, 0x00EC
    1236:	20 ff       	sbrs	r18, 0
    1238:	02 c0       	rjmp	.+4      	; 0x123e <sendchar+0x26>
    123a:	20 e8       	ldi	r18, 0x80	; 128
    123c:	01 c0       	rjmp	.+2      	; 0x1240 <sendchar+0x28>
    123e:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1240:	29 2b       	or	r18, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1242:	94 e0       	ldi	r25, 0x04	; 4
    1244:	90 93 e9 00 	sts	0x00E9, r25
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1248:	90 91 eb 00 	lds	r25, 0x00EB
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    124c:	90 ff       	sbrs	r25, 0
    124e:	43 c0       	rjmp	.+134    	; 0x12d6 <sendchar+0xbe>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1250:	90 91 ee 00 	lds	r25, 0x00EE
    1254:	97 ff       	sbrs	r25, 7
    1256:	3f c0       	rjmp	.+126    	; 0x12d6 <sendchar+0xbe>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
    1258:	90 91 44 01 	lds	r25, 0x0144
    125c:	99 23       	and	r25, r25
    125e:	21 f0       	breq	.+8      	; 0x1268 <sendchar+0x50>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1260:	90 91 e8 00 	lds	r25, 0x00E8
    1264:	95 ff       	sbrs	r25, 5
    1266:	37 c0       	rjmp	.+110    	; 0x12d6 <sendchar+0xbe>
        goto ERROR_EXIT;
    }

    timeouted = false;
    1268:	10 92 44 01 	sts	0x0144, r1

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
    126c:	96 e0       	ldi	r25, 0x06	; 6
    126e:	30 91 e8 00 	lds	r19, 0x00E8
    1272:	35 fd       	sbrc	r19, 5
    1274:	15 c0       	rjmp	.+42     	; 0x12a0 <sendchar+0x88>
        if (USB_DeviceState != DEVICE_STATE_Configured) {
    1276:	30 91 ee 01 	lds	r19, 0x01EE
    127a:	34 30       	cpi	r19, 0x04	; 4
    127c:	61 f5       	brne	.+88     	; 0x12d6 <sendchar+0xbe>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    127e:	30 91 eb 00 	lds	r19, 0x00EB
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
    1282:	35 fd       	sbrc	r19, 5
    1284:	28 c0       	rjmp	.+80     	; 0x12d6 <sendchar+0xbe>
    1286:	91 50       	subi	r25, 0x01	; 1
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
    1288:	21 f4       	brne	.+8      	; 0x1292 <sendchar+0x7a>
            timeouted = true;
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	80 93 44 01 	sts	0x0144, r24
            goto ERROR_EXIT;
    1290:	22 c0       	rjmp	.+68     	; 0x12d6 <sendchar+0xbe>
    1292:	ef e9       	ldi	r30, 0x9F	; 159
    1294:	ff e0       	ldi	r31, 0x0F	; 15
    1296:	31 97       	sbiw	r30, 0x01	; 1
    1298:	f1 f7       	brne	.-4      	; 0x1296 <sendchar+0x7e>
    129a:	00 c0       	rjmp	.+0      	; 0x129c <sendchar+0x84>
    129c:	00 00       	nop
    129e:	e7 cf       	rjmp	.-50     	; 0x126e <sendchar+0x56>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    12a0:	80 93 f1 00 	sts	0x00F1, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    12a4:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed()) {
    12a8:	85 fd       	sbrc	r24, 5
    12aa:	0a c0       	rjmp	.+20     	; 0x12c0 <sendchar+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    12ac:	80 91 e8 00 	lds	r24, 0x00E8
        while (!(Endpoint_IsINReady()));
    12b0:	80 ff       	sbrs	r24, 0
    12b2:	fc cf       	rjmp	.-8      	; 0x12ac <sendchar+0x94>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12b4:	80 91 e8 00 	lds	r24, 0x00E8
    12b8:	8e 77       	andi	r24, 0x7E	; 126
    12ba:	80 93 e8 00 	sts	0x00E8, r24
    12be:	06 c0       	rjmp	.+12     	; 0x12cc <sendchar+0xb4>
        Endpoint_ClearIN();
    } else {
        CONSOLE_FLUSH_SET(true);
    12c0:	8f b7       	in	r24, 0x3f	; 63
    12c2:	f8 94       	cli
    12c4:	91 e0       	ldi	r25, 0x01	; 1
    12c6:	90 93 47 01 	sts	0x0147, r25
    12ca:	8f bf       	out	0x3f, r24	; 63
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    12cc:	2f 70       	andi	r18, 0x0F	; 15
    12ce:	20 93 e9 00 	sts	0x00E9, r18
    }

    Endpoint_SelectEndpoint(ep);
    return 0;
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	08 95       	ret
    12d6:	2f 70       	andi	r18, 0x0F	; 15
    12d8:	20 93 e9 00 	sts	0x00E9, r18
    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);

    if (USB_DeviceState != DEVICE_STATE_Configured)
        return -1;
    12dc:	8f ef       	ldi	r24, 0xFF	; 255
    Endpoint_SelectEndpoint(ep);
    return 0;
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
    12de:	08 95       	ret

000012e0 <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
    12e0:	cf 93       	push	r28
    12e2:	df 93       	push	r29
    12e4:	00 d0       	rcall	.+0      	; 0x12e6 <send_consumer+0x6>
    12e6:	1f 92       	push	r1
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    12ec:	20 91 ee 01 	lds	r18, 0x01EE
    12f0:	24 30       	cpi	r18, 0x04	; 4
    12f2:	19 f5       	brne	.+70     	; 0x133a <send_consumer+0x5a>
        return;

    report_extra_t r = {
    12f4:	23 e0       	ldi	r18, 0x03	; 3
    12f6:	29 83       	std	Y+1, r18	; 0x01
    12f8:	9b 83       	std	Y+3, r25	; 0x03
    12fa:	8a 83       	std	Y+2, r24	; 0x02
    12fc:	20 93 e9 00 	sts	0x00E9, r18
    1300:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1302:	90 91 e8 00 	lds	r25, 0x00E8
    1306:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1308:	95 fd       	sbrc	r25, 5
    130a:	06 c0       	rjmp	.+12     	; 0x1318 <send_consumer+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    130c:	95 ed       	ldi	r25, 0xD5	; 213
    130e:	9a 95       	dec	r25
    1310:	f1 f7       	brne	.-4      	; 0x130e <send_consumer+0x2e>
    1312:	00 00       	nop
    1314:	81 11       	cpse	r24, r1
    1316:	f5 cf       	rjmp	.-22     	; 0x1302 <send_consumer+0x22>
    1318:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    131c:	85 ff       	sbrs	r24, 5
    131e:	0d c0       	rjmp	.+26     	; 0x133a <send_consumer+0x5a>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    1320:	40 e0       	ldi	r20, 0x00	; 0
    1322:	50 e0       	ldi	r21, 0x00	; 0
    1324:	63 e0       	ldi	r22, 0x03	; 3
    1326:	70 e0       	ldi	r23, 0x00	; 0
    1328:	ce 01       	movw	r24, r28
    132a:	01 96       	adiw	r24, 0x01	; 1
    132c:	0e 94 4e 0c 	call	0x189c	; 0x189c <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1330:	80 91 e8 00 	lds	r24, 0x00E8
    1334:	8e 77       	andi	r24, 0x7E	; 126
    1336:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	df 91       	pop	r29
    1342:	cf 91       	pop	r28
    1344:	08 95       	ret

00001346 <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
    1346:	cf 93       	push	r28
    1348:	df 93       	push	r29
    134a:	00 d0       	rcall	.+0      	; 0x134c <send_system+0x6>
    134c:	1f 92       	push	r1
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1352:	20 91 ee 01 	lds	r18, 0x01EE
    1356:	24 30       	cpi	r18, 0x04	; 4
    1358:	21 f5       	brne	.+72     	; 0x13a2 <send_system+0x5c>
        return;

    report_extra_t r = {
    135a:	22 e0       	ldi	r18, 0x02	; 2
    135c:	29 83       	std	Y+1, r18	; 0x01
    135e:	9b 83       	std	Y+3, r25	; 0x03
    1360:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1362:	83 e0       	ldi	r24, 0x03	; 3
    1364:	80 93 e9 00 	sts	0x00E9, r24
    1368:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    136a:	90 91 e8 00 	lds	r25, 0x00E8
    136e:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1370:	95 fd       	sbrc	r25, 5
    1372:	06 c0       	rjmp	.+12     	; 0x1380 <send_system+0x3a>
    1374:	95 ed       	ldi	r25, 0xD5	; 213
    1376:	9a 95       	dec	r25
    1378:	f1 f7       	brne	.-4      	; 0x1376 <send_system+0x30>
    137a:	00 00       	nop
    137c:	81 11       	cpse	r24, r1
    137e:	f5 cf       	rjmp	.-22     	; 0x136a <send_system+0x24>
    1380:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    1384:	85 ff       	sbrs	r24, 5
    1386:	0d c0       	rjmp	.+26     	; 0x13a2 <send_system+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    1388:	40 e0       	ldi	r20, 0x00	; 0
    138a:	50 e0       	ldi	r21, 0x00	; 0
    138c:	63 e0       	ldi	r22, 0x03	; 3
    138e:	70 e0       	ldi	r23, 0x00	; 0
    1390:	ce 01       	movw	r24, r28
    1392:	01 96       	adiw	r24, 0x01	; 1
    1394:	0e 94 4e 0c 	call	0x189c	; 0x189c <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1398:	80 91 e8 00 	lds	r24, 0x00E8
    139c:	8e 77       	andi	r24, 0x7E	; 126
    139e:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	df 91       	pop	r29
    13aa:	cf 91       	pop	r28
    13ac:	08 95       	ret

000013ae <send_mouse>:
static void send_mouse(report_mouse_t *report)
{
#ifdef MOUSE_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    13ae:	20 91 ee 01 	lds	r18, 0x01EE
    13b2:	24 30       	cpi	r18, 0x04	; 4
    13b4:	f1 f4       	brne	.+60     	; 0x13f2 <send_mouse+0x44>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13b6:	22 e0       	ldi	r18, 0x02	; 2
    13b8:	20 93 e9 00 	sts	0x00E9, r18
    13bc:	2f ef       	ldi	r18, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    13be:	30 91 e8 00 	lds	r19, 0x00E8
    13c2:	21 50       	subi	r18, 0x01	; 1

    /* Select the Mouse Report Endpoint */
    Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    13c4:	35 fd       	sbrc	r19, 5
    13c6:	06 c0       	rjmp	.+12     	; 0x13d4 <send_mouse+0x26>
    13c8:	35 ed       	ldi	r19, 0xD5	; 213
    13ca:	3a 95       	dec	r19
    13cc:	f1 f7       	brne	.-4      	; 0x13ca <send_mouse+0x1c>
    13ce:	00 00       	nop
    13d0:	21 11       	cpse	r18, r1
    13d2:	f5 cf       	rjmp	.-22     	; 0x13be <send_mouse+0x10>
    13d4:	20 91 e8 00 	lds	r18, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    13d8:	25 ff       	sbrs	r18, 5
    13da:	0b c0       	rjmp	.+22     	; 0x13f2 <send_mouse+0x44>

    /* Write Mouse Report Data */
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    13dc:	40 e0       	ldi	r20, 0x00	; 0
    13de:	50 e0       	ldi	r21, 0x00	; 0
    13e0:	65 e0       	ldi	r22, 0x05	; 5
    13e2:	70 e0       	ldi	r23, 0x00	; 0
    13e4:	0e 94 4e 0c 	call	0x189c	; 0x189c <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    13e8:	80 91 e8 00 	lds	r24, 0x00E8
    13ec:	8e 77       	andi	r24, 0x7E	; 126
    13ee:	80 93 e8 00 	sts	0x00E8, r24
    13f2:	08 95       	ret

000013f4 <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
    13f4:	cf 93       	push	r28
    13f6:	df 93       	push	r29
    13f8:	ec 01       	movw	r28, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    13fa:	80 91 ee 01 	lds	r24, 0x01EE
    13fe:	84 30       	cpi	r24, 0x04	; 4
    1400:	09 f0       	breq	.+2      	; 0x1404 <send_keyboard+0x10>
    1402:	47 c0       	rjmp	.+142    	; 0x1492 <send_keyboard+0x9e>
        return;

    /* Select the Keyboard Report Endpoint */
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    1404:	80 91 0b 01 	lds	r24, 0x010B
    1408:	88 23       	and	r24, r24
    140a:	e1 f0       	breq	.+56     	; 0x1444 <send_keyboard+0x50>
    140c:	80 91 0c 01 	lds	r24, 0x010C
    1410:	88 23       	and	r24, r24
    1412:	c1 f0       	breq	.+48     	; 0x1444 <send_keyboard+0x50>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1414:	85 e0       	ldi	r24, 0x05	; 5
    1416:	80 93 e9 00 	sts	0x00E9, r24
    141a:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    141c:	90 91 e8 00 	lds	r25, 0x00E8
    1420:	81 50       	subi	r24, 0x01	; 1
        /* Report protocol - NKRO */
        Endpoint_SelectEndpoint(NKRO_IN_EPNUM);

        /* Check if write ready for a polling interval around 1ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
    1422:	95 fd       	sbrc	r25, 5
    1424:	06 c0       	rjmp	.+12     	; 0x1432 <send_keyboard+0x3e>
    1426:	95 e1       	ldi	r25, 0x15	; 21
    1428:	9a 95       	dec	r25
    142a:	f1 f7       	brne	.-4      	; 0x1428 <send_keyboard+0x34>
    142c:	00 00       	nop
    142e:	81 11       	cpse	r24, r1
    1430:	f5 cf       	rjmp	.-22     	; 0x141c <send_keyboard+0x28>
    1432:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    1436:	85 ff       	sbrs	r24, 5
    1438:	2c c0       	rjmp	.+88     	; 0x1492 <send_keyboard+0x9e>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
    143a:	40 e0       	ldi	r20, 0x00	; 0
    143c:	50 e0       	ldi	r21, 0x00	; 0
    143e:	60 e2       	ldi	r22, 0x20	; 32
    1440:	70 e0       	ldi	r23, 0x00	; 0
    1442:	17 c0       	rjmp	.+46     	; 0x1472 <send_keyboard+0x7e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	80 93 e9 00 	sts	0x00E9, r24
    144a:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    144c:	90 91 e8 00 	lds	r25, 0x00E8
    1450:	81 50       	subi	r24, 0x01	; 1
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1452:	95 fd       	sbrc	r25, 5
    1454:	06 c0       	rjmp	.+12     	; 0x1462 <send_keyboard+0x6e>
    1456:	95 ed       	ldi	r25, 0xD5	; 213
    1458:	9a 95       	dec	r25
    145a:	f1 f7       	brne	.-4      	; 0x1458 <send_keyboard+0x64>
    145c:	00 00       	nop
    145e:	81 11       	cpse	r24, r1
    1460:	f5 cf       	rjmp	.-22     	; 0x144c <send_keyboard+0x58>
    1462:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    1466:	85 ff       	sbrs	r24, 5
    1468:	14 c0       	rjmp	.+40     	; 0x1492 <send_keyboard+0x9e>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    146a:	40 e0       	ldi	r20, 0x00	; 0
    146c:	50 e0       	ldi	r21, 0x00	; 0
    146e:	68 e0       	ldi	r22, 0x08	; 8
    1470:	70 e0       	ldi	r23, 0x00	; 0
    1472:	ce 01       	movw	r24, r28
    1474:	0e 94 4e 0c 	call	0x189c	; 0x189c <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1478:	80 91 e8 00 	lds	r24, 0x00E8
    147c:	8e 77       	andi	r24, 0x7E	; 126
    147e:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    1482:	80 e2       	ldi	r24, 0x20	; 32
    1484:	fe 01       	movw	r30, r28
    1486:	a8 e4       	ldi	r26, 0x48	; 72
    1488:	b1 e0       	ldi	r27, 0x01	; 1
    148a:	01 90       	ld	r0, Z+
    148c:	0d 92       	st	X+, r0
    148e:	8a 95       	dec	r24
    1490:	e1 f7       	brne	.-8      	; 0x148a <send_keyboard+0x96>
}
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	08 95       	ret

00001498 <EVENT_USB_Device_Connect>:
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    1498:	8e ea       	ldi	r24, 0xAE	; 174
    149a:	92 e0       	ldi	r25, 0x02	; 2
    149c:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    /* For battery powered device */
    if (!USB_IsInitialized) {
    14a0:	80 91 ed 01 	lds	r24, 0x01ED
    14a4:	81 11       	cpse	r24, r1
    14a6:	09 c0       	rjmp	.+18     	; 0x14ba <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    14a8:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <USB_Disable>
        USB_Init();
    14ac:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    14b0:	80 91 e2 00 	lds	r24, 0x00E2
    14b4:	84 60       	ori	r24, 0x04	; 4
    14b6:	80 93 e2 00 	sts	0x00E2, r24
    14ba:	08 95       	ret

000014bc <EVENT_USB_Device_Disconnect>:
    }
}

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    14bc:	8a ea       	ldi	r24, 0xAA	; 170
    14be:	92 e0       	ldi	r25, 0x02	; 2
    14c0:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    /* For battery powered device */
    USB_IsInitialized = false;
    14c4:	10 92 ed 01 	sts	0x01ED, r1
    14c8:	08 95       	ret

000014ca <EVENT_USB_Device_Reset>:
    }
*/
}

void EVENT_USB_Device_Reset(void)
{
    14ca:	08 95       	ret

000014cc <EVENT_USB_Device_StartOfFrame>:

// called every 1ms
void EVENT_USB_Device_StartOfFrame(void)
{
    static uint8_t count;
    if (++count % 50) return;
    14cc:	80 91 45 01 	lds	r24, 0x0145
    14d0:	8f 5f       	subi	r24, 0xFF	; 255
    14d2:	80 93 45 01 	sts	0x0145, r24
    14d6:	62 e3       	ldi	r22, 0x32	; 50
    14d8:	0e 94 f8 2a 	call	0x55f0	; 0x55f0 <__udivmodqi4>
    14dc:	91 11       	cpse	r25, r1
    14de:	35 c0       	rjmp	.+106    	; 0x154a <EVENT_USB_Device_StartOfFrame+0x7e>
    count = 0;
    14e0:	10 92 45 01 	sts	0x0145, r1

    if (!console_flush) return;
    14e4:	80 91 47 01 	lds	r24, 0x0147
    14e8:	88 23       	and	r24, r24
    14ea:	79 f1       	breq	.+94     	; 0x154a <EVENT_USB_Device_StartOfFrame+0x7e>
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
    14ec:	80 91 ee 01 	lds	r24, 0x01EE
    14f0:	84 30       	cpi	r24, 0x04	; 4
    14f2:	49 f5       	brne	.+82     	; 0x1546 <EVENT_USB_Device_StartOfFrame+0x7a>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    14f4:	80 91 e9 00 	lds	r24, 0x00E9
    14f8:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    14fa:	90 91 ec 00 	lds	r25, 0x00EC
    14fe:	90 ff       	sbrs	r25, 0
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <EVENT_USB_Device_StartOfFrame+0x3a>
    1502:	90 e8       	ldi	r25, 0x80	; 128
    1504:	01 c0       	rjmp	.+2      	; 0x1508 <EVENT_USB_Device_StartOfFrame+0x3c>
    1506:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1508:	98 2b       	or	r25, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    150a:	84 e0       	ldi	r24, 0x04	; 4
    150c:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1510:	80 91 eb 00 	lds	r24, 0x00EB
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1514:	80 ff       	sbrs	r24, 0
    1516:	14 c0       	rjmp	.+40     	; 0x1540 <EVENT_USB_Device_StartOfFrame+0x74>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1518:	80 91 ee 00 	lds	r24, 0x00EE
    151c:	87 ff       	sbrs	r24, 7
    151e:	10 c0       	rjmp	.+32     	; 0x1540 <EVENT_USB_Device_StartOfFrame+0x74>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1520:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
    1524:	85 ff       	sbrs	r24, 5
    1526:	03 c0       	rjmp	.+6      	; 0x152e <EVENT_USB_Device_StartOfFrame+0x62>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1528:	10 92 f1 00 	sts	0x00F1, r1
    152c:	f9 cf       	rjmp	.-14     	; 0x1520 <EVENT_USB_Device_StartOfFrame+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    152e:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
    1532:	80 ff       	sbrs	r24, 0
    1534:	05 c0       	rjmp	.+10     	; 0x1540 <EVENT_USB_Device_StartOfFrame+0x74>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1536:	80 91 e8 00 	lds	r24, 0x00E8
    153a:	8e 77       	andi	r24, 0x7E	; 126
    153c:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1540:	9f 70       	andi	r25, 0x0F	; 15
    1542:	90 93 e9 00 	sts	0x00E9, r25
    if (++count % 50) return;
    count = 0;

    if (!console_flush) return;
    Console_Task();
    console_flush = false;
    1546:	10 92 47 01 	sts	0x0147, r1
    154a:	08 95       	ret

0000154c <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    154c:	42 e0       	ldi	r20, 0x02	; 2
    154e:	61 ec       	ldi	r22, 0xC1	; 193
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <Endpoint_ConfigureEndpoint_Prv>
    1556:	42 e0       	ldi	r20, 0x02	; 2
    1558:	61 ec       	ldi	r22, 0xC1	; 193
    155a:	82 e0       	ldi	r24, 0x02	; 2
    155c:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <Endpoint_ConfigureEndpoint_Prv>
    1560:	42 e0       	ldi	r20, 0x02	; 2
    1562:	61 ec       	ldi	r22, 0xC1	; 193
    1564:	83 e0       	ldi	r24, 0x03	; 3
    1566:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <Endpoint_ConfigureEndpoint_Prv>
    156a:	42 e2       	ldi	r20, 0x22	; 34
    156c:	61 ec       	ldi	r22, 0xC1	; 193
    156e:	84 e0       	ldi	r24, 0x04	; 4
    1570:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <Endpoint_ConfigureEndpoint_Prv>
    1574:	42 e2       	ldi	r20, 0x22	; 34
    1576:	61 ec       	ldi	r22, 0xC1	; 193
    1578:	85 e0       	ldi	r24, 0x05	; 5
    157a:	0c 94 5a 0d 	jmp	0x1ab4	; 0x1ab4 <Endpoint_ConfigureEndpoint_Prv>

0000157e <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    157e:	80 91 f0 01 	lds	r24, 0x01F0
    1582:	83 30       	cpi	r24, 0x03	; 3
    1584:	09 f4       	brne	.+2      	; 0x1588 <EVENT_USB_Device_ControlRequest+0xa>
    1586:	55 c0       	rjmp	.+170    	; 0x1632 <EVENT_USB_Device_ControlRequest+0xb4>
    1588:	30 f4       	brcc	.+12     	; 0x1596 <EVENT_USB_Device_ControlRequest+0x18>
    158a:	81 30       	cpi	r24, 0x01	; 1
    158c:	71 f0       	breq	.+28     	; 0x15aa <EVENT_USB_Device_ControlRequest+0x2c>
    158e:	82 30       	cpi	r24, 0x02	; 2
    1590:	09 f4       	brne	.+2      	; 0x1594 <EVENT_USB_Device_ControlRequest+0x16>
    1592:	8e c0       	rjmp	.+284    	; 0x16b0 <EVENT_USB_Device_ControlRequest+0x132>
    1594:	08 95       	ret
    1596:	8a 30       	cpi	r24, 0x0A	; 10
    1598:	09 f4       	brne	.+2      	; 0x159c <EVENT_USB_Device_ControlRequest+0x1e>
    159a:	7a c0       	rjmp	.+244    	; 0x1690 <EVENT_USB_Device_ControlRequest+0x112>
    159c:	8b 30       	cpi	r24, 0x0B	; 11
    159e:	09 f4       	brne	.+2      	; 0x15a2 <EVENT_USB_Device_ControlRequest+0x24>
    15a0:	60 c0       	rjmp	.+192    	; 0x1662 <EVENT_USB_Device_ControlRequest+0xe4>
    15a2:	89 30       	cpi	r24, 0x09	; 9
    15a4:	09 f0       	breq	.+2      	; 0x15a8 <EVENT_USB_Device_ControlRequest+0x2a>
    15a6:	9c c0       	rjmp	.+312    	; 0x16e0 <EVENT_USB_Device_ControlRequest+0x162>
    15a8:	20 c0       	rjmp	.+64     	; 0x15ea <EVENT_USB_Device_ControlRequest+0x6c>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    15aa:	80 91 ef 01 	lds	r24, 0x01EF
    15ae:	81 3a       	cpi	r24, 0xA1	; 161
    15b0:	09 f0       	breq	.+2      	; 0x15b4 <EVENT_USB_Device_ControlRequest+0x36>
    15b2:	96 c0       	rjmp	.+300    	; 0x16e0 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    15b4:	80 91 e8 00 	lds	r24, 0x00E8
    15b8:	87 7f       	andi	r24, 0xF7	; 247
    15ba:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    15be:	80 91 f3 01 	lds	r24, 0x01F3
    15c2:	90 91 f4 01 	lds	r25, 0x01F4
    15c6:	89 2b       	or	r24, r25
    15c8:	21 f0       	breq	.+8      	; 0x15d2 <EVENT_USB_Device_ControlRequest+0x54>
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;
    15ca:	60 e0       	ldi	r22, 0x00	; 0
/** Event handler for the USB_ControlRequest event.
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	03 c0       	rjmp	.+6      	; 0x15d8 <EVENT_USB_Device_ControlRequest+0x5a>
                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
                    ReportSize = sizeof(keyboard_report_sent);
    15d2:	60 e2       	ldi	r22, 0x20	; 32

                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
    15d4:	88 e4       	ldi	r24, 0x48	; 72
    15d6:	91 e0       	ldi	r25, 0x01	; 1
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    15d8:	70 e0       	ldi	r23, 0x00	; 0
    15da:	0e 94 97 0c 	call	0x192e	; 0x192e <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    15de:	80 91 e8 00 	lds	r24, 0x00E8
    15e2:	8b 77       	andi	r24, 0x7B	; 123
    15e4:	80 93 e8 00 	sts	0x00E8, r24
    15e8:	08 95       	ret
#endif
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    15ea:	80 91 ef 01 	lds	r24, 0x01EF
    15ee:	81 32       	cpi	r24, 0x21	; 33
    15f0:	09 f0       	breq	.+2      	; 0x15f4 <EVENT_USB_Device_ControlRequest+0x76>
    15f2:	76 c0       	rjmp	.+236    	; 0x16e0 <EVENT_USB_Device_ControlRequest+0x162>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    15f4:	80 91 f3 01 	lds	r24, 0x01F3
    15f8:	90 91 f4 01 	lds	r25, 0x01F4
    15fc:	00 97       	sbiw	r24, 0x00	; 0
    15fe:	19 f0       	breq	.+6      	; 0x1606 <EVENT_USB_Device_ControlRequest+0x88>
    1600:	04 97       	sbiw	r24, 0x04	; 4
    1602:	09 f0       	breq	.+2      	; 0x1606 <EVENT_USB_Device_ControlRequest+0x88>
    1604:	6d c0       	rjmp	.+218    	; 0x16e0 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1606:	80 91 e8 00 	lds	r24, 0x00E8
    160a:	87 7f       	andi	r24, 0xF7	; 247
    160c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1610:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    1614:	82 fd       	sbrc	r24, 2
    1616:	05 c0       	rjmp	.+10     	; 0x1622 <EVENT_USB_Device_ControlRequest+0xa4>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    1618:	80 91 ee 01 	lds	r24, 0x01EE
    161c:	81 11       	cpse	r24, r1
    161e:	f8 cf       	rjmp	.-16     	; 0x1610 <EVENT_USB_Device_ControlRequest+0x92>
    1620:	5f c0       	rjmp	.+190    	; 0x16e0 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1622:	80 91 f1 00 	lds	r24, 0x00F1
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    1626:	80 93 68 01 	sts	0x0168, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    162a:	80 91 e8 00 	lds	r24, 0x00E8
    162e:	8b 77       	andi	r24, 0x7B	; 123
    1630:	53 c0       	rjmp	.+166    	; 0x16d8 <EVENT_USB_Device_ControlRequest+0x15a>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1632:	80 91 ef 01 	lds	r24, 0x01EF
    1636:	81 3a       	cpi	r24, 0xA1	; 161
    1638:	09 f0       	breq	.+2      	; 0x163c <EVENT_USB_Device_ControlRequest+0xbe>
    163a:	52 c0       	rjmp	.+164    	; 0x16e0 <EVENT_USB_Device_ControlRequest+0x162>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    163c:	80 91 f3 01 	lds	r24, 0x01F3
    1640:	90 91 f4 01 	lds	r25, 0x01F4
    1644:	89 2b       	or	r24, r25
    1646:	09 f0       	breq	.+2      	; 0x164a <EVENT_USB_Device_ControlRequest+0xcc>
    1648:	4b c0       	rjmp	.+150    	; 0x16e0 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    164a:	80 91 e8 00 	lds	r24, 0x00E8
    164e:	87 7f       	andi	r24, 0xF7	; 247
    1650:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1654:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    1658:	80 ff       	sbrs	r24, 0
    165a:	fc cf       	rjmp	.-8      	; 0x1654 <EVENT_USB_Device_ControlRequest+0xd6>
                    Endpoint_Write_8(keyboard_protocol);
    165c:	80 91 0b 01 	lds	r24, 0x010B
    1660:	36 c0       	rjmp	.+108    	; 0x16ce <EVENT_USB_Device_ControlRequest+0x150>
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1662:	80 91 ef 01 	lds	r24, 0x01EF
    1666:	81 32       	cpi	r24, 0x21	; 33
    1668:	d9 f5       	brne	.+118    	; 0x16e0 <EVENT_USB_Device_ControlRequest+0x162>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    166a:	80 91 f3 01 	lds	r24, 0x01F3
    166e:	90 91 f4 01 	lds	r25, 0x01F4
    1672:	89 2b       	or	r24, r25
    1674:	a9 f5       	brne	.+106    	; 0x16e0 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1676:	80 91 e8 00 	lds	r24, 0x00E8
    167a:	87 7f       	andi	r24, 0xF7	; 247
    167c:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    1680:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <Endpoint_ClearStatusStage>

                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    1684:	80 91 f1 01 	lds	r24, 0x01F1
    1688:	80 93 0b 01 	sts	0x010B, r24
                    clear_keyboard();
    168c:	0c 94 49 17 	jmp	0x2e92	; 0x2e92 <clear_keyboard>
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1690:	80 91 ef 01 	lds	r24, 0x01EF
    1694:	81 32       	cpi	r24, 0x21	; 33
    1696:	21 f5       	brne	.+72     	; 0x16e0 <EVENT_USB_Device_ControlRequest+0x162>
    1698:	80 91 e8 00 	lds	r24, 0x00E8
    169c:	87 7f       	andi	r24, 0xF7	; 247
    169e:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    16a2:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    16a6:	80 91 f2 01 	lds	r24, 0x01F2
    16aa:	80 93 69 01 	sts	0x0169, r24
    16ae:	08 95       	ret
#endif
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    16b0:	80 91 ef 01 	lds	r24, 0x01EF
    16b4:	81 3a       	cpi	r24, 0xA1	; 161
    16b6:	a1 f4       	brne	.+40     	; 0x16e0 <EVENT_USB_Device_ControlRequest+0x162>
    16b8:	80 91 e8 00 	lds	r24, 0x00E8
    16bc:	87 7f       	andi	r24, 0xF7	; 247
    16be:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    16c2:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    16c6:	80 ff       	sbrs	r24, 0
    16c8:	fc cf       	rjmp	.-8      	; 0x16c2 <EVENT_USB_Device_ControlRequest+0x144>
                Endpoint_Write_8(keyboard_idle);
    16ca:	80 91 69 01 	lds	r24, 0x0169
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    16ce:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    16d2:	80 91 e8 00 	lds	r24, 0x00E8
    16d6:	8e 77       	andi	r24, 0x7E	; 126
    16d8:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    16dc:	0c 94 8f 0d 	jmp	0x1b1e	; 0x1b1e <Endpoint_ClearStatusStage>
    16e0:	08 95       	ret

000016e2 <hook_early_init>:
}


/* hooks */
__attribute__((weak))
void hook_early_init(void) {}
    16e2:	08 95       	ret

000016e4 <hook_late_init>:

__attribute__((weak))
void hook_late_init(void) {}
    16e4:	08 95       	ret

000016e6 <hook_usb_suspend_entry>:
void hook_usb_suspend_entry(void)
{
    // Turn LED off to save power
    // Set 0 with putting aside status before suspend and restore
    // it after wakeup, then LED is updated at keyboard_task() in main loop
    _led_stats = keyboard_led_stats;
    16e6:	80 91 68 01 	lds	r24, 0x0168
    16ea:	80 93 46 01 	sts	0x0146, r24
    keyboard_led_stats = 0;
    16ee:	10 92 68 01 	sts	0x0168, r1
    led_set(keyboard_led_stats);
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	0e 94 bb 08 	call	0x1176	; 0x1176 <led_set>

    matrix_clear();
    16f8:	0e 94 3d 12 	call	0x247a	; 0x247a <matrix_clear>
    clear_keyboard();
    16fc:	0c 94 49 17 	jmp	0x2e92	; 0x2e92 <clear_keyboard>

00001700 <EVENT_USB_Device_Suspend>:
void EVENT_USB_Device_Suspend()
{
#ifdef LUFA_DEBUG
    print("[S]");
#endif
    hook_usb_suspend_entry();
    1700:	0c 94 73 0b 	jmp	0x16e6	; 0x16e6 <hook_usb_suspend_entry>

00001704 <hook_usb_suspend_loop>:
}

__attribute__((weak))
void hook_usb_suspend_loop(void)
{
    suspend_power_down();
    1704:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <suspend_power_down>
    if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    1708:	80 91 ec 01 	lds	r24, 0x01EC
    170c:	88 23       	and	r24, r24
    170e:	29 f0       	breq	.+10     	; 0x171a <hook_usb_suspend_loop+0x16>
    1710:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <suspend_wakeup_condition>
    1714:	81 11       	cpse	r24, r1
        USB_Device_SendRemoteWakeup();
    1716:	0c 94 38 0c 	jmp	0x1870	; 0x1870 <USB_Device_SendRemoteWakeup>
    171a:	08 95       	ret

0000171c <main>:
 * main
 ******************************************************************************/
static void setup_mcu(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    171c:	84 b7       	in	r24, 0x34	; 52
    171e:	87 7f       	andi	r24, 0xF7	; 247
    1720:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
    1722:	88 e1       	ldi	r24, 0x18	; 24
    1724:	0f b6       	in	r0, 0x3f	; 63
    1726:	f8 94       	cli
    1728:	80 93 60 00 	sts	0x0060, r24
    172c:	10 92 60 00 	sts	0x0060, r1
    1730:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	80 e8       	ldi	r24, 0x80	; 128
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	80 93 61 00 	sts	0x0061, r24
    173e:	90 93 61 00 	sts	0x0061, r25
    1742:	0f be       	out	0x3f, r0	; 63

#ifdef LUFA_DEBUG_SUART
    SUART_OUT_DDR |= (1<<SUART_OUT_BIT);
    SUART_OUT_PORT |= (1<<SUART_OUT_BIT);
#endif
    print_set_sendchar(sendchar);
    1744:	8c e0       	ldi	r24, 0x0C	; 12
    1746:	99 e0       	ldi	r25, 0x09	; 9
    1748:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <print_set_sendchar>
    print("\r\ninit\n");
    174c:	82 ea       	ldi	r24, 0xA2	; 162
    174e:	92 e0       	ldi	r25, 0x02	; 2
    1750:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>

    hook_early_init();
    1754:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <hook_early_init>
    keyboard_setup();
    1758:	0e 94 74 11 	call	0x22e8	; 0x22e8 <keyboard_setup>
}

static void setup_usb(void)
{
    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    175c:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <USB_Disable>

    USB_Init();
    1760:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <USB_Init>
    1764:	80 91 e2 00 	lds	r24, 0x00E2
    1768:	84 60       	ori	r24, 0x04	; 4
    176a:	80 93 e2 00 	sts	0x00E2, r24
    print("\r\ninit\n");

    hook_early_init();
    keyboard_setup();
    setup_usb();
    sei();
    176e:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    1770:	80 91 ee 01 	lds	r24, 0x01EE
    1774:	84 30       	cpi	r24, 0x04	; 4
    1776:	e1 f7       	brne	.-8      	; 0x1770 <main+0x54>
        ;
#else
        USB_USBTask();
#endif
    }
    print("USB configured.\n");
    1778:	81 e9       	ldi	r24, 0x91	; 145
    177a:	92 e0       	ldi	r25, 0x02	; 2
    177c:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>

    /* init modules */
    keyboard_init();
    1780:	0e 94 76 11 	call	0x22ec	; 0x22ec <keyboard_init>
    host_set_driver(&lufa_driver);
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	91 e0       	ldi	r25, 0x01	; 1
    1788:	0e 94 b7 10 	call	0x216e	; 0x216e <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    178c:	80 e8       	ldi	r24, 0x80	; 128
    178e:	92 e0       	ldi	r25, 0x02	; 2
    1790:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    hook_late_init();
    1794:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <hook_late_init>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    1798:	80 91 ee 01 	lds	r24, 0x01EE
    179c:	85 30       	cpi	r24, 0x05	; 5
    179e:	19 f4       	brne	.+6      	; 0x17a6 <main+0x8a>
#ifdef LUFA_DEBUG
            print("[s]");
#endif
            hook_usb_suspend_loop();
    17a0:	0e 94 82 0b 	call	0x1704	; 0x1704 <hook_usb_suspend_loop>
    17a4:	f9 cf       	rjmp	.-14     	; 0x1798 <main+0x7c>
        }

        keyboard_task();
    17a6:	0e 94 7e 11 	call	0x22fc	; 0x22fc <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
#endif
    }
    17aa:	f6 cf       	rjmp	.-20     	; 0x1798 <main+0x7c>

000017ac <hook_usb_wakeup>:
}

__attribute__((weak))
void hook_usb_wakeup(void)
{
    suspend_wakeup_init();
    17ac:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <suspend_wakeup_init>
    // Restore LED status
    // BIOS/grub won't recognize/enumerate if led_set() takes long(around 40ms?)
    // Converters fall into the case and miss wakeup event(timeout to reply?) in the end.
    //led_set(host_keyboard_leds());
    // Instead, restore stats and update at keyboard_task() in main loop
    keyboard_led_stats = _led_stats;
    17b0:	80 91 46 01 	lds	r24, 0x0146
    17b4:	80 93 68 01 	sts	0x0168, r24
    17b8:	08 95       	ret

000017ba <EVENT_USB_Device_WakeUp>:
void EVENT_USB_Device_WakeUp()
{
#ifdef LUFA_DEBUG
    print("[W]");
#endif
    hook_usb_wakeup();
    17ba:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <hook_usb_wakeup>

000017be <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    17be:	29 2f       	mov	r18, r25
    17c0:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    17c2:	23 30       	cpi	r18, 0x03	; 3
    17c4:	31 05       	cpc	r19, r1
    17c6:	a9 f0       	breq	.+42     	; 0x17f2 <CALLBACK_USB_GetDescriptor+0x34>
    17c8:	6c f4       	brge	.+26     	; 0x17e4 <CALLBACK_USB_GetDescriptor+0x26>
    17ca:	21 30       	cpi	r18, 0x01	; 1
    17cc:	31 05       	cpc	r19, r1
    17ce:	09 f4       	brne	.+2      	; 0x17d2 <CALLBACK_USB_GetDescriptor+0x14>
    17d0:	42 c0       	rjmp	.+132    	; 0x1856 <CALLBACK_USB_GetDescriptor+0x98>
    17d2:	22 30       	cpi	r18, 0x02	; 2
    17d4:	31 05       	cpc	r19, r1
    17d6:	09 f0       	breq	.+2      	; 0x17da <CALLBACK_USB_GetDescriptor+0x1c>
    17d8:	43 c0       	rjmp	.+134    	; 0x1860 <CALLBACK_USB_GetDescriptor+0xa2>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    17da:	8d e8       	ldi	r24, 0x8D	; 141
    17dc:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    17de:	20 ef       	ldi	r18, 0xF0	; 240
    17e0:	32 e0       	ldi	r19, 0x02	; 2
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    17e2:	42 c0       	rjmp	.+132    	; 0x1868 <CALLBACK_USB_GetDescriptor+0xaa>
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    17e4:	21 32       	cpi	r18, 0x21	; 33
    17e6:	31 05       	cpc	r19, r1
    17e8:	c9 f0       	breq	.+50     	; 0x181c <CALLBACK_USB_GetDescriptor+0x5e>
    17ea:	22 32       	cpi	r18, 0x22	; 34
    17ec:	31 05       	cpc	r19, r1
    17ee:	19 f1       	breq	.+70     	; 0x1836 <CALLBACK_USB_GetDescriptor+0x78>
    17f0:	37 c0       	rjmp	.+110    	; 0x1860 <CALLBACK_USB_GetDescriptor+0xa2>
    17f2:	99 27       	eor	r25, r25
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    17f4:	81 30       	cpi	r24, 0x01	; 1
    17f6:	91 05       	cpc	r25, r1
    17f8:	41 f0       	breq	.+16     	; 0x180a <CALLBACK_USB_GetDescriptor+0x4c>
    17fa:	82 30       	cpi	r24, 0x02	; 2
    17fc:	91 05       	cpc	r25, r1
    17fe:	41 f0       	breq	.+16     	; 0x1810 <CALLBACK_USB_GetDescriptor+0x52>
    1800:	89 2b       	or	r24, r25
    1802:	71 f5       	brne	.+92     	; 0x1860 <CALLBACK_USB_GetDescriptor+0xa2>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    1804:	ec ee       	ldi	r30, 0xEC	; 236
    1806:	f2 e0       	ldi	r31, 0x02	; 2
    1808:	05 c0       	rjmp	.+10     	; 0x1814 <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    180a:	ee ed       	ldi	r30, 0xDE	; 222
    180c:	f2 e0       	ldi	r31, 0x02	; 2
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    1810:	e2 eb       	ldi	r30, 0xB2	; 178
    1812:	f2 e0       	ldi	r31, 0x02	; 2
    1814:	84 91       	lpm	r24, Z
    1816:	90 e0       	ldi	r25, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
    1818:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
    181a:	26 c0       	rjmp	.+76     	; 0x1868 <CALLBACK_USB_GetDescriptor+0xaa>
    181c:	65 30       	cpi	r22, 0x05	; 5
    181e:	00 f5       	brcc	.+64     	; 0x1860 <CALLBACK_USB_GetDescriptor+0xa2>
    1820:	e6 2f       	mov	r30, r22
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	ee 0f       	add	r30, r30
    1826:	ff 1f       	adc	r31, r31
    1828:	ec 5d       	subi	r30, 0xDC	; 220
    182a:	fe 4f       	sbci	r31, 0xFE	; 254
    182c:	20 81       	ld	r18, Z
    182e:	31 81       	ldd	r19, Z+1	; 0x01
    1830:	89 e0       	ldi	r24, 0x09	; 9
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	19 c0       	rjmp	.+50     	; 0x1868 <CALLBACK_USB_GetDescriptor+0xaa>
    1836:	65 30       	cpi	r22, 0x05	; 5
    1838:	98 f4       	brcc	.+38     	; 0x1860 <CALLBACK_USB_GetDescriptor+0xa2>
    183a:	e6 2f       	mov	r30, r22
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	df 01       	movw	r26, r30
    1840:	aa 0f       	add	r26, r26
    1842:	bb 1f       	adc	r27, r27
    1844:	a6 5e       	subi	r26, 0xE6	; 230
    1846:	be 4f       	sbci	r27, 0xFE	; 254
    1848:	2d 91       	ld	r18, X+
    184a:	3c 91       	ld	r19, X
    184c:	eb 5e       	subi	r30, 0xEB	; 235
    184e:	fe 4f       	sbci	r31, 0xFE	; 254
    1850:	80 81       	ld	r24, Z
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	09 c0       	rjmp	.+18     	; 0x1868 <CALLBACK_USB_GetDescriptor+0xaa>

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    1856:	82 e1       	ldi	r24, 0x12	; 18
    1858:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    185a:	2d e7       	ldi	r18, 0x7D	; 125
    185c:	33 e0       	ldi	r19, 0x03	; 3
    185e:	04 c0       	rjmp	.+8      	; 0x1868 <CALLBACK_USB_GetDescriptor+0xaa>
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    1868:	fa 01       	movw	r30, r20
    186a:	31 83       	std	Z+1, r19	; 0x01
    186c:	20 83       	st	Z, r18
    return Size;
}
    186e:	08 95       	ret

00001870 <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1870:	80 e1       	ldi	r24, 0x10	; 16
    1872:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1874:	82 e1       	ldi	r24, 0x12	; 18
    1876:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    1878:	09 b4       	in	r0, 0x29	; 41
    187a:	00 fe       	sbrs	r0, 0
    187c:	fd cf       	rjmp	.-6      	; 0x1878 <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    187e:	80 91 d8 00 	lds	r24, 0x00D8
    1882:	8f 7d       	andi	r24, 0xDF	; 223
    1884:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    1888:	80 91 e0 00 	lds	r24, 0x00E0
    188c:	82 60       	ori	r24, 0x02	; 2
    188e:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
    1892:	80 91 e0 00 	lds	r24, 0x00E0
    1896:	81 fd       	sbrc	r24, 1
    1898:	fc cf       	rjmp	.-8      	; 0x1892 <USB_Device_SendRemoteWakeup+0x22>
}
    189a:	08 95       	ret

0000189c <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    189c:	cf 92       	push	r12
    189e:	df 92       	push	r13
    18a0:	ef 92       	push	r14
    18a2:	ff 92       	push	r15
    18a4:	0f 93       	push	r16
    18a6:	1f 93       	push	r17
    18a8:	cf 93       	push	r28
    18aa:	df 93       	push	r29
    18ac:	7c 01       	movw	r14, r24
    18ae:	8b 01       	movw	r16, r22
    18b0:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    18b2:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <Endpoint_WaitUntilReady>
    18b6:	81 11       	cpse	r24, r1
    18b8:	31 c0       	rjmp	.+98     	; 0x191c <Endpoint_Write_Stream_LE+0x80>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    18ba:	20 97       	sbiw	r28, 0x00	; 0
    18bc:	31 f0       	breq	.+12     	; 0x18ca <Endpoint_Write_Stream_LE+0x2e>
	{
		Length -= *BytesProcessed;
    18be:	88 81       	ld	r24, Y
    18c0:	99 81       	ldd	r25, Y+1	; 0x01
    18c2:	08 1b       	sub	r16, r24
    18c4:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    18c6:	e8 0e       	add	r14, r24
    18c8:	f9 1e       	adc	r15, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    18ca:	c1 2c       	mov	r12, r1
    18cc:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    18ce:	01 15       	cp	r16, r1
    18d0:	11 05       	cpc	r17, r1
    18d2:	19 f1       	breq	.+70     	; 0x191a <Endpoint_Write_Stream_LE+0x7e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    18d4:	80 91 e8 00 	lds	r24, 0x00E8
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    18d8:	85 fd       	sbrc	r24, 5
    18da:	14 c0       	rjmp	.+40     	; 0x1904 <Endpoint_Write_Stream_LE+0x68>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18dc:	80 91 e8 00 	lds	r24, 0x00E8
    18e0:	8e 77       	andi	r24, 0x7E	; 126
    18e2:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    18e6:	20 97       	sbiw	r28, 0x00	; 0
    18e8:	41 f0       	breq	.+16     	; 0x18fa <Endpoint_Write_Stream_LE+0x5e>
			{
				*BytesProcessed += BytesInTransfer;
    18ea:	88 81       	ld	r24, Y
    18ec:	99 81       	ldd	r25, Y+1	; 0x01
    18ee:	8c 0d       	add	r24, r12
    18f0:	9d 1d       	adc	r25, r13
    18f2:	99 83       	std	Y+1, r25	; 0x01
    18f4:	88 83       	st	Y, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    18f6:	85 e0       	ldi	r24, 0x05	; 5
    18f8:	11 c0       	rjmp	.+34     	; 0x191c <Endpoint_Write_Stream_LE+0x80>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    18fa:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <Endpoint_WaitUntilReady>
    18fe:	88 23       	and	r24, r24
    1900:	31 f3       	breq	.-52     	; 0x18ce <Endpoint_Write_Stream_LE+0x32>
    1902:	0c c0       	rjmp	.+24     	; 0x191c <Endpoint_Write_Stream_LE+0x80>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1904:	f7 01       	movw	r30, r14
    1906:	81 91       	ld	r24, Z+
    1908:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    190a:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    190e:	01 50       	subi	r16, 0x01	; 1
    1910:	11 09       	sbc	r17, r1
			BytesInTransfer++;
    1912:	ff ef       	ldi	r31, 0xFF	; 255
    1914:	cf 1a       	sub	r12, r31
    1916:	df 0a       	sbc	r13, r31
    1918:	da cf       	rjmp	.-76     	; 0x18ce <Endpoint_Write_Stream_LE+0x32>
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    191a:	80 e0       	ldi	r24, 0x00	; 0
}
    191c:	df 91       	pop	r29
    191e:	cf 91       	pop	r28
    1920:	1f 91       	pop	r17
    1922:	0f 91       	pop	r16
    1924:	ff 90       	pop	r15
    1926:	ef 90       	pop	r14
    1928:	df 90       	pop	r13
    192a:	cf 90       	pop	r12
    192c:	08 95       	ret

0000192e <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    192e:	20 91 f5 01 	lds	r18, 0x01F5
    1932:	30 91 f6 01 	lds	r19, 0x01F6
    1936:	26 17       	cp	r18, r22
    1938:	37 07       	cpc	r19, r23
    193a:	48 f0       	brcs	.+18     	; 0x194e <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    193c:	61 15       	cp	r22, r1
    193e:	71 05       	cpc	r23, r1
    1940:	39 f4       	brne	.+14     	; 0x1950 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1942:	20 91 e8 00 	lds	r18, 0x00E8
    1946:	2e 77       	andi	r18, 0x7E	; 126
    1948:	20 93 e8 00 	sts	0x00E8, r18
    194c:	01 c0       	rjmp	.+2      	; 0x1950 <Endpoint_Write_Control_Stream_LE+0x22>
    194e:	b9 01       	movw	r22, r18
    1950:	fc 01       	movw	r30, r24
    1952:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1954:	61 15       	cp	r22, r1
    1956:	71 05       	cpc	r23, r1
    1958:	b9 f1       	breq	.+110    	; 0x19c8 <Endpoint_Write_Control_Stream_LE+0x9a>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    195a:	80 91 ee 01 	lds	r24, 0x01EE

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    195e:	88 23       	and	r24, r24
    1960:	09 f4       	brne	.+2      	; 0x1964 <Endpoint_Write_Control_Stream_LE+0x36>
    1962:	40 c0       	rjmp	.+128    	; 0x19e4 <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1964:	85 30       	cpi	r24, 0x05	; 5
    1966:	09 f4       	brne	.+2      	; 0x196a <Endpoint_Write_Control_Stream_LE+0x3c>
    1968:	3f c0       	rjmp	.+126    	; 0x19e8 <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    196a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    196e:	83 fd       	sbrc	r24, 3
    1970:	3d c0       	rjmp	.+122    	; 0x19ec <Endpoint_Write_Control_Stream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1972:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1976:	82 ff       	sbrs	r24, 2
    1978:	06 c0       	rjmp	.+12     	; 0x1986 <Endpoint_Write_Control_Stream_LE+0x58>
    197a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    197e:	82 ff       	sbrs	r24, 2
    1980:	26 c0       	rjmp	.+76     	; 0x19ce <Endpoint_Write_Control_Stream_LE+0xa0>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1986:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    198a:	80 ff       	sbrs	r24, 0
    198c:	e3 cf       	rjmp	.-58     	; 0x1954 <Endpoint_Write_Control_Stream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    198e:	20 91 f3 00 	lds	r18, 0x00F3
    1992:	80 91 f2 00 	lds	r24, 0x00F2
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    199a:	61 15       	cp	r22, r1
    199c:	71 05       	cpc	r23, r1
    199e:	51 f0       	breq	.+20     	; 0x19b4 <Endpoint_Write_Control_Stream_LE+0x86>
    19a0:	88 30       	cpi	r24, 0x08	; 8
    19a2:	91 05       	cpc	r25, r1
    19a4:	38 f4       	brcc	.+14     	; 0x19b4 <Endpoint_Write_Control_Stream_LE+0x86>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    19a6:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    19a8:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    19ac:	61 50       	subi	r22, 0x01	; 1
    19ae:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    19b0:	01 96       	adiw	r24, 0x01	; 1
    19b2:	f3 cf       	rjmp	.-26     	; 0x199a <Endpoint_Write_Control_Stream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    19b4:	21 e0       	ldi	r18, 0x01	; 1
    19b6:	08 97       	sbiw	r24, 0x08	; 8
    19b8:	09 f0       	breq	.+2      	; 0x19bc <Endpoint_Write_Control_Stream_LE+0x8e>
    19ba:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    19bc:	80 91 e8 00 	lds	r24, 0x00E8
    19c0:	8e 77       	andi	r24, 0x7E	; 126
    19c2:	80 93 e8 00 	sts	0x00E8, r24
    19c6:	c6 cf       	rjmp	.-116    	; 0x1954 <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    19c8:	21 11       	cpse	r18, r1
    19ca:	c7 cf       	rjmp	.-114    	; 0x195a <Endpoint_Write_Control_Stream_LE+0x2c>
    19cc:	d6 cf       	rjmp	.-84     	; 0x197a <Endpoint_Write_Control_Stream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    19ce:	80 91 ee 01 	lds	r24, 0x01EE

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    19d2:	88 23       	and	r24, r24
    19d4:	39 f0       	breq	.+14     	; 0x19e4 <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    19d6:	85 30       	cpi	r24, 0x05	; 5
    19d8:	39 f0       	breq	.+14     	; 0x19e8 <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    19da:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    19de:	83 ff       	sbrs	r24, 3
    19e0:	cc cf       	rjmp	.-104    	; 0x197a <Endpoint_Write_Control_Stream_LE+0x4c>
    19e2:	04 c0       	rjmp	.+8      	; 0x19ec <Endpoint_Write_Control_Stream_LE+0xbe>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    19e4:	82 e0       	ldi	r24, 0x02	; 2
    19e6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    19e8:	83 e0       	ldi	r24, 0x03	; 3
    19ea:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    19ec:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    19ee:	08 95       	ret

000019f0 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    19f0:	20 91 f5 01 	lds	r18, 0x01F5
    19f4:	30 91 f6 01 	lds	r19, 0x01F6
    19f8:	26 17       	cp	r18, r22
    19fa:	37 07       	cpc	r19, r23
    19fc:	48 f0       	brcs	.+18     	; 0x1a10 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    19fe:	61 15       	cp	r22, r1
    1a00:	71 05       	cpc	r23, r1
    1a02:	39 f4       	brne	.+14     	; 0x1a12 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a04:	20 91 e8 00 	lds	r18, 0x00E8
    1a08:	2e 77       	andi	r18, 0x7E	; 126
    1a0a:	20 93 e8 00 	sts	0x00E8, r18
    1a0e:	01 c0       	rjmp	.+2      	; 0x1a12 <Endpoint_Write_Control_PStream_LE+0x22>
    1a10:	b9 01       	movw	r22, r18
    1a12:	fc 01       	movw	r30, r24
    1a14:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1a16:	61 15       	cp	r22, r1
    1a18:	71 05       	cpc	r23, r1
    1a1a:	c1 f1       	breq	.+112    	; 0x1a8c <Endpoint_Write_Control_PStream_LE+0x9c>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a1c:	80 91 ee 01 	lds	r24, 0x01EE

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a20:	88 23       	and	r24, r24
    1a22:	09 f4       	brne	.+2      	; 0x1a26 <Endpoint_Write_Control_PStream_LE+0x36>
    1a24:	41 c0       	rjmp	.+130    	; 0x1aa8 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a26:	85 30       	cpi	r24, 0x05	; 5
    1a28:	09 f4       	brne	.+2      	; 0x1a2c <Endpoint_Write_Control_PStream_LE+0x3c>
    1a2a:	40 c0       	rjmp	.+128    	; 0x1aac <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a2c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1a30:	83 fd       	sbrc	r24, 3
    1a32:	3e c0       	rjmp	.+124    	; 0x1ab0 <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a34:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1a38:	82 ff       	sbrs	r24, 2
    1a3a:	06 c0       	rjmp	.+12     	; 0x1a48 <Endpoint_Write_Control_PStream_LE+0x58>
    1a3c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1a40:	82 ff       	sbrs	r24, 2
    1a42:	27 c0       	rjmp	.+78     	; 0x1a92 <Endpoint_Write_Control_PStream_LE+0xa2>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a48:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    1a4c:	80 ff       	sbrs	r24, 0
    1a4e:	e3 cf       	rjmp	.-58     	; 0x1a16 <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1a50:	20 91 f3 00 	lds	r18, 0x00F3
    1a54:	80 91 f2 00 	lds	r24, 0x00F2
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1a5c:	61 15       	cp	r22, r1
    1a5e:	71 05       	cpc	r23, r1
    1a60:	59 f0       	breq	.+22     	; 0x1a78 <Endpoint_Write_Control_PStream_LE+0x88>
    1a62:	88 30       	cpi	r24, 0x08	; 8
    1a64:	91 05       	cpc	r25, r1
    1a66:	40 f4       	brcc	.+16     	; 0x1a78 <Endpoint_Write_Control_PStream_LE+0x88>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1a68:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1a6a:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1a6e:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1a70:	61 50       	subi	r22, 0x01	; 1
    1a72:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1a74:	01 96       	adiw	r24, 0x01	; 1
    1a76:	f2 cf       	rjmp	.-28     	; 0x1a5c <Endpoint_Write_Control_PStream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1a78:	21 e0       	ldi	r18, 0x01	; 1
    1a7a:	08 97       	sbiw	r24, 0x08	; 8
    1a7c:	09 f0       	breq	.+2      	; 0x1a80 <Endpoint_Write_Control_PStream_LE+0x90>
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a80:	80 91 e8 00 	lds	r24, 0x00E8
    1a84:	8e 77       	andi	r24, 0x7E	; 126
    1a86:	80 93 e8 00 	sts	0x00E8, r24
    1a8a:	c5 cf       	rjmp	.-118    	; 0x1a16 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1a8c:	21 11       	cpse	r18, r1
    1a8e:	c6 cf       	rjmp	.-116    	; 0x1a1c <Endpoint_Write_Control_PStream_LE+0x2c>
    1a90:	d5 cf       	rjmp	.-86     	; 0x1a3c <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a92:	80 91 ee 01 	lds	r24, 0x01EE

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a96:	88 23       	and	r24, r24
    1a98:	39 f0       	breq	.+14     	; 0x1aa8 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a9a:	85 30       	cpi	r24, 0x05	; 5
    1a9c:	39 f0       	breq	.+14     	; 0x1aac <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a9e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1aa2:	83 ff       	sbrs	r24, 3
    1aa4:	cb cf       	rjmp	.-106    	; 0x1a3c <Endpoint_Write_Control_PStream_LE+0x4c>
    1aa6:	04 c0       	rjmp	.+8      	; 0x1ab0 <Endpoint_Write_Control_PStream_LE+0xc0>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1aa8:	82 e0       	ldi	r24, 0x02	; 2
    1aaa:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1aac:	83 e0       	ldi	r24, 0x03	; 3
    1aae:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1ab2:	08 95       	ret

00001ab4 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1ab4:	98 2f       	mov	r25, r24
    1ab6:	97 30       	cpi	r25, 0x07	; 7
    1ab8:	58 f5       	brcc	.+86     	; 0x1b10 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1aba:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    1abe:	98 17       	cp	r25, r24
    1ac0:	39 f0       	breq	.+14     	; 0x1ad0 <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    1ac2:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    1ac6:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    1aca:	50 91 f0 00 	lds	r21, 0x00F0
    1ace:	03 c0       	rjmp	.+6      	; 0x1ad6 <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    1ad0:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    1ad2:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    1ad4:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    1ad6:	21 ff       	sbrs	r18, 1
    1ad8:	19 c0       	rjmp	.+50     	; 0x1b0c <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    1ada:	30 91 eb 00 	lds	r19, 0x00EB
    1ade:	3e 7f       	andi	r19, 0xFE	; 254
    1ae0:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    1ae4:	30 91 ed 00 	lds	r19, 0x00ED
    1ae8:	3d 7f       	andi	r19, 0xFD	; 253
    1aea:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    1aee:	30 91 eb 00 	lds	r19, 0x00EB
    1af2:	31 60       	ori	r19, 0x01	; 1
    1af4:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    1af8:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    1afc:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    1b00:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1b04:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    1b08:	27 ff       	sbrs	r18, 7
    1b0a:	07 c0       	rjmp	.+14     	; 0x1b1a <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1b0c:	9f 5f       	subi	r25, 0xFF	; 255
    1b0e:	d3 cf       	rjmp	.-90     	; 0x1ab6 <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b10:	8f 70       	andi	r24, 0x0F	; 15
    1b12:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1b1c:	08 95       	ret

00001b1e <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1b1e:	80 91 ef 01 	lds	r24, 0x01EF
    1b22:	87 fd       	sbrc	r24, 7
    1b24:	05 c0       	rjmp	.+10     	; 0x1b30 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b26:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1b2a:	80 ff       	sbrs	r24, 0
    1b2c:	0e c0       	rjmp	.+28     	; 0x1b4a <Endpoint_ClearStatusStage+0x2c>
    1b2e:	12 c0       	rjmp	.+36     	; 0x1b54 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b30:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1b34:	82 fd       	sbrc	r24, 2
    1b36:	05 c0       	rjmp	.+10     	; 0x1b42 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1b38:	80 91 ee 01 	lds	r24, 0x01EE
    1b3c:	81 11       	cpse	r24, r1
    1b3e:	f8 cf       	rjmp	.-16     	; 0x1b30 <Endpoint_ClearStatusStage+0x12>
    1b40:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1b42:	80 91 e8 00 	lds	r24, 0x00E8
    1b46:	8b 77       	andi	r24, 0x7B	; 123
    1b48:	08 c0       	rjmp	.+16     	; 0x1b5a <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1b4a:	80 91 ee 01 	lds	r24, 0x01EE
    1b4e:	81 11       	cpse	r24, r1
    1b50:	ea cf       	rjmp	.-44     	; 0x1b26 <Endpoint_ClearStatusStage+0x8>
    1b52:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b54:	80 91 e8 00 	lds	r24, 0x00E8
    1b58:	8e 77       	andi	r24, 0x7E	; 126
    1b5a:	80 93 e8 00 	sts	0x00E8, r24
    1b5e:	08 95       	ret

00001b60 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1b60:	80 91 e4 00 	lds	r24, 0x00E4
    1b64:	90 91 e5 00 	lds	r25, 0x00E5
    1b68:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1b6a:	20 91 ec 00 	lds	r18, 0x00EC
    1b6e:	20 ff       	sbrs	r18, 0
    1b70:	21 c0       	rjmp	.+66     	; 0x1bb4 <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b72:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1b76:	20 fd       	sbrc	r18, 0
    1b78:	21 c0       	rjmp	.+66     	; 0x1bbc <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1b7a:	20 91 ee 01 	lds	r18, 0x01EE

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1b7e:	22 23       	and	r18, r18
    1b80:	89 f0       	breq	.+34     	; 0x1ba4 <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1b82:	25 30       	cpi	r18, 0x05	; 5
    1b84:	89 f0       	breq	.+34     	; 0x1ba8 <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1b86:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1b8a:	25 fd       	sbrc	r18, 5
    1b8c:	0f c0       	rjmp	.+30     	; 0x1bac <Endpoint_WaitUntilReady+0x4c>
    1b8e:	20 91 e4 00 	lds	r18, 0x00E4
    1b92:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1b96:	28 17       	cp	r18, r24
    1b98:	39 07       	cpc	r19, r25
    1b9a:	39 f3       	breq	.-50     	; 0x1b6a <Endpoint_WaitUntilReady+0xa>
    1b9c:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1b9e:	41 f0       	breq	.+16     	; 0x1bb0 <Endpoint_WaitUntilReady+0x50>
    1ba0:	c9 01       	movw	r24, r18
    1ba2:	e3 cf       	rjmp	.-58     	; 0x1b6a <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1ba4:	82 e0       	ldi	r24, 0x02	; 2
    1ba6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1ba8:	83 e0       	ldi	r24, 0x03	; 3
    1baa:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    1bb0:	84 e0       	ldi	r24, 0x04	; 4
    1bb2:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1bb4:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1bb8:	22 ff       	sbrs	r18, 2
    1bba:	df cf       	rjmp	.-66     	; 0x1b7a <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	08 95       	ret

00001bc0 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1bc0:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1bc4:	0e 94 56 0e 	call	0x1cac	; 0x1cac <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1bc8:	e0 ee       	ldi	r30, 0xE0	; 224
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	81 60       	ori	r24, 0x01	; 1
    1bd0:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1bd2:	e8 ed       	ldi	r30, 0xD8	; 216
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	8f 77       	andi	r24, 0x7F	; 127
    1bda:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1bdc:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1bde:	a7 ed       	ldi	r26, 0xD7	; 215
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	8c 91       	ld	r24, X
    1be4:	8e 7f       	andi	r24, 0xFE	; 254
    1be6:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1be8:	80 81       	ld	r24, Z
    1bea:	8f 7e       	andi	r24, 0xEF	; 239
    1bec:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1bee:	10 92 ed 01 	sts	0x01ED, r1
    1bf2:	08 95       	ret

00001bf4 <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    1bf4:	0f 93       	push	r16
    1bf6:	1f 93       	push	r17
    1bf8:	cf 93       	push	r28
    1bfa:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1bfc:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1c00:	0e 94 56 0e 	call	0x1cac	; 0x1cac <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1c04:	c8 ed       	ldi	r28, 0xD8	; 216
    1c06:	d0 e0       	ldi	r29, 0x00	; 0
    1c08:	88 81       	ld	r24, Y
    1c0a:	8f 77       	andi	r24, 0x7F	; 127
    1c0c:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1c0e:	88 81       	ld	r24, Y
    1c10:	80 68       	ori	r24, 0x80	; 128
    1c12:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1c14:	88 81       	ld	r24, Y
    1c16:	8f 7d       	andi	r24, 0xDF	; 223
    1c18:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1c1a:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1c1c:	10 92 ee 01 	sts	0x01EE, r1
	USB_Device_ConfigurationNumber  = 0;
    1c20:	10 92 ea 01 	sts	0x01EA, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1c24:	10 92 ec 01 	sts	0x01EC, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1c28:	10 92 eb 01 	sts	0x01EB, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1c2c:	00 ee       	ldi	r16, 0xE0	; 224
    1c2e:	10 e0       	ldi	r17, 0x00	; 0
    1c30:	f8 01       	movw	r30, r16
    1c32:	80 81       	ld	r24, Z
    1c34:	8b 7f       	andi	r24, 0xFB	; 251
    1c36:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1c38:	88 81       	ld	r24, Y
    1c3a:	81 60       	ori	r24, 0x01	; 1
    1c3c:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1c3e:	42 e0       	ldi	r20, 0x02	; 2
    1c40:	60 e0       	ldi	r22, 0x00	; 0
    1c42:	80 e0       	ldi	r24, 0x00	; 0
    1c44:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1c48:	e1 ee       	ldi	r30, 0xE1	; 225
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	8e 7f       	andi	r24, 0xFE	; 254
    1c50:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1c52:	e2 ee       	ldi	r30, 0xE2	; 226
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	80 81       	ld	r24, Z
    1c58:	81 60       	ori	r24, 0x01	; 1
    1c5a:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1c5c:	80 81       	ld	r24, Z
    1c5e:	88 60       	ori	r24, 0x08	; 8
    1c60:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1c62:	f8 01       	movw	r30, r16
    1c64:	80 81       	ld	r24, Z
    1c66:	8e 7f       	andi	r24, 0xFE	; 254
    1c68:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1c6a:	88 81       	ld	r24, Y
    1c6c:	80 61       	ori	r24, 0x10	; 16
    1c6e:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1c70:	df 91       	pop	r29
    1c72:	cf 91       	pop	r28
    1c74:	1f 91       	pop	r17
    1c76:	0f 91       	pop	r16
    1c78:	08 95       	ret

00001c7a <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1c7a:	e8 ed       	ldi	r30, 0xD8	; 216
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	80 81       	ld	r24, Z
    1c80:	8f 7e       	andi	r24, 0xEF	; 239
    1c82:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1c84:	e7 ed       	ldi	r30, 0xD7	; 215
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	81 60       	ori	r24, 0x01	; 1
    1c8c:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1c8e:	84 e0       	ldi	r24, 0x04	; 4
    1c90:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	80 93 ed 01 	sts	0x01ED, r24

	USB_ResetInterface();
    1c98:	0c 94 fa 0d 	jmp	0x1bf4	; 0x1bf4 <USB_ResetInterface>

00001c9c <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1c9c:	e8 ed       	ldi	r30, 0xD8	; 216
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	8e 7f       	andi	r24, 0xFE	; 254
    1ca4:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1ca6:	10 92 e2 00 	sts	0x00E2, r1
    1caa:	08 95       	ret

00001cac <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1cac:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1cb0:	10 92 e1 00 	sts	0x00E1, r1
    1cb4:	08 95       	ret

00001cb6 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1cb6:	1f 92       	push	r1
    1cb8:	0f 92       	push	r0
    1cba:	0f b6       	in	r0, 0x3f	; 63
    1cbc:	0f 92       	push	r0
    1cbe:	11 24       	eor	r1, r1
    1cc0:	2f 93       	push	r18
    1cc2:	3f 93       	push	r19
    1cc4:	4f 93       	push	r20
    1cc6:	5f 93       	push	r21
    1cc8:	6f 93       	push	r22
    1cca:	7f 93       	push	r23
    1ccc:	8f 93       	push	r24
    1cce:	9f 93       	push	r25
    1cd0:	af 93       	push	r26
    1cd2:	bf 93       	push	r27
    1cd4:	ef 93       	push	r30
    1cd6:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1cd8:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1cdc:	82 ff       	sbrs	r24, 2
    1cde:	0b c0       	rjmp	.+22     	; 0x1cf6 <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1ce0:	80 91 e2 00 	lds	r24, 0x00E2
    1ce4:	82 ff       	sbrs	r24, 2
    1ce6:	07 c0       	rjmp	.+14     	; 0x1cf6 <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1ce8:	80 91 e1 00 	lds	r24, 0x00E1
    1cec:	8b 7f       	andi	r24, 0xFB	; 251
    1cee:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1cf2:	0e 94 66 0a 	call	0x14cc	; 0x14cc <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1cf6:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1cfa:	80 ff       	sbrs	r24, 0
    1cfc:	1f c0       	rjmp	.+62     	; 0x1d3c <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1cfe:	80 91 d8 00 	lds	r24, 0x00D8
    1d02:	80 ff       	sbrs	r24, 0
    1d04:	1b c0       	rjmp	.+54     	; 0x1d3c <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1d06:	80 91 da 00 	lds	r24, 0x00DA
    1d0a:	8e 7f       	andi	r24, 0xFE	; 254
    1d0c:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1d10:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1d14:	80 ff       	sbrs	r24, 0
    1d16:	0d c0       	rjmp	.+26     	; 0x1d32 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1d18:	80 e1       	ldi	r24, 0x10	; 16
    1d1a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1d1c:	82 e1       	ldi	r24, 0x12	; 18
    1d1e:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1d20:	09 b4       	in	r0, 0x29	; 41
    1d22:	00 fe       	sbrs	r0, 0
    1d24:	fd cf       	rjmp	.-6      	; 0x1d20 <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	80 93 ee 01 	sts	0x01EE, r24
			EVENT_USB_Device_Connect();
    1d2c:	0e 94 4c 0a 	call	0x1498	; 0x1498 <EVENT_USB_Device_Connect>
    1d30:	05 c0       	rjmp	.+10     	; 0x1d3c <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1d32:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1d34:	10 92 ee 01 	sts	0x01EE, r1
			EVENT_USB_Device_Disconnect();
    1d38:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1d3c:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1d40:	80 ff       	sbrs	r24, 0
    1d42:	19 c0       	rjmp	.+50     	; 0x1d76 <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1d44:	80 91 e2 00 	lds	r24, 0x00E2
    1d48:	80 ff       	sbrs	r24, 0
    1d4a:	15 c0       	rjmp	.+42     	; 0x1d76 <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1d4c:	80 91 e2 00 	lds	r24, 0x00E2
    1d50:	8e 7f       	andi	r24, 0xFE	; 254
    1d52:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1d56:	80 91 e2 00 	lds	r24, 0x00E2
    1d5a:	80 61       	ori	r24, 0x10	; 16
    1d5c:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1d60:	80 91 d8 00 	lds	r24, 0x00D8
    1d64:	80 62       	ori	r24, 0x20	; 32
    1d66:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1d6a:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1d6c:	85 e0       	ldi	r24, 0x05	; 5
    1d6e:	80 93 ee 01 	sts	0x01EE, r24
		EVENT_USB_Device_Suspend();
    1d72:	0e 94 80 0b 	call	0x1700	; 0x1700 <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1d76:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1d7a:	84 ff       	sbrs	r24, 4
    1d7c:	30 c0       	rjmp	.+96     	; 0x1dde <__vector_10+0x128>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1d7e:	80 91 e2 00 	lds	r24, 0x00E2
    1d82:	84 ff       	sbrs	r24, 4
    1d84:	2c c0       	rjmp	.+88     	; 0x1dde <__vector_10+0x128>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1d86:	80 e1       	ldi	r24, 0x10	; 16
    1d88:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1d8a:	82 e1       	ldi	r24, 0x12	; 18
    1d8c:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1d8e:	09 b4       	in	r0, 0x29	; 41
    1d90:	00 fe       	sbrs	r0, 0
    1d92:	fd cf       	rjmp	.-6      	; 0x1d8e <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1d94:	80 91 d8 00 	lds	r24, 0x00D8
    1d98:	8f 7d       	andi	r24, 0xDF	; 223
    1d9a:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1d9e:	80 91 e1 00 	lds	r24, 0x00E1
    1da2:	8f 7e       	andi	r24, 0xEF	; 239
    1da4:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1da8:	80 91 e2 00 	lds	r24, 0x00E2
    1dac:	8f 7e       	andi	r24, 0xEF	; 239
    1dae:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1db2:	80 91 e2 00 	lds	r24, 0x00E2
    1db6:	81 60       	ori	r24, 0x01	; 1
    1db8:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1dbc:	80 91 ea 01 	lds	r24, 0x01EA
    1dc0:	88 23       	and	r24, r24
    1dc2:	11 f0       	breq	.+4      	; 0x1dc8 <__vector_10+0x112>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1dc4:	84 e0       	ldi	r24, 0x04	; 4
    1dc6:	07 c0       	rjmp	.+14     	; 0x1dd6 <__vector_10+0x120>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1dc8:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1dcc:	87 ff       	sbrs	r24, 7
    1dce:	02 c0       	rjmp	.+4      	; 0x1dd4 <__vector_10+0x11e>
    1dd0:	83 e0       	ldi	r24, 0x03	; 3
    1dd2:	01 c0       	rjmp	.+2      	; 0x1dd6 <__vector_10+0x120>
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	80 93 ee 01 	sts	0x01EE, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1dda:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1dde:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1de2:	83 ff       	sbrs	r24, 3
    1de4:	29 c0       	rjmp	.+82     	; 0x1e38 <__vector_10+0x182>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1de6:	80 91 e2 00 	lds	r24, 0x00E2
    1dea:	83 ff       	sbrs	r24, 3
    1dec:	25 c0       	rjmp	.+74     	; 0x1e38 <__vector_10+0x182>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1dee:	80 91 e1 00 	lds	r24, 0x00E1
    1df2:	87 7f       	andi	r24, 0xF7	; 247
    1df4:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1df8:	82 e0       	ldi	r24, 0x02	; 2
    1dfa:	80 93 ee 01 	sts	0x01EE, r24
		USB_Device_ConfigurationNumber = 0;
    1dfe:	10 92 ea 01 	sts	0x01EA, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1e02:	80 91 e1 00 	lds	r24, 0x00E1
    1e06:	8e 7f       	andi	r24, 0xFE	; 254
    1e08:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1e0c:	80 91 e2 00 	lds	r24, 0x00E2
    1e10:	8e 7f       	andi	r24, 0xFE	; 254
    1e12:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1e16:	80 91 e2 00 	lds	r24, 0x00E2
    1e1a:	80 61       	ori	r24, 0x10	; 16
    1e1c:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1e20:	42 e0       	ldi	r20, 0x02	; 2
    1e22:	60 e0       	ldi	r22, 0x00	; 0
    1e24:	80 e0       	ldi	r24, 0x00	; 0
    1e26:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1e2a:	80 91 f0 00 	lds	r24, 0x00F0
    1e2e:	88 60       	ori	r24, 0x08	; 8
    1e30:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1e34:	0e 94 65 0a 	call	0x14ca	; 0x14ca <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1e38:	ff 91       	pop	r31
    1e3a:	ef 91       	pop	r30
    1e3c:	bf 91       	pop	r27
    1e3e:	af 91       	pop	r26
    1e40:	9f 91       	pop	r25
    1e42:	8f 91       	pop	r24
    1e44:	7f 91       	pop	r23
    1e46:	6f 91       	pop	r22
    1e48:	5f 91       	pop	r21
    1e4a:	4f 91       	pop	r20
    1e4c:	3f 91       	pop	r19
    1e4e:	2f 91       	pop	r18
    1e50:	0f 90       	pop	r0
    1e52:	0f be       	out	0x3f, r0	; 63
    1e54:	0f 90       	pop	r0
    1e56:	1f 90       	pop	r1
    1e58:	18 95       	reti

00001e5a <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1e5a:	1f 92       	push	r1
    1e5c:	0f 92       	push	r0
    1e5e:	0f b6       	in	r0, 0x3f	; 63
    1e60:	0f 92       	push	r0
    1e62:	11 24       	eor	r1, r1
    1e64:	2f 93       	push	r18
    1e66:	3f 93       	push	r19
    1e68:	4f 93       	push	r20
    1e6a:	5f 93       	push	r21
    1e6c:	6f 93       	push	r22
    1e6e:	7f 93       	push	r23
    1e70:	8f 93       	push	r24
    1e72:	9f 93       	push	r25
    1e74:	af 93       	push	r26
    1e76:	bf 93       	push	r27
    1e78:	cf 93       	push	r28
    1e7a:	ef 93       	push	r30
    1e7c:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1e7e:	c0 91 e9 00 	lds	r28, 0x00E9
    1e82:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1e84:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e88:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1e8c:	80 91 f0 00 	lds	r24, 0x00F0
    1e90:	87 7f       	andi	r24, 0xF7	; 247
    1e92:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1e96:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1e98:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <USB_Device_ProcessControlRequest>
    1e9c:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1ea0:	80 91 f0 00 	lds	r24, 0x00F0
    1ea4:	88 60       	ori	r24, 0x08	; 8
    1ea6:	80 93 f0 00 	sts	0x00F0, r24
    1eaa:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1eae:	ff 91       	pop	r31
    1eb0:	ef 91       	pop	r30
    1eb2:	cf 91       	pop	r28
    1eb4:	bf 91       	pop	r27
    1eb6:	af 91       	pop	r26
    1eb8:	9f 91       	pop	r25
    1eba:	8f 91       	pop	r24
    1ebc:	7f 91       	pop	r23
    1ebe:	6f 91       	pop	r22
    1ec0:	5f 91       	pop	r21
    1ec2:	4f 91       	pop	r20
    1ec4:	3f 91       	pop	r19
    1ec6:	2f 91       	pop	r18
    1ec8:	0f 90       	pop	r0
    1eca:	0f be       	out	0x3f, r0	; 63
    1ecc:	0f 90       	pop	r0
    1ece:	1f 90       	pop	r1
    1ed0:	18 95       	reti

00001ed2 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1ed2:	1f 93       	push	r17
    1ed4:	cf 93       	push	r28
    1ed6:	df 93       	push	r29
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
    1edc:	aa 97       	sbiw	r28, 0x2a	; 42
    1ede:	0f b6       	in	r0, 0x3f	; 63
    1ee0:	f8 94       	cli
    1ee2:	de bf       	out	0x3e, r29	; 62
    1ee4:	0f be       	out	0x3f, r0	; 63
    1ee6:	cd bf       	out	0x3d, r28	; 61
    1ee8:	ef ee       	ldi	r30, 0xEF	; 239
    1eea:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1eec:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1ef0:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1ef2:	21 e0       	ldi	r18, 0x01	; 1
    1ef4:	e7 3f       	cpi	r30, 0xF7	; 247
    1ef6:	f2 07       	cpc	r31, r18
    1ef8:	c9 f7       	brne	.-14     	; 0x1eec <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1efa:	0e 94 bf 0a 	call	0x157e	; 0x157e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1efe:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1f02:	83 ff       	sbrs	r24, 3
    1f04:	1c c1       	rjmp	.+568    	; 0x213e <USB_Device_ProcessControlRequest+0x26c>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1f06:	20 91 ef 01 	lds	r18, 0x01EF

		switch (USB_ControlRequest.bRequest)
    1f0a:	30 91 f0 01 	lds	r19, 0x01F0
    1f0e:	83 2f       	mov	r24, r19
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	8a 30       	cpi	r24, 0x0A	; 10
    1f14:	91 05       	cpc	r25, r1
    1f16:	08 f0       	brcs	.+2      	; 0x1f1a <USB_Device_ProcessControlRequest+0x48>
    1f18:	12 c1       	rjmp	.+548    	; 0x213e <USB_Device_ProcessControlRequest+0x26c>
    1f1a:	fc 01       	movw	r30, r24
    1f1c:	ea 5a       	subi	r30, 0xAA	; 170
    1f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f20:	0c 94 18 2b 	jmp	0x5630	; 0x5630 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1f24:	20 38       	cpi	r18, 0x80	; 128
    1f26:	81 f0       	breq	.+32     	; 0x1f48 <USB_Device_ProcessControlRequest+0x76>
    1f28:	22 38       	cpi	r18, 0x82	; 130
    1f2a:	09 f0       	breq	.+2      	; 0x1f2e <USB_Device_ProcessControlRequest+0x5c>
    1f2c:	08 c1       	rjmp	.+528    	; 0x213e <USB_Device_ProcessControlRequest+0x26c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f2e:	80 91 f3 01 	lds	r24, 0x01F3
    1f32:	8f 70       	andi	r24, 0x0F	; 15
    1f34:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1f38:	80 91 eb 00 	lds	r24, 0x00EB
    1f3c:	85 fb       	bst	r24, 5
    1f3e:	88 27       	eor	r24, r24
    1f40:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f42:	10 92 e9 00 	sts	0x00E9, r1
    1f46:	06 c0       	rjmp	.+12     	; 0x1f54 <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1f48:	80 91 eb 01 	lds	r24, 0x01EB
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1f4c:	90 91 ec 01 	lds	r25, 0x01EC
    1f50:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1f52:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f54:	90 91 e8 00 	lds	r25, 0x00E8
    1f58:	97 7f       	andi	r25, 0xF7	; 247
    1f5a:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1f5e:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1f62:	10 92 f1 00 	sts	0x00F1, r1
    1f66:	c5 c0       	rjmp	.+394    	; 0x20f2 <USB_Device_ProcessControlRequest+0x220>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1f68:	82 2f       	mov	r24, r18
    1f6a:	8d 7f       	andi	r24, 0xFD	; 253
    1f6c:	09 f0       	breq	.+2      	; 0x1f70 <USB_Device_ProcessControlRequest+0x9e>
    1f6e:	e7 c0       	rjmp	.+462    	; 0x213e <USB_Device_ProcessControlRequest+0x26c>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1f70:	22 23       	and	r18, r18
    1f72:	19 f0       	breq	.+6      	; 0x1f7a <USB_Device_ProcessControlRequest+0xa8>
    1f74:	22 30       	cpi	r18, 0x02	; 2
    1f76:	61 f0       	breq	.+24     	; 0x1f90 <USB_Device_ProcessControlRequest+0xbe>
    1f78:	e2 c0       	rjmp	.+452    	; 0x213e <USB_Device_ProcessControlRequest+0x26c>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1f7a:	80 91 f1 01 	lds	r24, 0x01F1
    1f7e:	81 30       	cpi	r24, 0x01	; 1
    1f80:	09 f0       	breq	.+2      	; 0x1f84 <USB_Device_ProcessControlRequest+0xb2>
    1f82:	dd c0       	rjmp	.+442    	; 0x213e <USB_Device_ProcessControlRequest+0x26c>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1f84:	33 30       	cpi	r19, 0x03	; 3
    1f86:	09 f0       	breq	.+2      	; 0x1f8a <USB_Device_ProcessControlRequest+0xb8>
    1f88:	80 e0       	ldi	r24, 0x00	; 0
    1f8a:	80 93 ec 01 	sts	0x01EC, r24
    1f8e:	28 c0       	rjmp	.+80     	; 0x1fe0 <USB_Device_ProcessControlRequest+0x10e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1f90:	80 91 f1 01 	lds	r24, 0x01F1
    1f94:	81 11       	cpse	r24, r1
    1f96:	24 c0       	rjmp	.+72     	; 0x1fe0 <USB_Device_ProcessControlRequest+0x10e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1f98:	20 91 f3 01 	lds	r18, 0x01F3
    1f9c:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1f9e:	09 f4       	brne	.+2      	; 0x1fa2 <USB_Device_ProcessControlRequest+0xd0>
    1fa0:	ce c0       	rjmp	.+412    	; 0x213e <USB_Device_ProcessControlRequest+0x26c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1fa2:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1fa6:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1faa:	80 ff       	sbrs	r24, 0
    1fac:	19 c0       	rjmp	.+50     	; 0x1fe0 <USB_Device_ProcessControlRequest+0x10e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1fae:	80 91 eb 00 	lds	r24, 0x00EB
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1fb2:	33 30       	cpi	r19, 0x03	; 3
    1fb4:	11 f4       	brne	.+4      	; 0x1fba <USB_Device_ProcessControlRequest+0xe8>
    1fb6:	80 62       	ori	r24, 0x20	; 32
    1fb8:	11 c0       	rjmp	.+34     	; 0x1fdc <USB_Device_ProcessControlRequest+0x10a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1fba:	80 61       	ori	r24, 0x10	; 16
    1fbc:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	02 2e       	mov	r0, r18
    1fc6:	01 c0       	rjmp	.+2      	; 0x1fca <USB_Device_ProcessControlRequest+0xf8>
    1fc8:	88 0f       	add	r24, r24
    1fca:	0a 94       	dec	r0
    1fcc:	ea f7       	brpl	.-6      	; 0x1fc8 <USB_Device_ProcessControlRequest+0xf6>
    1fce:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1fd2:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1fd6:	80 91 eb 00 	lds	r24, 0x00EB
    1fda:	88 60       	ori	r24, 0x08	; 8
    1fdc:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1fe0:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1fe4:	80 91 e8 00 	lds	r24, 0x00E8
    1fe8:	87 7f       	andi	r24, 0xF7	; 247
    1fea:	86 c0       	rjmp	.+268    	; 0x20f8 <USB_Device_ProcessControlRequest+0x226>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1fec:	21 11       	cpse	r18, r1
    1fee:	a7 c0       	rjmp	.+334    	; 0x213e <USB_Device_ProcessControlRequest+0x26c>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1ff0:	10 91 f1 01 	lds	r17, 0x01F1
    1ff4:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1ff6:	80 91 e3 00 	lds	r24, 0x00E3
    1ffa:	80 78       	andi	r24, 0x80	; 128
    1ffc:	81 2b       	or	r24, r17
    1ffe:	80 93 e3 00 	sts	0x00E3, r24
    2002:	80 91 e8 00 	lds	r24, 0x00E8
    2006:	87 7f       	andi	r24, 0xF7	; 247
    2008:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    200c:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2010:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    2014:	80 ff       	sbrs	r24, 0
    2016:	fc cf       	rjmp	.-8      	; 0x2010 <USB_Device_ProcessControlRequest+0x13e>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    2018:	80 91 e3 00 	lds	r24, 0x00E3
    201c:	80 68       	ori	r24, 0x80	; 128
    201e:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    2022:	11 23       	and	r17, r17
    2024:	11 f0       	breq	.+4      	; 0x202a <USB_Device_ProcessControlRequest+0x158>
    2026:	83 e0       	ldi	r24, 0x03	; 3
    2028:	01 c0       	rjmp	.+2      	; 0x202c <USB_Device_ProcessControlRequest+0x15a>
    202a:	82 e0       	ldi	r24, 0x02	; 2
    202c:	80 93 ee 01 	sts	0x01EE, r24
    2030:	86 c0       	rjmp	.+268    	; 0x213e <USB_Device_ProcessControlRequest+0x26c>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2032:	20 58       	subi	r18, 0x80	; 128
    2034:	22 30       	cpi	r18, 0x02	; 2
    2036:	08 f0       	brcs	.+2      	; 0x203a <USB_Device_ProcessControlRequest+0x168>
    2038:	82 c0       	rjmp	.+260    	; 0x213e <USB_Device_ProcessControlRequest+0x26c>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    203a:	80 91 f1 01 	lds	r24, 0x01F1
    203e:	90 91 f2 01 	lds	r25, 0x01F2
    2042:	8c 3d       	cpi	r24, 0xDC	; 220
    2044:	23 e0       	ldi	r18, 0x03	; 3
    2046:	92 07       	cpc	r25, r18
    2048:	79 f5       	brne	.+94     	; 0x20a8 <USB_Device_ProcessControlRequest+0x1d6>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    204a:	83 e0       	ldi	r24, 0x03	; 3
    204c:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    204e:	8a e2       	ldi	r24, 0x2A	; 42
    2050:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    2052:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    2054:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    2056:	de 01       	movw	r26, r28
    2058:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    205a:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    205c:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    205e:	51 e2       	ldi	r21, 0x21	; 33
    2060:	e3 2f       	mov	r30, r19
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	50 93 57 00 	sts	0x0057, r21
    2068:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    206a:	20 ff       	sbrs	r18, 0
    206c:	03 c0       	rjmp	.+6      	; 0x2074 <USB_Device_ProcessControlRequest+0x1a2>
					{
						SerialByte >>= 4;
    206e:	e2 95       	swap	r30
    2070:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    2072:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    2074:	ef 70       	andi	r30, 0x0F	; 15
    2076:	8e 2f       	mov	r24, r30
    2078:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    207a:	ea 30       	cpi	r30, 0x0A	; 10
    207c:	10 f0       	brcs	.+4      	; 0x2082 <USB_Device_ProcessControlRequest+0x1b0>
    207e:	c7 96       	adiw	r24, 0x37	; 55
    2080:	01 c0       	rjmp	.+2      	; 0x2084 <USB_Device_ProcessControlRequest+0x1b2>
    2082:	c0 96       	adiw	r24, 0x30	; 48
    2084:	8d 93       	st	X+, r24
    2086:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    2088:	2f 5f       	subi	r18, 0xFF	; 255
    208a:	24 31       	cpi	r18, 0x14	; 20
    208c:	49 f7       	brne	.-46     	; 0x2060 <USB_Device_ProcessControlRequest+0x18e>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    208e:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2090:	80 91 e8 00 	lds	r24, 0x00E8
    2094:	87 7f       	andi	r24, 0xF7	; 247
    2096:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    209a:	6a e2       	ldi	r22, 0x2A	; 42
    209c:	70 e0       	ldi	r23, 0x00	; 0
    209e:	ce 01       	movw	r24, r28
    20a0:	01 96       	adiw	r24, 0x01	; 1
    20a2:	0e 94 97 0c 	call	0x192e	; 0x192e <Endpoint_Write_Control_Stream_LE>
    20a6:	14 c0       	rjmp	.+40     	; 0x20d0 <USB_Device_ProcessControlRequest+0x1fe>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    20a8:	ae 01       	movw	r20, r28
    20aa:	4f 5f       	subi	r20, 0xFF	; 255
    20ac:	5f 4f       	sbci	r21, 0xFF	; 255
    20ae:	60 91 f3 01 	lds	r22, 0x01F3
    20b2:	0e 94 df 0b 	call	0x17be	; 0x17be <CALLBACK_USB_GetDescriptor>
    20b6:	00 97       	sbiw	r24, 0x00	; 0
    20b8:	09 f4       	brne	.+2      	; 0x20bc <USB_Device_ProcessControlRequest+0x1ea>
    20ba:	41 c0       	rjmp	.+130    	; 0x213e <USB_Device_ProcessControlRequest+0x26c>
    20bc:	20 91 e8 00 	lds	r18, 0x00E8
    20c0:	27 7f       	andi	r18, 0xF7	; 247
    20c2:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    20c6:	bc 01       	movw	r22, r24
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	9a 81       	ldd	r25, Y+2	; 0x02
    20cc:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    20d0:	80 91 e8 00 	lds	r24, 0x00E8
    20d4:	8b 77       	andi	r24, 0x7B	; 123
    20d6:	80 93 e8 00 	sts	0x00E8, r24
    20da:	31 c0       	rjmp	.+98     	; 0x213e <USB_Device_ProcessControlRequest+0x26c>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    20dc:	20 38       	cpi	r18, 0x80	; 128
    20de:	79 f5       	brne	.+94     	; 0x213e <USB_Device_ProcessControlRequest+0x26c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    20e0:	80 91 e8 00 	lds	r24, 0x00E8
    20e4:	87 7f       	andi	r24, 0xF7	; 247
    20e6:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    20ea:	80 91 ea 01 	lds	r24, 0x01EA
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    20ee:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    20f2:	80 91 e8 00 	lds	r24, 0x00E8
    20f6:	8e 77       	andi	r24, 0x7E	; 126
    20f8:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    20fc:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <Endpoint_ClearStatusStage>
    2100:	1e c0       	rjmp	.+60     	; 0x213e <USB_Device_ProcessControlRequest+0x26c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2102:	21 11       	cpse	r18, r1
    2104:	1c c0       	rjmp	.+56     	; 0x213e <USB_Device_ProcessControlRequest+0x26c>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    2106:	90 91 f1 01 	lds	r25, 0x01F1
    210a:	92 30       	cpi	r25, 0x02	; 2
    210c:	c0 f4       	brcc	.+48     	; 0x213e <USB_Device_ProcessControlRequest+0x26c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    210e:	80 91 e8 00 	lds	r24, 0x00E8
    2112:	87 7f       	andi	r24, 0xF7	; 247
    2114:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    2118:	90 93 ea 01 	sts	0x01EA, r25

	Endpoint_ClearStatusStage();
    211c:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    2120:	80 91 ea 01 	lds	r24, 0x01EA
    2124:	81 11       	cpse	r24, r1
    2126:	04 c0       	rjmp	.+8      	; 0x2130 <USB_Device_ProcessControlRequest+0x25e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2128:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    212c:	87 ff       	sbrs	r24, 7
    212e:	02 c0       	rjmp	.+4      	; 0x2134 <USB_Device_ProcessControlRequest+0x262>
    2130:	84 e0       	ldi	r24, 0x04	; 4
    2132:	01 c0       	rjmp	.+2      	; 0x2136 <USB_Device_ProcessControlRequest+0x264>
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	80 93 ee 01 	sts	0x01EE, r24

	EVENT_USB_Device_ConfigurationChanged();
    213a:	0e 94 a6 0a 	call	0x154c	; 0x154c <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    213e:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    2142:	83 ff       	sbrs	r24, 3
    2144:	0a c0       	rjmp	.+20     	; 0x215a <USB_Device_ProcessControlRequest+0x288>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2146:	80 91 e8 00 	lds	r24, 0x00E8
    214a:	87 7f       	andi	r24, 0xF7	; 247
    214c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2150:	80 91 eb 00 	lds	r24, 0x00EB
    2154:	80 62       	ori	r24, 0x20	; 32
    2156:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    215a:	aa 96       	adiw	r28, 0x2a	; 42
    215c:	0f b6       	in	r0, 0x3f	; 63
    215e:	f8 94       	cli
    2160:	de bf       	out	0x3e, r29	; 62
    2162:	0f be       	out	0x3f, r0	; 63
    2164:	cd bf       	out	0x3d, r28	; 61
    2166:	df 91       	pop	r29
    2168:	cf 91       	pop	r28
    216a:	1f 91       	pop	r17
    216c:	08 95       	ret

0000216e <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    216e:	90 93 6f 01 	sts	0x016F, r25
    2172:	80 93 6e 01 	sts	0x016E, r24
    2176:	08 95       	ret

00002178 <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    2178:	e0 91 6e 01 	lds	r30, 0x016E
    217c:	f0 91 6f 01 	lds	r31, 0x016F
    2180:	30 97       	sbiw	r30, 0x00	; 0
    2182:	21 f0       	breq	.+8      	; 0x218c <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    2184:	01 90       	ld	r0, Z+
    2186:	f0 81       	ld	r31, Z
    2188:	e0 2d       	mov	r30, r0
    218a:	09 94       	ijmp
}
    218c:	80 e0       	ldi	r24, 0x00	; 0
    218e:	08 95       	ret

00002190 <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    2190:	ff 92       	push	r15
    2192:	0f 93       	push	r16
    2194:	1f 93       	push	r17
    2196:	cf 93       	push	r28
    2198:	df 93       	push	r29
    219a:	8c 01       	movw	r16, r24
    if (!driver) return;
    219c:	e0 91 6e 01 	lds	r30, 0x016E
    21a0:	f0 91 6f 01 	lds	r31, 0x016F
    21a4:	30 97       	sbiw	r30, 0x00	; 0
    21a6:	99 f1       	breq	.+102    	; 0x220e <host_keyboard_send+0x7e>
    (*driver->send_keyboard)(report);
    21a8:	02 80       	ldd	r0, Z+2	; 0x02
    21aa:	f3 81       	ldd	r31, Z+3	; 0x03
    21ac:	e0 2d       	mov	r30, r0
    21ae:	09 95       	icall

    if (debug_keyboard) {
    21b0:	80 91 d9 01 	lds	r24, 0x01D9
    21b4:	82 ff       	sbrs	r24, 2
    21b6:	2b c0       	rjmp	.+86     	; 0x220e <host_keyboard_send+0x7e>
        dprint("keyboard: ");
    21b8:	80 ff       	sbrs	r24, 0
    21ba:	04 c0       	rjmp	.+8      	; 0x21c4 <host_keyboard_send+0x34>
    21bc:	83 ed       	ldi	r24, 0xD3	; 211
    21be:	94 e0       	ldi	r25, 0x04	; 4
    21c0:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    21c4:	e8 01       	movw	r28, r16
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    21c6:	80 e2       	ldi	r24, 0x20	; 32
    21c8:	f8 2e       	mov	r15, r24
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    21ca:	0d ec       	ldi	r16, 0xCD	; 205
    21cc:	14 e0       	ldi	r17, 0x04	; 4
    21ce:	80 91 d9 01 	lds	r24, 0x01D9
    21d2:	80 ff       	sbrs	r24, 0
    21d4:	0b c0       	rjmp	.+22     	; 0x21ec <host_keyboard_send+0x5c>
    21d6:	88 81       	ld	r24, Y
    21d8:	1f 92       	push	r1
    21da:	8f 93       	push	r24
    21dc:	1f 93       	push	r17
    21de:	0f 93       	push	r16
    21e0:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    21e4:	0f 90       	pop	r0
    21e6:	0f 90       	pop	r0
    21e8:	0f 90       	pop	r0
    21ea:	0f 90       	pop	r0
    21ec:	fa 94       	dec	r15
    21ee:	21 96       	adiw	r28, 0x01	; 1
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    21f0:	f1 10       	cpse	r15, r1
    21f2:	ed cf       	rjmp	.-38     	; 0x21ce <host_keyboard_send+0x3e>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    21f4:	80 91 d9 01 	lds	r24, 0x01D9
    21f8:	80 ff       	sbrs	r24, 0
    21fa:	09 c0       	rjmp	.+18     	; 0x220e <host_keyboard_send+0x7e>
    21fc:	8b ec       	ldi	r24, 0xCB	; 203
    21fe:	94 e0       	ldi	r25, 0x04	; 4
    }
}
    2200:	df 91       	pop	r29
    2202:	cf 91       	pop	r28
    2204:	1f 91       	pop	r17
    2206:	0f 91       	pop	r16
    2208:	ff 90       	pop	r15
    if (debug_keyboard) {
        dprint("keyboard: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    220a:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <xputs>
    }
}
    220e:	df 91       	pop	r29
    2210:	cf 91       	pop	r28
    2212:	1f 91       	pop	r17
    2214:	0f 91       	pop	r16
    2216:	ff 90       	pop	r15
    2218:	08 95       	ret

0000221a <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    221a:	e0 91 6e 01 	lds	r30, 0x016E
    221e:	f0 91 6f 01 	lds	r31, 0x016F
    2222:	30 97       	sbiw	r30, 0x00	; 0
    2224:	21 f0       	breq	.+8      	; 0x222e <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    2226:	04 80       	ldd	r0, Z+4	; 0x04
    2228:	f5 81       	ldd	r31, Z+5	; 0x05
    222a:	e0 2d       	mov	r30, r0
    222c:	09 94       	ijmp
    222e:	08 95       	ret

00002230 <host_system_send>:
}

void host_system_send(uint16_t report)
{
    2230:	cf 93       	push	r28
    2232:	df 93       	push	r29
    2234:	ec 01       	movw	r28, r24
    if (report == last_system_report) return;
    2236:	80 91 6c 01 	lds	r24, 0x016C
    223a:	90 91 6d 01 	lds	r25, 0x016D
    223e:	c8 17       	cp	r28, r24
    2240:	d9 07       	cpc	r29, r25
    2242:	09 f1       	breq	.+66     	; 0x2286 <host_system_send+0x56>
    last_system_report = report;
    2244:	d0 93 6d 01 	sts	0x016D, r29
    2248:	c0 93 6c 01 	sts	0x016C, r28

    if (!driver) return;
    224c:	e0 91 6e 01 	lds	r30, 0x016E
    2250:	f0 91 6f 01 	lds	r31, 0x016F
    2254:	30 97       	sbiw	r30, 0x00	; 0
    2256:	b9 f0       	breq	.+46     	; 0x2286 <host_system_send+0x56>
    (*driver->send_system)(report);
    2258:	06 80       	ldd	r0, Z+6	; 0x06
    225a:	f7 81       	ldd	r31, Z+7	; 0x07
    225c:	e0 2d       	mov	r30, r0
    225e:	ce 01       	movw	r24, r28
    2260:	09 95       	icall

    if (debug_keyboard) {
    2262:	80 91 d9 01 	lds	r24, 0x01D9
    2266:	82 ff       	sbrs	r24, 2
    2268:	0e c0       	rjmp	.+28     	; 0x2286 <host_system_send+0x56>
        dprintf("system: %04X\n", report);
    226a:	80 ff       	sbrs	r24, 0
    226c:	0c c0       	rjmp	.+24     	; 0x2286 <host_system_send+0x56>
    226e:	df 93       	push	r29
    2270:	cf 93       	push	r28
    2272:	8d eb       	ldi	r24, 0xBD	; 189
    2274:	94 e0       	ldi	r25, 0x04	; 4
    2276:	9f 93       	push	r25
    2278:	8f 93       	push	r24
    227a:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    227e:	0f 90       	pop	r0
    2280:	0f 90       	pop	r0
    2282:	0f 90       	pop	r0
    2284:	0f 90       	pop	r0
    }
}
    2286:	df 91       	pop	r29
    2288:	cf 91       	pop	r28
    228a:	08 95       	ret

0000228c <host_consumer_send>:

void host_consumer_send(uint16_t report)
{
    228c:	cf 93       	push	r28
    228e:	df 93       	push	r29
    2290:	ec 01       	movw	r28, r24
    if (report == last_consumer_report) return;
    2292:	80 91 6a 01 	lds	r24, 0x016A
    2296:	90 91 6b 01 	lds	r25, 0x016B
    229a:	c8 17       	cp	r28, r24
    229c:	d9 07       	cpc	r29, r25
    229e:	09 f1       	breq	.+66     	; 0x22e2 <host_consumer_send+0x56>
    last_consumer_report = report;
    22a0:	d0 93 6b 01 	sts	0x016B, r29
    22a4:	c0 93 6a 01 	sts	0x016A, r28

    if (!driver) return;
    22a8:	e0 91 6e 01 	lds	r30, 0x016E
    22ac:	f0 91 6f 01 	lds	r31, 0x016F
    22b0:	30 97       	sbiw	r30, 0x00	; 0
    22b2:	b9 f0       	breq	.+46     	; 0x22e2 <host_consumer_send+0x56>
    (*driver->send_consumer)(report);
    22b4:	00 84       	ldd	r0, Z+8	; 0x08
    22b6:	f1 85       	ldd	r31, Z+9	; 0x09
    22b8:	e0 2d       	mov	r30, r0
    22ba:	ce 01       	movw	r24, r28
    22bc:	09 95       	icall

    if (debug_keyboard) {
    22be:	80 91 d9 01 	lds	r24, 0x01D9
    22c2:	82 ff       	sbrs	r24, 2
    22c4:	0e c0       	rjmp	.+28     	; 0x22e2 <host_consumer_send+0x56>
        dprintf("consumer: %04X\n", report);
    22c6:	80 ff       	sbrs	r24, 0
    22c8:	0c c0       	rjmp	.+24     	; 0x22e2 <host_consumer_send+0x56>
    22ca:	df 93       	push	r29
    22cc:	cf 93       	push	r28
    22ce:	8d ea       	ldi	r24, 0xAD	; 173
    22d0:	94 e0       	ldi	r25, 0x04	; 4
    22d2:	9f 93       	push	r25
    22d4:	8f 93       	push	r24
    22d6:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    22da:	0f 90       	pop	r0
    22dc:	0f 90       	pop	r0
    22de:	0f 90       	pop	r0
    22e0:	0f 90       	pop	r0
    }
}
    22e2:	df 91       	pop	r29
    22e4:	cf 91       	pop	r28
    22e6:	08 95       	ret

000022e8 <keyboard_setup>:
#endif


void keyboard_setup(void)
{
    matrix_setup();
    22e8:	0c 94 3e 12 	jmp	0x247c	; 0x247c <matrix_setup>

000022ec <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    22ec:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <timer_init>
    matrix_init();
    22f0:	0e 94 aa 07 	call	0xf54	; 0xf54 <matrix_init>
    adb_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    22f4:	0e 94 56 1f 	call	0x3eac	; 0x3eac <bootmagic>
#endif

#ifdef BACKLIGHT_ENABLE
    backlight_init();
    22f8:	0c 94 f2 28 	jmp	0x51e4	; 0x51e4 <backlight_init>

000022fc <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    22fc:	cf 92       	push	r12
    22fe:	df 92       	push	r13
    2300:	ef 92       	push	r14
    2302:	ff 92       	push	r15
    2304:	0f 93       	push	r16
    2306:	1f 93       	push	r17
    2308:	cf 93       	push	r28
    230a:	df 93       	push	r29
    230c:	00 d0       	rcall	.+0      	; 0x230e <keyboard_task+0x12>
    230e:	00 d0       	rcall	.+0      	; 0x2310 <keyboard_task+0x14>
    2310:	00 d0       	rcall	.+0      	; 0x2312 <keyboard_task+0x16>
    2312:	cd b7       	in	r28, 0x3d	; 61
    2314:	de b7       	in	r29, 0x3e	; 62
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    2316:	0e 94 cb 07 	call	0xf96	; 0xf96 <matrix_scan>
    231a:	31 e7       	ldi	r19, 0x71	; 113
    231c:	e3 2e       	mov	r14, r19
    231e:	31 e0       	ldi	r19, 0x01	; 1
    2320:	f3 2e       	mov	r15, r19
    2322:	00 e0       	ldi	r16, 0x00	; 0
    2324:	10 e0       	ldi	r17, 0x00	; 0
    2326:	c0 2e       	mov	r12, r16
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    2328:	80 2f       	mov	r24, r16
    232a:	0e 94 6e 08 	call	0x10dc	; 0x10dc <matrix_get_row>
        matrix_change = matrix_row ^ matrix_prev[r];
    232e:	f7 01       	movw	r30, r14
    2330:	d1 90       	ld	r13, Z+
    2332:	7f 01       	movw	r14, r30
    2334:	d8 26       	eor	r13, r24
        if (matrix_change) {
    2336:	b1 f4       	brne	.+44     	; 0x2364 <keyboard_task+0x68>
    2338:	0f 5f       	subi	r16, 0xFF	; 255
    233a:	1f 4f       	sbci	r17, 0xFF	; 255
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    233c:	05 30       	cpi	r16, 0x05	; 5
    233e:	11 05       	cpc	r17, r1
    2340:	91 f7       	brne	.-28     	; 0x2326 <keyboard_task+0x2a>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    2342:	8f ef       	ldi	r24, 0xFF	; 255
    2344:	89 83       	std	Y+1, r24	; 0x01
    2346:	8a 83       	std	Y+2, r24	; 0x02
    2348:	1b 82       	std	Y+3, r1	; 0x03
    234a:	0e 94 65 1e 	call	0x3cca	; 0x3cca <timer_read>
    234e:	81 60       	ori	r24, 0x01	; 1
    2350:	78 2f       	mov	r23, r24
    2352:	9d 83       	std	Y+5, r25	; 0x05
    2354:	8c 83       	std	Y+4, r24	; 0x04
    2356:	49 81       	ldd	r20, Y+1	; 0x01
    2358:	5a 81       	ldd	r21, Y+2	; 0x02
    235a:	6b 81       	ldd	r22, Y+3	; 0x03
    235c:	8d 81       	ldd	r24, Y+5	; 0x05
    235e:	0e 94 41 12 	call	0x2482	; 0x2482 <action_exec>
    2362:	48 c0       	rjmp	.+144    	; 0x23f4 <keyboard_task+0xf8>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    2364:	90 91 d9 01 	lds	r25, 0x01D9
    2368:	91 ff       	sbrs	r25, 1
    236a:	04 c0       	rjmp	.+8      	; 0x2374 <keyboard_task+0x78>
    236c:	8e 83       	std	Y+6, r24	; 0x06
    236e:	0e 94 74 08 	call	0x10e8	; 0x10e8 <matrix_print>
    2372:	8e 81       	ldd	r24, Y+6	; 0x06
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	30 e0       	ldi	r19, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    2378:	4d 2d       	mov	r20, r13
    237a:	50 e0       	ldi	r21, 0x00	; 0
    237c:	92 2f       	mov	r25, r18
    237e:	ba 01       	movw	r22, r20
    2380:	02 2e       	mov	r0, r18
    2382:	02 c0       	rjmp	.+4      	; 0x2388 <keyboard_task+0x8c>
    2384:	75 95       	asr	r23
    2386:	67 95       	ror	r22
    2388:	0a 94       	dec	r0
    238a:	e2 f7       	brpl	.-8      	; 0x2384 <keyboard_task+0x88>
    238c:	60 ff       	sbrs	r22, 0
    238e:	2c c0       	rjmp	.+88     	; 0x23e8 <keyboard_task+0xec>
                    keyevent_t e = (keyevent_t){
    2390:	29 83       	std	Y+1, r18	; 0x01
    2392:	ca 82       	std	Y+2, r12	; 0x02
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    2394:	ee 24       	eor	r14, r14
    2396:	e3 94       	inc	r14
    2398:	f1 2c       	mov	r15, r1
    239a:	02 c0       	rjmp	.+4      	; 0x23a0 <keyboard_task+0xa4>
    239c:	ee 0c       	add	r14, r14
    239e:	ff 1c       	adc	r15, r15
    23a0:	9a 95       	dec	r25
    23a2:	e2 f7       	brpl	.-8      	; 0x239c <keyboard_task+0xa0>
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	8e 21       	and	r24, r14
    23a8:	9f 21       	and	r25, r15
    23aa:	21 e0       	ldi	r18, 0x01	; 1
    23ac:	89 2b       	or	r24, r25
    23ae:	09 f4       	brne	.+2      	; 0x23b2 <keyboard_task+0xb6>
    23b0:	20 e0       	ldi	r18, 0x00	; 0
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    keyevent_t e = (keyevent_t){
    23b2:	2b 83       	std	Y+3, r18	; 0x03
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
    23b4:	0e 94 65 1e 	call	0x3cca	; 0x3cca <timer_read>
    23b8:	81 60       	ori	r24, 0x01	; 1
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    keyevent_t e = (keyevent_t){
    23ba:	78 2f       	mov	r23, r24
    23bc:	9d 83       	std	Y+5, r25	; 0x05
    23be:	8c 83       	std	Y+4, r24	; 0x04
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    };
                    action_exec(e);
    23c0:	49 81       	ldd	r20, Y+1	; 0x01
    23c2:	5a 81       	ldd	r21, Y+2	; 0x02
    23c4:	6b 81       	ldd	r22, Y+3	; 0x03
    23c6:	8d 81       	ldd	r24, Y+5	; 0x05
    23c8:	0e 94 41 12 	call	0x2482	; 0x2482 <action_exec>
                    hook_matrix_change(e);
    23cc:	49 81       	ldd	r20, Y+1	; 0x01
    23ce:	5a 81       	ldd	r21, Y+2	; 0x02
    23d0:	6b 81       	ldd	r22, Y+3	; 0x03
    23d2:	7c 81       	ldd	r23, Y+4	; 0x04
    23d4:	8d 81       	ldd	r24, Y+5	; 0x05
    23d6:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <hook_matrix_change>
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    23da:	f8 01       	movw	r30, r16
    23dc:	ef 58       	subi	r30, 0x8F	; 143
    23de:	fe 4f       	sbci	r31, 0xFE	; 254
    23e0:	80 81       	ld	r24, Z
    23e2:	8e 25       	eor	r24, r14
    23e4:	80 83       	st	Z, r24
    23e6:	06 c0       	rjmp	.+12     	; 0x23f4 <keyboard_task+0xf8>
    23e8:	2f 5f       	subi	r18, 0xFF	; 255
    23ea:	3f 4f       	sbci	r19, 0xFF	; 255
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    23ec:	26 30       	cpi	r18, 0x06	; 6
    23ee:	31 05       	cpc	r19, r1
    23f0:	29 f6       	brne	.-118    	; 0x237c <keyboard_task+0x80>
    23f2:	a2 cf       	rjmp	.-188    	; 0x2338 <keyboard_task+0x3c>
    // call with pseudo tick event when no real key event.
    action_exec(TICK);

MATRIX_LOOP_END:

    hook_keyboard_loop();
    23f4:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <hook_keyboard_loop>

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    23f8:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    23fc:	10 91 70 01 	lds	r17, 0x0170
    2400:	0e 94 bc 10 	call	0x2178	; 0x2178 <host_keyboard_leds>
    2404:	18 17       	cp	r17, r24
    2406:	41 f1       	breq	.+80     	; 0x2458 <keyboard_task+0x15c>
        led_status = host_keyboard_leds();
    2408:	0e 94 bc 10 	call	0x2178	; 0x2178 <host_keyboard_leds>
    240c:	80 93 70 01 	sts	0x0170, r24
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
    2410:	90 91 d9 01 	lds	r25, 0x01D9
    2414:	92 ff       	sbrs	r25, 2
    2416:	0e c0       	rjmp	.+28     	; 0x2434 <keyboard_task+0x138>
    2418:	90 ff       	sbrs	r25, 0
    241a:	0c c0       	rjmp	.+24     	; 0x2434 <keyboard_task+0x138>
    241c:	1f 92       	push	r1
    241e:	8f 93       	push	r24
    2420:	8e ed       	ldi	r24, 0xDE	; 222
    2422:	94 e0       	ldi	r25, 0x04	; 4
    2424:	9f 93       	push	r25
    2426:	8f 93       	push	r24
    2428:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    242c:	0f 90       	pop	r0
    242e:	0f 90       	pop	r0
    2430:	0f 90       	pop	r0
    2432:	0f 90       	pop	r0
        hook_keyboard_leds_change(led_status);
    2434:	80 91 70 01 	lds	r24, 0x0170
    }
}
    2438:	26 96       	adiw	r28, 0x06	; 6
    243a:	0f b6       	in	r0, 0x3f	; 63
    243c:	f8 94       	cli
    243e:	de bf       	out	0x3e, r29	; 62
    2440:	0f be       	out	0x3f, r0	; 63
    2442:	cd bf       	out	0x3d, r28	; 61
    2444:	df 91       	pop	r29
    2446:	cf 91       	pop	r28
    2448:	1f 91       	pop	r17
    244a:	0f 91       	pop	r16
    244c:	ff 90       	pop	r15
    244e:	ef 90       	pop	r14
    2450:	df 90       	pop	r13
    2452:	cf 90       	pop	r12

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
        hook_keyboard_leds_change(led_status);
    2454:	0c 94 ef 1d 	jmp	0x3bde	; 0x3bde <hook_keyboard_leds_change>
    }
}
    2458:	26 96       	adiw	r28, 0x06	; 6
    245a:	0f b6       	in	r0, 0x3f	; 63
    245c:	f8 94       	cli
    245e:	de bf       	out	0x3e, r29	; 62
    2460:	0f be       	out	0x3f, r0	; 63
    2462:	cd bf       	out	0x3d, r28	; 61
    2464:	df 91       	pop	r29
    2466:	cf 91       	pop	r28
    2468:	1f 91       	pop	r17
    246a:	0f 91       	pop	r16
    246c:	ff 90       	pop	r15
    246e:	ef 90       	pop	r14
    2470:	df 90       	pop	r13
    2472:	cf 90       	pop	r12
    2474:	08 95       	ret

00002476 <keyboard_set_leds>:

void keyboard_set_leds(uint8_t leds)
{
    led_set(leds);
    2476:	0c 94 bb 08 	jmp	0x1176	; 0x1176 <led_set>

0000247a <matrix_clear>:
    return MATRIX_COLS;
}

__attribute__ ((weak))
void matrix_clear(void)
{
    247a:	08 95       	ret

0000247c <matrix_setup>:
}

__attribute__ ((weak))
void matrix_setup(void) {}
    247c:	08 95       	ret

0000247e <matrix_power_up>:
    }
    return false;
}
#endif

__attribute__ ((weak)) void matrix_power_up(void) {}
    247e:	08 95       	ret

00002480 <matrix_power_down>:
__attribute__ ((weak)) void matrix_power_down(void) {}
    2480:	08 95       	ret

00002482 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    2482:	cf 93       	push	r28
    2484:	df 93       	push	r29
    2486:	cd b7       	in	r28, 0x3d	; 61
    2488:	de b7       	in	r29, 0x3e	; 62
    248a:	2b 97       	sbiw	r28, 0x0b	; 11
    248c:	0f b6       	in	r0, 0x3f	; 63
    248e:	f8 94       	cli
    2490:	de bf       	out	0x3e, r29	; 62
    2492:	0f be       	out	0x3f, r0	; 63
    2494:	cd bf       	out	0x3d, r28	; 61
    2496:	4f 83       	std	Y+7, r20	; 0x07
    2498:	58 87       	std	Y+8, r21	; 0x08
    249a:	69 87       	std	Y+9, r22	; 0x09
    249c:	7a 87       	std	Y+10, r23	; 0x0a
    249e:	8b 87       	std	Y+11, r24	; 0x0b

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    24a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    24a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    24a4:	89 2b       	or	r24, r25
    24a6:	31 f0       	breq	.+12     	; 0x24b4 <action_exec+0x32>
    24a8:	5f 3f       	cpi	r21, 0xFF	; 255
    24aa:	11 f0       	breq	.+4      	; 0x24b0 <action_exec+0x2e>
    24ac:	80 e0       	ldi	r24, 0x00	; 0
    24ae:	03 c0       	rjmp	.+6      	; 0x24b6 <action_exec+0x34>
    24b0:	4f 3f       	cpi	r20, 0xFF	; 255
    24b2:	e1 f7       	brne	.-8      	; 0x24ac <action_exec+0x2a>
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    if (!IS_NOEVENT(event)) {
    24b6:	81 11       	cpse	r24, r1
    24b8:	07 c0       	rjmp	.+14     	; 0x24c8 <action_exec+0x46>
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
        hook_matrix_change(event);
    24ba:	4f 81       	ldd	r20, Y+7	; 0x07
    24bc:	58 85       	ldd	r21, Y+8	; 0x08
    24be:	69 85       	ldd	r22, Y+9	; 0x09
    24c0:	7a 85       	ldd	r23, Y+10	; 0x0a
    24c2:	8b 85       	ldd	r24, Y+11	; 0x0b
    24c4:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <hook_matrix_change>
    }

    keyrecord_t record = { .event = event };
    24c8:	de 01       	movw	r26, r28
    24ca:	11 96       	adiw	r26, 0x01	; 1
    24cc:	86 e0       	ldi	r24, 0x06	; 6
    24ce:	fd 01       	movw	r30, r26
    24d0:	11 92       	st	Z+, r1
    24d2:	8a 95       	dec	r24
    24d4:	e9 f7       	brne	.-6      	; 0x24d0 <action_exec+0x4e>
    24d6:	85 e0       	ldi	r24, 0x05	; 5
    24d8:	fe 01       	movw	r30, r28
    24da:	37 96       	adiw	r30, 0x07	; 7
    24dc:	01 90       	ld	r0, Z+
    24de:	0d 92       	st	X+, r0
    24e0:	8a 95       	dec	r24
    24e2:	e1 f7       	brne	.-8      	; 0x24dc <action_exec+0x5a>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    24e4:	49 81       	ldd	r20, Y+1	; 0x01
    24e6:	5a 81       	ldd	r21, Y+2	; 0x02
    24e8:	6b 81       	ldd	r22, Y+3	; 0x03
    24ea:	7c 81       	ldd	r23, Y+4	; 0x04
    24ec:	8d 81       	ldd	r24, Y+5	; 0x05
    24ee:	9e 81       	ldd	r25, Y+6	; 0x06
    24f0:	0e 94 27 1a 	call	0x344e	; 0x344e <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    24f4:	2b 96       	adiw	r28, 0x0b	; 11
    24f6:	0f b6       	in	r0, 0x3f	; 63
    24f8:	f8 94       	cli
    24fa:	de bf       	out	0x3e, r29	; 62
    24fc:	0f be       	out	0x3f, r0	; 63
    24fe:	cd bf       	out	0x3d, r28	; 61
    2500:	df 91       	pop	r29
    2502:	cf 91       	pop	r28
    2504:	08 95       	ret

00002506 <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    2506:	cf 93       	push	r28
    2508:	c8 2f       	mov	r28, r24
    if (code == KC_NO) {
    250a:	88 23       	and	r24, r24
    250c:	09 f4       	brne	.+2      	; 0x2510 <register_code+0xa>
    250e:	a8 c0       	rjmp	.+336    	; 0x2660 <register_code+0x15a>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    2510:	82 38       	cpi	r24, 0x82	; 130
    2512:	a1 f4       	brne	.+40     	; 0x253c <register_code+0x36>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is on
        if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
    2514:	0e 94 bc 10 	call	0x2178	; 0x2178 <host_keyboard_leds>
    2518:	81 fd       	sbrc	r24, 1
    251a:	a2 c0       	rjmp	.+324    	; 0x2660 <register_code+0x15a>
#endif
        add_key(KC_CAPSLOCK);
    251c:	89 e3       	ldi	r24, 0x39	; 57
    251e:	0e 94 a4 1c 	call	0x3948	; 0x3948 <add_key>
        send_keyboard_report();
    2522:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <send_keyboard_report>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2526:	2f ef       	ldi	r18, 0xFF	; 255
    2528:	81 ee       	ldi	r24, 0xE1	; 225
    252a:	94 e0       	ldi	r25, 0x04	; 4
    252c:	21 50       	subi	r18, 0x01	; 1
    252e:	80 40       	sbci	r24, 0x00	; 0
    2530:	90 40       	sbci	r25, 0x00	; 0
    2532:	e1 f7       	brne	.-8      	; 0x252c <register_code+0x26>
    2534:	00 c0       	rjmp	.+0      	; 0x2536 <register_code+0x30>
    2536:	00 00       	nop
        wait_ms(100);
        del_key(KC_CAPSLOCK);
    2538:	89 e3       	ldi	r24, 0x39	; 57
    253a:	15 c0       	rjmp	.+42     	; 0x2566 <register_code+0x60>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    253c:	83 38       	cpi	r24, 0x83	; 131
    253e:	c1 f4       	brne	.+48     	; 0x2570 <register_code+0x6a>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
    2540:	0e 94 bc 10 	call	0x2178	; 0x2178 <host_keyboard_leds>
    2544:	80 fd       	sbrc	r24, 0
    2546:	8c c0       	rjmp	.+280    	; 0x2660 <register_code+0x15a>
#endif
        add_key(KC_NUMLOCK);
    2548:	83 e5       	ldi	r24, 0x53	; 83
    254a:	0e 94 a4 1c 	call	0x3948	; 0x3948 <add_key>
        send_keyboard_report();
    254e:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <send_keyboard_report>
    2552:	2f ef       	ldi	r18, 0xFF	; 255
    2554:	81 ee       	ldi	r24, 0xE1	; 225
    2556:	94 e0       	ldi	r25, 0x04	; 4
    2558:	21 50       	subi	r18, 0x01	; 1
    255a:	80 40       	sbci	r24, 0x00	; 0
    255c:	90 40       	sbci	r25, 0x00	; 0
    255e:	e1 f7       	brne	.-8      	; 0x2558 <register_code+0x52>
    2560:	00 c0       	rjmp	.+0      	; 0x2562 <register_code+0x5c>
    2562:	00 00       	nop
        wait_ms(100);
        del_key(KC_NUMLOCK);
    2564:	83 e5       	ldi	r24, 0x53	; 83
    2566:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <del_key>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    256a:	cf 91       	pop	r28
#endif
        add_key(KC_NUMLOCK);
        send_keyboard_report();
        wait_ms(100);
        del_key(KC_NUMLOCK);
        send_keyboard_report();
    256c:	0c 94 86 1d 	jmp	0x3b0c	; 0x3b0c <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    2570:	84 38       	cpi	r24, 0x84	; 132
    2572:	a1 f4       	brne	.+40     	; 0x259c <register_code+0x96>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
    2574:	0e 94 bc 10 	call	0x2178	; 0x2178 <host_keyboard_leds>
    2578:	82 fd       	sbrc	r24, 2
    257a:	72 c0       	rjmp	.+228    	; 0x2660 <register_code+0x15a>
#endif
        add_key(KC_SCROLLLOCK);
    257c:	87 e4       	ldi	r24, 0x47	; 71
    257e:	0e 94 a4 1c 	call	0x3948	; 0x3948 <add_key>
        send_keyboard_report();
    2582:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <send_keyboard_report>
    2586:	2f ef       	ldi	r18, 0xFF	; 255
    2588:	81 ee       	ldi	r24, 0xE1	; 225
    258a:	94 e0       	ldi	r25, 0x04	; 4
    258c:	21 50       	subi	r18, 0x01	; 1
    258e:	80 40       	sbci	r24, 0x00	; 0
    2590:	90 40       	sbci	r25, 0x00	; 0
    2592:	e1 f7       	brne	.-8      	; 0x258c <register_code+0x86>
    2594:	00 c0       	rjmp	.+0      	; 0x2596 <register_code+0x90>
    2596:	00 00       	nop
        wait_ms(100);
        del_key(KC_SCROLLLOCK);
    2598:	87 e4       	ldi	r24, 0x47	; 71
    259a:	e5 cf       	rjmp	.-54     	; 0x2566 <register_code+0x60>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    259c:	8c ef       	ldi	r24, 0xFC	; 252
    259e:	8c 0f       	add	r24, r28
    25a0:	81 3a       	cpi	r24, 0xA1	; 161
    25a2:	20 f0       	brcs	.+8      	; 0x25ac <register_code+0xa6>
    25a4:	80 e5       	ldi	r24, 0x50	; 80
    25a6:	8c 0f       	add	r24, r28
    25a8:	8e 32       	cpi	r24, 0x2E	; 46
    25aa:	48 f4       	brcc	.+18     	; 0x25be <register_code+0xb8>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    25ac:	8c 2f       	mov	r24, r28
    25ae:	0e 94 a0 27 	call	0x4f40	; 0x4f40 <command_proc>
    25b2:	81 11       	cpse	r24, r1
    25b4:	55 c0       	rjmp	.+170    	; 0x2660 <register_code+0x15a>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    25b6:	8c 2f       	mov	r24, r28
    25b8:	0e 94 a4 1c 	call	0x3948	; 0x3948 <add_key>
    25bc:	d6 cf       	rjmp	.-84     	; 0x256a <register_code+0x64>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    25be:	80 e2       	ldi	r24, 0x20	; 32
    25c0:	8c 0f       	add	r24, r28
    25c2:	88 30       	cpi	r24, 0x08	; 8
    25c4:	48 f4       	brcc	.+18     	; 0x25d8 <register_code+0xd2>
        add_mods(MOD_BIT(code));
    25c6:	c7 70       	andi	r28, 0x07	; 7
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	01 c0       	rjmp	.+2      	; 0x25ce <register_code+0xc8>
    25cc:	88 0f       	add	r24, r24
    25ce:	ca 95       	dec	r28
    25d0:	ea f7       	brpl	.-6      	; 0x25cc <register_code+0xc6>
    25d2:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <add_mods>
    25d6:	c9 cf       	rjmp	.-110    	; 0x256a <register_code+0x64>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    25d8:	8b e5       	ldi	r24, 0x5B	; 91
    25da:	8c 0f       	add	r24, r28
    25dc:	83 30       	cpi	r24, 0x03	; 3
    25de:	78 f4       	brcc	.+30     	; 0x25fe <register_code+0xf8>
        host_system_send(KEYCODE2SYSTEM(code));
    25e0:	c5 3a       	cpi	r28, 0xA5	; 165
    25e2:	29 f0       	breq	.+10     	; 0x25ee <register_code+0xe8>
    25e4:	c6 3a       	cpi	r28, 0xA6	; 166
    25e6:	31 f4       	brne	.+12     	; 0x25f4 <register_code+0xee>
    25e8:	82 e8       	ldi	r24, 0x82	; 130
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	05 c0       	rjmp	.+10     	; 0x25f8 <register_code+0xf2>
    25ee:	81 e8       	ldi	r24, 0x81	; 129
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	02 c0       	rjmp	.+4      	; 0x25f8 <register_code+0xf2>
    25f4:	83 e8       	ldi	r24, 0x83	; 131
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    25f8:	cf 91       	pop	r28
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    25fa:	0c 94 18 11 	jmp	0x2230	; 0x2230 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    25fe:	88 e5       	ldi	r24, 0x58	; 88
    2600:	8c 0f       	add	r24, r28
    2602:	85 31       	cpi	r24, 0x15	; 21
    2604:	68 f5       	brcc	.+90     	; 0x2660 <register_code+0x15a>
        host_consumer_send(KEYCODE2CONSUMER(code));
    2606:	c8 3a       	cpi	r28, 0xA8	; 168
    2608:	89 f0       	breq	.+34     	; 0x262c <register_code+0x126>
    260a:	c9 3a       	cpi	r28, 0xA9	; 169
    260c:	91 f0       	breq	.+36     	; 0x2632 <register_code+0x12c>
    260e:	ca 3a       	cpi	r28, 0xAA	; 170
    2610:	99 f0       	breq	.+38     	; 0x2638 <register_code+0x132>
    2612:	cb 3a       	cpi	r28, 0xAB	; 171
    2614:	a1 f0       	breq	.+40     	; 0x263e <register_code+0x138>
    2616:	cc 3a       	cpi	r28, 0xAC	; 172
    2618:	a9 f0       	breq	.+42     	; 0x2644 <register_code+0x13e>
    261a:	cd 3a       	cpi	r28, 0xAD	; 173
    261c:	b1 f0       	breq	.+44     	; 0x264a <register_code+0x144>
    261e:	ce 3a       	cpi	r28, 0xAE	; 174
    2620:	b9 f0       	breq	.+46     	; 0x2650 <register_code+0x14a>
    2622:	cf 3a       	cpi	r28, 0xAF	; 175
    2624:	c1 f4       	brne	.+48     	; 0x2656 <register_code+0x150>
    2626:	87 eb       	ldi	r24, 0xB7	; 183
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	17 c0       	rjmp	.+46     	; 0x265a <register_code+0x154>
    262c:	82 ee       	ldi	r24, 0xE2	; 226
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	14 c0       	rjmp	.+40     	; 0x265a <register_code+0x154>
    2632:	89 ee       	ldi	r24, 0xE9	; 233
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	11 c0       	rjmp	.+34     	; 0x265a <register_code+0x154>
    2638:	8a ee       	ldi	r24, 0xEA	; 234
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	0e c0       	rjmp	.+28     	; 0x265a <register_code+0x154>
    263e:	85 eb       	ldi	r24, 0xB5	; 181
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	0b c0       	rjmp	.+22     	; 0x265a <register_code+0x154>
    2644:	86 eb       	ldi	r24, 0xB6	; 182
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	08 c0       	rjmp	.+16     	; 0x265a <register_code+0x154>
    264a:	83 eb       	ldi	r24, 0xB3	; 179
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	05 c0       	rjmp	.+10     	; 0x265a <register_code+0x154>
    2650:	84 eb       	ldi	r24, 0xB4	; 180
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	02 c0       	rjmp	.+4      	; 0x265a <register_code+0x154>
    2656:	80 e0       	ldi	r24, 0x00	; 0
    2658:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    265a:	cf 91       	pop	r28
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    265c:	0c 94 46 11 	jmp	0x228c	; 0x228c <host_consumer_send>
    }
}
    2660:	cf 91       	pop	r28
    2662:	08 95       	ret

00002664 <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    2664:	88 23       	and	r24, r24
    2666:	09 f4       	brne	.+2      	; 0x266a <unregister_code+0x6>
    2668:	6a c0       	rjmp	.+212    	; 0x273e <unregister_code+0xda>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    266a:	82 38       	cpi	r24, 0x82	; 130
    266c:	a1 f4       	brne	.+40     	; 0x2696 <unregister_code+0x32>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is off
        if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
    266e:	0e 94 bc 10 	call	0x2178	; 0x2178 <host_keyboard_leds>
    2672:	81 ff       	sbrs	r24, 1
    2674:	64 c0       	rjmp	.+200    	; 0x273e <unregister_code+0xda>
#endif
        add_key(KC_CAPSLOCK);
    2676:	89 e3       	ldi	r24, 0x39	; 57
    2678:	0e 94 a4 1c 	call	0x3948	; 0x3948 <add_key>
        send_keyboard_report();
    267c:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <send_keyboard_report>
    2680:	2f ef       	ldi	r18, 0xFF	; 255
    2682:	81 ee       	ldi	r24, 0xE1	; 225
    2684:	94 e0       	ldi	r25, 0x04	; 4
    2686:	21 50       	subi	r18, 0x01	; 1
    2688:	80 40       	sbci	r24, 0x00	; 0
    268a:	90 40       	sbci	r25, 0x00	; 0
    268c:	e1 f7       	brne	.-8      	; 0x2686 <unregister_code+0x22>
    268e:	00 c0       	rjmp	.+0      	; 0x2690 <unregister_code+0x2c>
    2690:	00 00       	nop
        wait_ms(100);
        del_key(KC_CAPSLOCK);
    2692:	89 e3       	ldi	r24, 0x39	; 57
    2694:	15 c0       	rjmp	.+42     	; 0x26c0 <unregister_code+0x5c>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    2696:	83 38       	cpi	r24, 0x83	; 131
    2698:	b9 f4       	brne	.+46     	; 0x26c8 <unregister_code+0x64>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
    269a:	0e 94 bc 10 	call	0x2178	; 0x2178 <host_keyboard_leds>
    269e:	80 ff       	sbrs	r24, 0
    26a0:	4e c0       	rjmp	.+156    	; 0x273e <unregister_code+0xda>
#endif
        add_key(KC_NUMLOCK);
    26a2:	83 e5       	ldi	r24, 0x53	; 83
    26a4:	0e 94 a4 1c 	call	0x3948	; 0x3948 <add_key>
        send_keyboard_report();
    26a8:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <send_keyboard_report>
    26ac:	2f ef       	ldi	r18, 0xFF	; 255
    26ae:	81 ee       	ldi	r24, 0xE1	; 225
    26b0:	94 e0       	ldi	r25, 0x04	; 4
    26b2:	21 50       	subi	r18, 0x01	; 1
    26b4:	80 40       	sbci	r24, 0x00	; 0
    26b6:	90 40       	sbci	r25, 0x00	; 0
    26b8:	e1 f7       	brne	.-8      	; 0x26b2 <unregister_code+0x4e>
    26ba:	00 c0       	rjmp	.+0      	; 0x26bc <unregister_code+0x58>
    26bc:	00 00       	nop
        wait_ms(100);
        del_key(KC_NUMLOCK);
    26be:	83 e5       	ldi	r24, 0x53	; 83
    26c0:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <del_key>
        send_keyboard_report();
    26c4:	0c 94 86 1d 	jmp	0x3b0c	; 0x3b0c <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    26c8:	84 38       	cpi	r24, 0x84	; 132
    26ca:	a1 f4       	brne	.+40     	; 0x26f4 <unregister_code+0x90>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
    26cc:	0e 94 bc 10 	call	0x2178	; 0x2178 <host_keyboard_leds>
    26d0:	82 ff       	sbrs	r24, 2
    26d2:	35 c0       	rjmp	.+106    	; 0x273e <unregister_code+0xda>
#endif
        add_key(KC_SCROLLLOCK);
    26d4:	87 e4       	ldi	r24, 0x47	; 71
    26d6:	0e 94 a4 1c 	call	0x3948	; 0x3948 <add_key>
        send_keyboard_report();
    26da:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <send_keyboard_report>
    26de:	2f ef       	ldi	r18, 0xFF	; 255
    26e0:	81 ee       	ldi	r24, 0xE1	; 225
    26e2:	94 e0       	ldi	r25, 0x04	; 4
    26e4:	21 50       	subi	r18, 0x01	; 1
    26e6:	80 40       	sbci	r24, 0x00	; 0
    26e8:	90 40       	sbci	r25, 0x00	; 0
    26ea:	e1 f7       	brne	.-8      	; 0x26e4 <unregister_code+0x80>
    26ec:	00 c0       	rjmp	.+0      	; 0x26ee <unregister_code+0x8a>
    26ee:	00 00       	nop
        wait_ms(100);
        del_key(KC_SCROLLLOCK);
    26f0:	87 e4       	ldi	r24, 0x47	; 71
    26f2:	e6 cf       	rjmp	.-52     	; 0x26c0 <unregister_code+0x5c>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    26f4:	9c ef       	ldi	r25, 0xFC	; 252
    26f6:	98 0f       	add	r25, r24
    26f8:	91 3a       	cpi	r25, 0xA1	; 161
    26fa:	10 f3       	brcs	.-60     	; 0x26c0 <unregister_code+0x5c>
    26fc:	90 e5       	ldi	r25, 0x50	; 80
    26fe:	98 0f       	add	r25, r24
    2700:	9e 32       	cpi	r25, 0x2E	; 46
    2702:	f0 f2       	brcs	.-68     	; 0x26c0 <unregister_code+0x5c>
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    2704:	90 e2       	ldi	r25, 0x20	; 32
    2706:	98 0f       	add	r25, r24
    2708:	98 30       	cpi	r25, 0x08	; 8
    270a:	50 f4       	brcc	.+20     	; 0x2720 <unregister_code+0xbc>
        del_mods(MOD_BIT(code));
    270c:	87 70       	andi	r24, 0x07	; 7
    270e:	91 e0       	ldi	r25, 0x01	; 1
    2710:	01 c0       	rjmp	.+2      	; 0x2714 <unregister_code+0xb0>
    2712:	99 0f       	add	r25, r25
    2714:	8a 95       	dec	r24
    2716:	ea f7       	brpl	.-6      	; 0x2712 <unregister_code+0xae>
    2718:	89 2f       	mov	r24, r25
    271a:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <del_mods>
    271e:	d2 cf       	rjmp	.-92     	; 0x26c4 <unregister_code+0x60>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    2720:	9b e5       	ldi	r25, 0x5B	; 91
    2722:	98 0f       	add	r25, r24
    2724:	93 30       	cpi	r25, 0x03	; 3
    2726:	20 f4       	brcc	.+8      	; 0x2730 <unregister_code+0xcc>
        host_system_send(0);
    2728:	80 e0       	ldi	r24, 0x00	; 0
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	0c 94 18 11 	jmp	0x2230	; 0x2230 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    2730:	88 5a       	subi	r24, 0xA8	; 168
    2732:	85 31       	cpi	r24, 0x15	; 21
    2734:	20 f4       	brcc	.+8      	; 0x273e <unregister_code+0xda>
        host_consumer_send(0);
    2736:	80 e0       	ldi	r24, 0x00	; 0
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	0c 94 46 11 	jmp	0x228c	; 0x228c <host_consumer_send>
    273e:	08 95       	ret

00002740 <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    2740:	88 23       	and	r24, r24
    2742:	21 f0       	breq	.+8      	; 0x274c <register_mods+0xc>
        add_mods(mods);
    2744:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <add_mods>
        send_keyboard_report();
    2748:	0c 94 86 1d 	jmp	0x3b0c	; 0x3b0c <send_keyboard_report>
    274c:	08 95       	ret

0000274e <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    274e:	88 23       	and	r24, r24
    2750:	21 f0       	breq	.+8      	; 0x275a <unregister_mods+0xc>
        del_mods(mods);
    2752:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <del_mods>
        send_keyboard_report();
    2756:	0c 94 86 1d 	jmp	0x3b0c	; 0x3b0c <send_keyboard_report>
    275a:	08 95       	ret

0000275c <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    275c:	cf 92       	push	r12
    275e:	df 92       	push	r13
    2760:	ef 92       	push	r14
    2762:	ff 92       	push	r15
    2764:	0f 93       	push	r16
    2766:	1f 93       	push	r17
    2768:	cf 93       	push	r28
    276a:	df 93       	push	r29
    276c:	cd b7       	in	r28, 0x3d	; 61
    276e:	de b7       	in	r29, 0x3e	; 62
    2770:	28 97       	sbiw	r28, 0x08	; 8
    2772:	0f b6       	in	r0, 0x3f	; 63
    2774:	f8 94       	cli
    2776:	de bf       	out	0x3e, r29	; 62
    2778:	0f be       	out	0x3f, r0	; 63
    277a:	cd bf       	out	0x3d, r28	; 61
    277c:	8c 01       	movw	r16, r24
    keyevent_t event = record->event;
    277e:	85 e0       	ldi	r24, 0x05	; 5
    2780:	f8 01       	movw	r30, r16
    2782:	de 01       	movw	r26, r28
    2784:	11 96       	adiw	r26, 0x01	; 1
    2786:	01 90       	ld	r0, Z+
    2788:	0d 92       	st	X+, r0
    278a:	8a 95       	dec	r24
    278c:	e1 f7       	brne	.-8      	; 0x2786 <process_action+0x2a>
    278e:	f8 01       	movw	r30, r16
    2790:	40 81       	ld	r20, Z
    2792:	31 81       	ldd	r19, Z+1	; 0x01
    2794:	f2 80       	ldd	r15, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    2796:	25 81       	ldd	r18, Z+5	; 0x05
    2798:	22 95       	swap	r18
    279a:	2f 70       	andi	r18, 0x0F	; 15
    279c:	83 81       	ldd	r24, Z+3	; 0x03
    279e:	94 81       	ldd	r25, Z+4	; 0x04
    27a0:	89 2b       	or	r24, r25
    27a2:	31 f0       	breq	.+12     	; 0x27b0 <process_action+0x54>
    27a4:	3f 3f       	cpi	r19, 0xFF	; 255
    27a6:	31 f4       	brne	.+12     	; 0x27b4 <process_action+0x58>
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	4f 3f       	cpi	r20, 0xFF	; 255
    27ac:	19 f4       	brne	.+6      	; 0x27b4 <process_action+0x58>
    27ae:	03 c0       	rjmp	.+6      	; 0x27b6 <process_action+0x5a>
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	01 c0       	rjmp	.+2      	; 0x27b6 <process_action+0x5a>
    27b4:	80 e0       	ldi	r24, 0x00	; 0
#endif

    if (IS_NOEVENT(event)) { return; }
    27b6:	80 fd       	sbrc	r24, 0
    27b8:	4b c3       	rjmp	.+1686   	; 0x2e50 <process_action+0x6f4>

    action_t action = layer_switch_get_action(event.key);
    27ba:	49 83       	std	Y+1, r20	; 0x01
    27bc:	3a 83       	std	Y+2, r19	; 0x02
    27be:	89 81       	ldd	r24, Y+1	; 0x01
    27c0:	9a 81       	ldd	r25, Y+2	; 0x02
    27c2:	2f 83       	std	Y+7, r18	; 0x07
    27c4:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <layer_switch_get_action>
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    27c8:	9e 83       	std	Y+6, r25	; 0x06
    27ca:	88 87       	std	Y+8, r24	; 0x08
    27cc:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    27d0:	0e 94 89 1b 	call	0x3712	; 0x3712 <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    27d4:	4e 81       	ldd	r20, Y+6	; 0x06
    27d6:	e4 2f       	mov	r30, r20
    27d8:	e2 95       	swap	r30
    27da:	ef 70       	andi	r30, 0x0F	; 15
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	e0 5a       	subi	r30, 0xA0	; 160
    27e0:	ff 4f       	sbci	r31, 0xFF	; 255
    27e2:	2f 81       	ldd	r18, Y+7	; 0x07
    27e4:	68 85       	ldd	r22, Y+8	; 0x08
    27e6:	0c 94 18 2b 	jmp	0x5630	; 0x5630 <__tablejump2__>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    27ea:	84 2f       	mov	r24, r20
    27ec:	80 7f       	andi	r24, 0xF0	; 240
    27ee:	14 2f       	mov	r17, r20
    27f0:	1f 70       	andi	r17, 0x0F	; 15
    27f2:	88 23       	and	r24, r24
    27f4:	11 f0       	breq	.+4      	; 0x27fa <process_action+0x9e>
    27f6:	12 95       	swap	r17
    27f8:	10 7f       	andi	r17, 0xF0	; 240
                                                                action.key.mods<<4;
                if (event.pressed) {
    27fa:	ff 20       	and	r15, r15
    27fc:	59 f0       	breq	.+22     	; 0x2814 <process_action+0xb8>
                    if (mods) {
    27fe:	11 23       	and	r17, r17
    2800:	09 f4       	brne	.+2      	; 0x2804 <process_action+0xa8>
    2802:	71 c2       	rjmp	.+1250   	; 0x2ce6 <process_action+0x58a>
                        add_weak_mods(mods);
    2804:	81 2f       	mov	r24, r17
    2806:	68 87       	std	Y+8, r22	; 0x08
    2808:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <add_weak_mods>
                        send_keyboard_report();
    280c:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <send_keyboard_report>
    2810:	68 85       	ldd	r22, Y+8	; 0x08
    2812:	69 c2       	rjmp	.+1234   	; 0x2ce6 <process_action+0x58a>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    2814:	86 2f       	mov	r24, r22
    2816:	0e 94 32 13 	call	0x2664	; 0x2664 <unregister_code>
                    if (mods) {
    281a:	11 23       	and	r17, r17
    281c:	09 f4       	brne	.+2      	; 0x2820 <process_action+0xc4>
    281e:	18 c3       	rjmp	.+1584   	; 0x2e50 <process_action+0x6f4>
                        del_weak_mods(mods);
    2820:	81 2f       	mov	r24, r17
    2822:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    2826:	28 96       	adiw	r28, 0x08	; 8
    2828:	0f b6       	in	r0, 0x3f	; 63
    282a:	f8 94       	cli
    282c:	de bf       	out	0x3e, r29	; 62
    282e:	0f be       	out	0x3f, r0	; 63
    2830:	cd bf       	out	0x3d, r28	; 61
    2832:	df 91       	pop	r29
    2834:	cf 91       	pop	r28
    2836:	1f 91       	pop	r17
    2838:	0f 91       	pop	r16
    283a:	ff 90       	pop	r15
    283c:	ef 90       	pop	r14
    283e:	df 90       	pop	r13
    2840:	cf 90       	pop	r12
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    2842:	0c 94 86 1d 	jmp	0x3b0c	; 0x3b0c <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    2846:	84 2f       	mov	r24, r20
    2848:	80 7f       	andi	r24, 0xF0	; 240
    284a:	94 2f       	mov	r25, r20
    284c:	9f 70       	andi	r25, 0x0F	; 15
    284e:	e9 2e       	mov	r14, r25
    2850:	80 32       	cpi	r24, 0x20	; 32
    2852:	19 f0       	breq	.+6      	; 0x285a <process_action+0xfe>
    2854:	e2 94       	swap	r14
    2856:	80 ef       	ldi	r24, 0xF0	; 240
    2858:	e8 22       	and	r14, r24
                                                                    action.key.mods<<4;
                switch (action.key.code) {
    285a:	66 23       	and	r22, r22
    285c:	19 f0       	breq	.+6      	; 0x2864 <process_action+0x108>
    285e:	61 30       	cpi	r22, 0x01	; 1
    2860:	01 f1       	breq	.+64     	; 0x28a2 <process_action+0x146>
    2862:	29 c0       	rjmp	.+82     	; 0x28b6 <process_action+0x15a>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    2864:	ff 20       	and	r15, r15
    2866:	a9 f0       	breq	.+42     	; 0x2892 <process_action+0x136>
                            if (tap_count == 0) {
                                register_mods(mods);
    2868:	8e 2d       	mov	r24, r14
                switch (action.key.code) {
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
                            if (tap_count == 0) {
    286a:	22 23       	and	r18, r18
    286c:	49 f1       	breq	.+82     	; 0x28c0 <process_action+0x164>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    286e:	21 30       	cpi	r18, 0x01	; 1
    2870:	39 f5       	brne	.+78     	; 0x28c0 <process_action+0x164>
            break;
#endif
        default:
            break;
    }
}
    2872:	28 96       	adiw	r28, 0x08	; 8
    2874:	0f b6       	in	r0, 0x3f	; 63
    2876:	f8 94       	cli
    2878:	de bf       	out	0x3e, r29	; 62
    287a:	0f be       	out	0x3f, r0	; 63
    287c:	cd bf       	out	0x3d, r28	; 61
    287e:	df 91       	pop	r29
    2880:	cf 91       	pop	r28
    2882:	1f 91       	pop	r17
    2884:	0f 91       	pop	r16
    2886:	ff 90       	pop	r15
    2888:	ef 90       	pop	r14
    288a:	df 90       	pop	r13
    288c:	cf 90       	pop	r12
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    288e:	0c 94 6d 1d 	jmp	0x3ada	; 0x3ada <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    2892:	22 23       	and	r18, r18
    2894:	19 f0       	breq	.+6      	; 0x289c <process_action+0x140>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    2896:	21 30       	cpi	r18, 0x01	; 1
    2898:	09 f4       	brne	.+2      	; 0x289c <process_action+0x140>
    289a:	da c2       	rjmp	.+1460   	; 0x2e50 <process_action+0x6f4>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    289c:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <clear_oneshot_mods>
    28a0:	2c c0       	rjmp	.+88     	; 0x28fa <process_action+0x19e>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    28a2:	ff 20       	and	r15, r15
    28a4:	e9 f0       	breq	.+58     	; 0x28e0 <process_action+0x184>
                            if (tap_count <= TAPPING_TOGGLE) {
    28a6:	26 30       	cpi	r18, 0x06	; 6
    28a8:	08 f0       	brcs	.+2      	; 0x28ac <process_action+0x150>
    28aa:	d2 c2       	rjmp	.+1444   	; 0x2e50 <process_action+0x6f4>
                                if (mods & get_mods()) {
    28ac:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <get_mods>
    28b0:	8e 21       	and	r24, r14
    28b2:	29 f0       	breq	.+10     	; 0x28be <process_action+0x162>
    28b4:	22 c0       	rjmp	.+68     	; 0x28fa <process_action+0x19e>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    28b6:	ff 20       	and	r15, r15
    28b8:	f1 f0       	breq	.+60     	; 0x28f6 <process_action+0x19a>
                            if (tap_count > 0) {
    28ba:	21 11       	cpse	r18, r1
    28bc:	15 c0       	rjmp	.+42     	; 0x28e8 <process_action+0x18c>
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    28be:	8e 2d       	mov	r24, r14
            break;
#endif
        default:
            break;
    }
}
    28c0:	28 96       	adiw	r28, 0x08	; 8
    28c2:	0f b6       	in	r0, 0x3f	; 63
    28c4:	f8 94       	cli
    28c6:	de bf       	out	0x3e, r29	; 62
    28c8:	0f be       	out	0x3f, r0	; 63
    28ca:	cd bf       	out	0x3d, r28	; 61
    28cc:	df 91       	pop	r29
    28ce:	cf 91       	pop	r28
    28d0:	1f 91       	pop	r17
    28d2:	0f 91       	pop	r16
    28d4:	ff 90       	pop	r15
    28d6:	ef 90       	pop	r14
    28d8:	df 90       	pop	r13
    28da:	cf 90       	pop	r12
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    28dc:	0c 94 a0 13 	jmp	0x2740	; 0x2740 <register_mods>
                                }
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    28e0:	25 30       	cpi	r18, 0x05	; 5
    28e2:	08 f0       	brcs	.+2      	; 0x28e6 <process_action+0x18a>
    28e4:	b5 c2       	rjmp	.+1386   	; 0x2e50 <process_action+0x6f4>
    28e6:	09 c0       	rjmp	.+18     	; 0x28fa <process_action+0x19e>
                        }
                        break;
                    default:
                        if (event.pressed) {
                            if (tap_count > 0) {
                                if (record->tap.interrupted) {
    28e8:	f8 01       	movw	r30, r16
    28ea:	85 81       	ldd	r24, Z+5	; 0x05
    28ec:	80 ff       	sbrs	r24, 0
    28ee:	fb c1       	rjmp	.+1014   	; 0x2ce6 <process_action+0x58a>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    28f0:	8f 70       	andi	r24, 0x0F	; 15
    28f2:	85 83       	std	Z+5, r24	; 0x05
    28f4:	e4 cf       	rjmp	.-56     	; 0x28be <process_action+0x162>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    28f6:	21 11       	cpse	r18, r1
    28f8:	0a c2       	rjmp	.+1044   	; 0x2d0e <process_action+0x5b2>
                                dprint("MODS_TAP: Tap: unregister_code\n");
                                unregister_code(action.key.code);
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                unregister_mods(mods);
    28fa:	8e 2d       	mov	r24, r14
    28fc:	78 c1       	rjmp	.+752    	; 0x2bee <process_action+0x492>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    28fe:	24 2f       	mov	r18, r20
    2900:	26 95       	lsr	r18
    2902:	26 95       	lsr	r18
    2904:	23 70       	andi	r18, 0x03	; 3
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	21 15       	cp	r18, r1
    290a:	31 05       	cpc	r19, r1
    290c:	21 f0       	breq	.+8      	; 0x2916 <process_action+0x1ba>
    290e:	21 30       	cpi	r18, 0x01	; 1
    2910:	31 05       	cpc	r19, r1
    2912:	c9 f0       	breq	.+50     	; 0x2946 <process_action+0x1ea>
    2914:	9d c2       	rjmp	.+1338   	; 0x2e50 <process_action+0x6f4>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    2916:	ff 20       	and	r15, r15
    2918:	21 f0       	breq	.+8      	; 0x2922 <process_action+0x1c6>
                        host_system_send(action.usage.code);
    291a:	86 2f       	mov	r24, r22
    291c:	94 2f       	mov	r25, r20
    291e:	93 70       	andi	r25, 0x03	; 3
    2920:	02 c0       	rjmp	.+4      	; 0x2926 <process_action+0x1ca>
                    } else {
                        host_system_send(0);
    2922:	80 e0       	ldi	r24, 0x00	; 0
    2924:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    2926:	28 96       	adiw	r28, 0x08	; 8
    2928:	0f b6       	in	r0, 0x3f	; 63
    292a:	f8 94       	cli
    292c:	de bf       	out	0x3e, r29	; 62
    292e:	0f be       	out	0x3f, r0	; 63
    2930:	cd bf       	out	0x3d, r28	; 61
    2932:	df 91       	pop	r29
    2934:	cf 91       	pop	r28
    2936:	1f 91       	pop	r17
    2938:	0f 91       	pop	r16
    293a:	ff 90       	pop	r15
    293c:	ef 90       	pop	r14
    293e:	df 90       	pop	r13
    2940:	cf 90       	pop	r12
            switch (action.usage.page) {
                case PAGE_SYSTEM:
                    if (event.pressed) {
                        host_system_send(action.usage.code);
                    } else {
                        host_system_send(0);
    2942:	0c 94 18 11 	jmp	0x2230	; 0x2230 <host_system_send>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    2946:	ff 20       	and	r15, r15
    2948:	21 f0       	breq	.+8      	; 0x2952 <process_action+0x1f6>
                        host_consumer_send(action.usage.code);
    294a:	86 2f       	mov	r24, r22
    294c:	94 2f       	mov	r25, r20
    294e:	93 70       	andi	r25, 0x03	; 3
    2950:	02 c0       	rjmp	.+4      	; 0x2956 <process_action+0x1fa>
                    } else {
                        host_consumer_send(0);
    2952:	80 e0       	ldi	r24, 0x00	; 0
    2954:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    2956:	28 96       	adiw	r28, 0x08	; 8
    2958:	0f b6       	in	r0, 0x3f	; 63
    295a:	f8 94       	cli
    295c:	de bf       	out	0x3e, r29	; 62
    295e:	0f be       	out	0x3f, r0	; 63
    2960:	cd bf       	out	0x3d, r28	; 61
    2962:	df 91       	pop	r29
    2964:	cf 91       	pop	r28
    2966:	1f 91       	pop	r17
    2968:	0f 91       	pop	r16
    296a:	ff 90       	pop	r15
    296c:	ef 90       	pop	r14
    296e:	df 90       	pop	r13
    2970:	cf 90       	pop	r12
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
                        host_consumer_send(action.usage.code);
                    } else {
                        host_consumer_send(0);
    2972:	0c 94 46 11 	jmp	0x228c	; 0x228c <host_consumer_send>
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
                mousekey_on(action.key.code);
    2976:	86 2f       	mov	r24, r22
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    2978:	ff 20       	and	r15, r15
    297a:	19 f0       	breq	.+6      	; 0x2982 <process_action+0x226>
                mousekey_on(action.key.code);
    297c:	0e 94 71 21 	call	0x42e2	; 0x42e2 <mousekey_on>
    2980:	02 c0       	rjmp	.+4      	; 0x2986 <process_action+0x22a>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    2982:	0e 94 d9 21 	call	0x43b2	; 0x43b2 <mousekey_off>
            break;
#endif
        default:
            break;
    }
}
    2986:	28 96       	adiw	r28, 0x08	; 8
    2988:	0f b6       	in	r0, 0x3f	; 63
    298a:	f8 94       	cli
    298c:	de bf       	out	0x3e, r29	; 62
    298e:	0f be       	out	0x3f, r0	; 63
    2990:	cd bf       	out	0x3d, r28	; 61
    2992:	df 91       	pop	r29
    2994:	cf 91       	pop	r28
    2996:	1f 91       	pop	r17
    2998:	0f 91       	pop	r16
    299a:	ff 90       	pop	r15
    299c:	ef 90       	pop	r14
    299e:	df 90       	pop	r13
    29a0:	cf 90       	pop	r12
            if (event.pressed) {
                mousekey_on(action.key.code);
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
                mousekey_send();
    29a2:	0c 94 5e 22 	jmp	0x44bc	; 0x44bc <mousekey_send>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    29a6:	84 2f       	mov	r24, r20
    29a8:	83 70       	andi	r24, 0x03	; 3
    29aa:	09 f0       	breq	.+2      	; 0x29ae <process_action+0x252>
    29ac:	76 c0       	rjmp	.+236    	; 0x2a9a <process_action+0x33e>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    29ae:	f1 10       	cpse	r15, r1
    29b0:	4f c2       	rjmp	.+1182   	; 0x2e50 <process_action+0x6f4>
                    uint8_t shift = action.layer_bitop.part*4;
    29b2:	26 2f       	mov	r18, r22
    29b4:	22 95       	swap	r18
    29b6:	26 95       	lsr	r18
    29b8:	27 70       	andi	r18, 0x07	; 7
    29ba:	22 0f       	add	r18, r18
    29bc:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    29be:	86 2f       	mov	r24, r22
    29c0:	8f 70       	andi	r24, 0x0F	; 15
    29c2:	c8 2e       	mov	r12, r24
    29c4:	d1 2c       	mov	r13, r1
    29c6:	e1 2c       	mov	r14, r1
    29c8:	f1 2c       	mov	r15, r1
    29ca:	02 2e       	mov	r0, r18
    29cc:	04 c0       	rjmp	.+8      	; 0x29d6 <process_action+0x27a>
    29ce:	cc 0c       	add	r12, r12
    29d0:	dd 1c       	adc	r13, r13
    29d2:	ee 1c       	adc	r14, r14
    29d4:	ff 1c       	adc	r15, r15
    29d6:	0a 94       	dec	r0
    29d8:	d2 f7       	brpl	.-12     	; 0x29ce <process_action+0x272>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    29da:	64 ff       	sbrs	r22, 4
    29dc:	10 c0       	rjmp	.+32     	; 0x29fe <process_action+0x2a2>
    29de:	6f e0       	ldi	r22, 0x0F	; 15
    29e0:	70 e0       	ldi	r23, 0x00	; 0
    29e2:	80 e0       	ldi	r24, 0x00	; 0
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	04 c0       	rjmp	.+8      	; 0x29f0 <process_action+0x294>
    29e8:	66 0f       	add	r22, r22
    29ea:	77 1f       	adc	r23, r23
    29ec:	88 1f       	adc	r24, r24
    29ee:	99 1f       	adc	r25, r25
    29f0:	2a 95       	dec	r18
    29f2:	d2 f7       	brpl	.-12     	; 0x29e8 <process_action+0x28c>
    29f4:	60 95       	com	r22
    29f6:	70 95       	com	r23
    29f8:	80 95       	com	r24
    29fa:	90 95       	com	r25
    29fc:	03 c0       	rjmp	.+6      	; 0x2a04 <process_action+0x2a8>
    29fe:	60 e0       	ldi	r22, 0x00	; 0
    2a00:	70 e0       	ldi	r23, 0x00	; 0
    2a02:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2a04:	24 2f       	mov	r18, r20
    2a06:	26 95       	lsr	r18
    2a08:	26 95       	lsr	r18
    2a0a:	23 70       	andi	r18, 0x03	; 3
    2a0c:	42 2f       	mov	r20, r18
    2a0e:	50 e0       	ldi	r21, 0x00	; 0
    2a10:	42 30       	cpi	r20, 0x02	; 2
    2a12:	51 05       	cpc	r21, r1
    2a14:	d1 f0       	breq	.+52     	; 0x2a4a <process_action+0x2ee>
    2a16:	43 30       	cpi	r20, 0x03	; 3
    2a18:	51 05       	cpc	r21, r1
    2a1a:	59 f1       	breq	.+86     	; 0x2a72 <process_action+0x316>
    2a1c:	6c 29       	or	r22, r12
    2a1e:	7d 29       	or	r23, r13
    2a20:	8e 29       	or	r24, r14
    2a22:	9f 29       	or	r25, r15
    2a24:	41 30       	cpi	r20, 0x01	; 1
    2a26:	51 05       	cpc	r21, r1
    2a28:	41 f1       	breq	.+80     	; 0x2a7a <process_action+0x31e>
            break;
#endif
        default:
            break;
    }
}
    2a2a:	28 96       	adiw	r28, 0x08	; 8
    2a2c:	0f b6       	in	r0, 0x3f	; 63
    2a2e:	f8 94       	cli
    2a30:	de bf       	out	0x3e, r29	; 62
    2a32:	0f be       	out	0x3f, r0	; 63
    2a34:	cd bf       	out	0x3d, r28	; 61
    2a36:	df 91       	pop	r29
    2a38:	cf 91       	pop	r28
    2a3a:	1f 91       	pop	r17
    2a3c:	0f 91       	pop	r16
    2a3e:	ff 90       	pop	r15
    2a40:	ef 90       	pop	r14
    2a42:	df 90       	pop	r13
    2a44:	cf 90       	pop	r12
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    2a46:	0c 94 9e 1b 	jmp	0x373c	; 0x373c <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2a4a:	6c 29       	or	r22, r12
    2a4c:	7d 29       	or	r23, r13
    2a4e:	8e 29       	or	r24, r14
    2a50:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2a52:	28 96       	adiw	r28, 0x08	; 8
    2a54:	0f b6       	in	r0, 0x3f	; 63
    2a56:	f8 94       	cli
    2a58:	de bf       	out	0x3e, r29	; 62
    2a5a:	0f be       	out	0x3f, r0	; 63
    2a5c:	cd bf       	out	0x3d, r28	; 61
    2a5e:	df 91       	pop	r29
    2a60:	cf 91       	pop	r28
    2a62:	1f 91       	pop	r17
    2a64:	0f 91       	pop	r16
    2a66:	ff 90       	pop	r15
    2a68:	ef 90       	pop	r14
    2a6a:	df 90       	pop	r13
    2a6c:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2a6e:	0c 94 b0 1b 	jmp	0x3760	; 0x3760 <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2a72:	0e 94 9e 1b 	call	0x373c	; 0x373c <default_layer_and>
    2a76:	c7 01       	movw	r24, r14
    2a78:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2a7a:	28 96       	adiw	r28, 0x08	; 8
    2a7c:	0f b6       	in	r0, 0x3f	; 63
    2a7e:	f8 94       	cli
    2a80:	de bf       	out	0x3e, r29	; 62
    2a82:	0f be       	out	0x3f, r0	; 63
    2a84:	cd bf       	out	0x3d, r28	; 61
    2a86:	df 91       	pop	r29
    2a88:	cf 91       	pop	r28
    2a8a:	1f 91       	pop	r17
    2a8c:	0f 91       	pop	r16
    2a8e:	ff 90       	pop	r15
    2a90:	ef 90       	pop	r14
    2a92:	df 90       	pop	r13
    2a94:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2a96:	0c 94 8c 1b 	jmp	0x3718	; 0x3718 <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    2a9a:	ff 20       	and	r15, r15
    2a9c:	19 f0       	breq	.+6      	; 0x2aa4 <process_action+0x348>
    2a9e:	84 2f       	mov	r24, r20
    2aa0:	81 70       	andi	r24, 0x01	; 1
    2aa2:	01 c0       	rjmp	.+2      	; 0x2aa6 <process_action+0x34a>
    2aa4:	86 95       	lsr	r24
    2aa6:	88 23       	and	r24, r24
    2aa8:	09 f4       	brne	.+2      	; 0x2aac <process_action+0x350>
    2aaa:	d2 c1       	rjmp	.+932    	; 0x2e50 <process_action+0x6f4>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    2aac:	26 2f       	mov	r18, r22
    2aae:	22 95       	swap	r18
    2ab0:	26 95       	lsr	r18
    2ab2:	27 70       	andi	r18, 0x07	; 7
    2ab4:	22 0f       	add	r18, r18
    2ab6:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2ab8:	86 2f       	mov	r24, r22
    2aba:	8f 70       	andi	r24, 0x0F	; 15
    2abc:	c8 2e       	mov	r12, r24
    2abe:	d1 2c       	mov	r13, r1
    2ac0:	e1 2c       	mov	r14, r1
    2ac2:	f1 2c       	mov	r15, r1
    2ac4:	02 2e       	mov	r0, r18
    2ac6:	04 c0       	rjmp	.+8      	; 0x2ad0 <process_action+0x374>
    2ac8:	cc 0c       	add	r12, r12
    2aca:	dd 1c       	adc	r13, r13
    2acc:	ee 1c       	adc	r14, r14
    2ace:	ff 1c       	adc	r15, r15
    2ad0:	0a 94       	dec	r0
    2ad2:	d2 f7       	brpl	.-12     	; 0x2ac8 <process_action+0x36c>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2ad4:	64 ff       	sbrs	r22, 4
    2ad6:	10 c0       	rjmp	.+32     	; 0x2af8 <process_action+0x39c>
    2ad8:	6f e0       	ldi	r22, 0x0F	; 15
    2ada:	70 e0       	ldi	r23, 0x00	; 0
    2adc:	80 e0       	ldi	r24, 0x00	; 0
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	04 c0       	rjmp	.+8      	; 0x2aea <process_action+0x38e>
    2ae2:	66 0f       	add	r22, r22
    2ae4:	77 1f       	adc	r23, r23
    2ae6:	88 1f       	adc	r24, r24
    2ae8:	99 1f       	adc	r25, r25
    2aea:	2a 95       	dec	r18
    2aec:	d2 f7       	brpl	.-12     	; 0x2ae2 <process_action+0x386>
    2aee:	60 95       	com	r22
    2af0:	70 95       	com	r23
    2af2:	80 95       	com	r24
    2af4:	90 95       	com	r25
    2af6:	03 c0       	rjmp	.+6      	; 0x2afe <process_action+0x3a2>
    2af8:	60 e0       	ldi	r22, 0x00	; 0
    2afa:	70 e0       	ldi	r23, 0x00	; 0
    2afc:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2afe:	24 2f       	mov	r18, r20
    2b00:	26 95       	lsr	r18
    2b02:	26 95       	lsr	r18
    2b04:	23 70       	andi	r18, 0x03	; 3
    2b06:	42 2f       	mov	r20, r18
    2b08:	50 e0       	ldi	r21, 0x00	; 0
    2b0a:	42 30       	cpi	r20, 0x02	; 2
    2b0c:	51 05       	cpc	r21, r1
    2b0e:	d1 f0       	breq	.+52     	; 0x2b44 <process_action+0x3e8>
    2b10:	43 30       	cpi	r20, 0x03	; 3
    2b12:	51 05       	cpc	r21, r1
    2b14:	59 f1       	breq	.+86     	; 0x2b6c <process_action+0x410>
    2b16:	6c 29       	or	r22, r12
    2b18:	7d 29       	or	r23, r13
    2b1a:	8e 29       	or	r24, r14
    2b1c:	9f 29       	or	r25, r15
    2b1e:	41 30       	cpi	r20, 0x01	; 1
    2b20:	51 05       	cpc	r21, r1
    2b22:	41 f1       	breq	.+80     	; 0x2b74 <process_action+0x418>
            break;
#endif
        default:
            break;
    }
}
    2b24:	28 96       	adiw	r28, 0x08	; 8
    2b26:	0f b6       	in	r0, 0x3f	; 63
    2b28:	f8 94       	cli
    2b2a:	de bf       	out	0x3e, r29	; 62
    2b2c:	0f be       	out	0x3f, r0	; 63
    2b2e:	cd bf       	out	0x3d, r28	; 61
    2b30:	df 91       	pop	r29
    2b32:	cf 91       	pop	r28
    2b34:	1f 91       	pop	r17
    2b36:	0f 91       	pop	r16
    2b38:	ff 90       	pop	r15
    2b3a:	ef 90       	pop	r14
    2b3c:	df 90       	pop	r13
    2b3e:	cf 90       	pop	r12
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    2b40:	0c 94 3d 1c 	jmp	0x387a	; 0x387a <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2b44:	6c 29       	or	r22, r12
    2b46:	7d 29       	or	r23, r13
    2b48:	8e 29       	or	r24, r14
    2b4a:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2b4c:	28 96       	adiw	r28, 0x08	; 8
    2b4e:	0f b6       	in	r0, 0x3f	; 63
    2b50:	f8 94       	cli
    2b52:	de bf       	out	0x3e, r29	; 62
    2b54:	0f be       	out	0x3f, r0	; 63
    2b56:	cd bf       	out	0x3d, r28	; 61
    2b58:	df 91       	pop	r29
    2b5a:	cf 91       	pop	r28
    2b5c:	1f 91       	pop	r17
    2b5e:	0f 91       	pop	r16
    2b60:	ff 90       	pop	r15
    2b62:	ef 90       	pop	r14
    2b64:	df 90       	pop	r13
    2b66:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2b68:	0c 94 4f 1c 	jmp	0x389e	; 0x389e <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2b6c:	0e 94 3d 1c 	call	0x387a	; 0x387a <layer_and>
    2b70:	c7 01       	movw	r24, r14
    2b72:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2b74:	28 96       	adiw	r28, 0x08	; 8
    2b76:	0f b6       	in	r0, 0x3f	; 63
    2b78:	f8 94       	cli
    2b7a:	de bf       	out	0x3e, r29	; 62
    2b7c:	0f be       	out	0x3f, r0	; 63
    2b7e:	cd bf       	out	0x3d, r28	; 61
    2b80:	df 91       	pop	r29
    2b82:	cf 91       	pop	r28
    2b84:	1f 91       	pop	r17
    2b86:	0f 91       	pop	r16
    2b88:	ff 90       	pop	r15
    2b8a:	ef 90       	pop	r14
    2b8c:	df 90       	pop	r13
    2b8e:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2b90:	0c 94 2b 1c 	jmp	0x3856	; 0x3856 <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2b94:	60 3f       	cpi	r22, 0xF0	; 240
    2b96:	d9 f1       	breq	.+118    	; 0x2c0e <process_action+0x4b2>
    2b98:	28 f4       	brcc	.+10     	; 0x2ba4 <process_action+0x448>
    2b9a:	80 e4       	ldi	r24, 0x40	; 64
    2b9c:	86 0f       	add	r24, r22
    2b9e:	80 32       	cpi	r24, 0x20	; 32
    2ba0:	50 f0       	brcs	.+20     	; 0x2bb6 <process_action+0x45a>
    2ba2:	9c c0       	rjmp	.+312    	; 0x2cdc <process_action+0x580>
    2ba4:	62 3f       	cpi	r22, 0xF2	; 242
    2ba6:	09 f4       	brne	.+2      	; 0x2baa <process_action+0x44e>
    2ba8:	61 c0       	rjmp	.+194    	; 0x2c6c <process_action+0x510>
    2baa:	08 f4       	brcc	.+2      	; 0x2bae <process_action+0x452>
    2bac:	4b c0       	rjmp	.+150    	; 0x2c44 <process_action+0x4e8>
    2bae:	63 3f       	cpi	r22, 0xF3	; 243
    2bb0:	09 f4       	brne	.+2      	; 0x2bb4 <process_action+0x458>
    2bb2:	70 c0       	rjmp	.+224    	; 0x2c94 <process_action+0x538>
    2bb4:	93 c0       	rjmp	.+294    	; 0x2cdc <process_action+0x580>
    2bb6:	16 2f       	mov	r17, r22
    2bb8:	10 71       	andi	r17, 0x10	; 16
    2bba:	84 2f       	mov	r24, r20
    2bbc:	8f 71       	andi	r24, 0x1F	; 31
                case 0xc0 ... 0xdf:
                    /* layer On/Off with modifiers */
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
    2bbe:	68 87       	std	Y+8, r22	; 0x08
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
                case 0xc0 ... 0xdf:
                    /* layer On/Off with modifiers */
                    if (event.pressed) {
    2bc0:	ff 20       	and	r15, r15
    2bc2:	59 f0       	breq	.+22     	; 0x2bda <process_action+0x47e>
                        layer_on(action.layer_tap.val);
    2bc4:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <layer_on>
                        register_mods((action.layer_tap.code & 0x10) ?
    2bc8:	68 85       	ldd	r22, Y+8	; 0x08
    2bca:	86 2f       	mov	r24, r22
    2bcc:	11 23       	and	r17, r17
    2bce:	19 f0       	breq	.+6      	; 0x2bd6 <process_action+0x47a>
    2bd0:	82 95       	swap	r24
    2bd2:	80 7f       	andi	r24, 0xF0	; 240
    2bd4:	75 ce       	rjmp	.-790    	; 0x28c0 <process_action+0x164>
    2bd6:	8f 70       	andi	r24, 0x0F	; 15
    2bd8:	73 ce       	rjmp	.-794    	; 0x28c0 <process_action+0x164>
                                (action.layer_tap.code & 0x0f) << 4 :
                                (action.layer_tap.code & 0x0f));
                    } else {
                        layer_off(action.layer_tap.val);
    2bda:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <layer_off>
                        unregister_mods((action.layer_tap.code & 0x10) ?
    2bde:	68 85       	ldd	r22, Y+8	; 0x08
    2be0:	86 2f       	mov	r24, r22
    2be2:	11 23       	and	r17, r17
    2be4:	19 f0       	breq	.+6      	; 0x2bec <process_action+0x490>
    2be6:	82 95       	swap	r24
    2be8:	80 7f       	andi	r24, 0xF0	; 240
    2bea:	01 c0       	rjmp	.+2      	; 0x2bee <process_action+0x492>
    2bec:	8f 70       	andi	r24, 0x0F	; 15
            break;
#endif
        default:
            break;
    }
}
    2bee:	28 96       	adiw	r28, 0x08	; 8
    2bf0:	0f b6       	in	r0, 0x3f	; 63
    2bf2:	f8 94       	cli
    2bf4:	de bf       	out	0x3e, r29	; 62
    2bf6:	0f be       	out	0x3f, r0	; 63
    2bf8:	cd bf       	out	0x3d, r28	; 61
    2bfa:	df 91       	pop	r29
    2bfc:	cf 91       	pop	r28
    2bfe:	1f 91       	pop	r17
    2c00:	0f 91       	pop	r16
    2c02:	ff 90       	pop	r15
    2c04:	ef 90       	pop	r14
    2c06:	df 90       	pop	r13
    2c08:	cf 90       	pop	r12
                        register_mods((action.layer_tap.code & 0x10) ?
                                (action.layer_tap.code & 0x0f) << 4 :
                                (action.layer_tap.code & 0x0f));
                    } else {
                        layer_off(action.layer_tap.val);
                        unregister_mods((action.layer_tap.code & 0x10) ?
    2c0a:	0c 94 a7 13 	jmp	0x274e	; 0x274e <unregister_mods>
                                (action.layer_tap.code & 0x0f));
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    2c0e:	ff 20       	and	r15, r15
    2c10:	a9 f0       	breq	.+42     	; 0x2c3c <process_action+0x4e0>
                        if (tap_count < TAPPING_TOGGLE) {
    2c12:	25 30       	cpi	r18, 0x05	; 5
    2c14:	08 f0       	brcs	.+2      	; 0x2c18 <process_action+0x4bc>
    2c16:	1c c1       	rjmp	.+568    	; 0x2e50 <process_action+0x6f4>
                            layer_invert(action.layer_tap.val);
    2c18:	84 2f       	mov	r24, r20
    2c1a:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2c1c:	28 96       	adiw	r28, 0x08	; 8
    2c1e:	0f b6       	in	r0, 0x3f	; 63
    2c20:	f8 94       	cli
    2c22:	de bf       	out	0x3e, r29	; 62
    2c24:	0f be       	out	0x3f, r0	; 63
    2c26:	cd bf       	out	0x3d, r28	; 61
    2c28:	df 91       	pop	r29
    2c2a:	cf 91       	pop	r28
    2c2c:	1f 91       	pop	r17
    2c2e:	0f 91       	pop	r16
    2c30:	ff 90       	pop	r15
    2c32:	ef 90       	pop	r14
    2c34:	df 90       	pop	r13
    2c36:	cf 90       	pop	r12
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    2c38:	0c 94 10 1c 	jmp	0x3820	; 0x3820 <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    2c3c:	26 30       	cpi	r18, 0x06	; 6
    2c3e:	08 f0       	brcs	.+2      	; 0x2c42 <process_action+0x4e6>
    2c40:	07 c1       	rjmp	.+526    	; 0x2e50 <process_action+0x6f4>
    2c42:	ea cf       	rjmp	.-44     	; 0x2c18 <process_action+0x4bc>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2c44:	ff 20       	and	r15, r15
    2c46:	a1 f0       	breq	.+40     	; 0x2c70 <process_action+0x514>
    2c48:	84 2f       	mov	r24, r20
    2c4a:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2c4c:	28 96       	adiw	r28, 0x08	; 8
    2c4e:	0f b6       	in	r0, 0x3f	; 63
    2c50:	f8 94       	cli
    2c52:	de bf       	out	0x3e, r29	; 62
    2c54:	0f be       	out	0x3f, r0	; 63
    2c56:	cd bf       	out	0x3d, r28	; 61
    2c58:	df 91       	pop	r29
    2c5a:	cf 91       	pop	r28
    2c5c:	1f 91       	pop	r17
    2c5e:	0f 91       	pop	r16
    2c60:	ff 90       	pop	r15
    2c62:	ef 90       	pop	r14
    2c64:	df 90       	pop	r13
    2c66:	cf 90       	pop	r12
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2c68:	0c 94 d6 1b 	jmp	0x37ac	; 0x37ac <layer_on>
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    2c6c:	ff 20       	and	r15, r15
    2c6e:	61 f3       	breq	.-40     	; 0x2c48 <process_action+0x4ec>
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2c70:	84 2f       	mov	r24, r20
    2c72:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2c74:	28 96       	adiw	r28, 0x08	; 8
    2c76:	0f b6       	in	r0, 0x3f	; 63
    2c78:	f8 94       	cli
    2c7a:	de bf       	out	0x3e, r29	; 62
    2c7c:	0f be       	out	0x3f, r0	; 63
    2c7e:	cd bf       	out	0x3d, r28	; 61
    2c80:	df 91       	pop	r29
    2c82:	cf 91       	pop	r28
    2c84:	1f 91       	pop	r17
    2c86:	0f 91       	pop	r16
    2c88:	ff 90       	pop	r15
    2c8a:	ef 90       	pop	r14
    2c8c:	df 90       	pop	r13
    2c8e:	cf 90       	pop	r12
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2c90:	0c 94 f1 1b 	jmp	0x37e2	; 0x37e2 <layer_off>
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2c94:	ff 20       	and	r15, r15
    2c96:	91 f0       	breq	.+36     	; 0x2cbc <process_action+0x560>
    2c98:	84 2f       	mov	r24, r20
    2c9a:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2c9c:	28 96       	adiw	r28, 0x08	; 8
    2c9e:	0f b6       	in	r0, 0x3f	; 63
    2ca0:	f8 94       	cli
    2ca2:	de bf       	out	0x3e, r29	; 62
    2ca4:	0f be       	out	0x3f, r0	; 63
    2ca6:	cd bf       	out	0x3d, r28	; 61
    2ca8:	df 91       	pop	r29
    2caa:	cf 91       	pop	r28
    2cac:	1f 91       	pop	r17
    2cae:	0f 91       	pop	r16
    2cb0:	ff 90       	pop	r15
    2cb2:	ef 90       	pop	r14
    2cb4:	df 90       	pop	r13
    2cb6:	cf 90       	pop	r12
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2cb8:	0c 94 c7 1b 	jmp	0x378e	; 0x378e <layer_move>
            break;
#endif
        default:
            break;
    }
}
    2cbc:	28 96       	adiw	r28, 0x08	; 8
    2cbe:	0f b6       	in	r0, 0x3f	; 63
    2cc0:	f8 94       	cli
    2cc2:	de bf       	out	0x3e, r29	; 62
    2cc4:	0f be       	out	0x3f, r0	; 63
    2cc6:	cd bf       	out	0x3d, r28	; 61
    2cc8:	df 91       	pop	r29
    2cca:	cf 91       	pop	r28
    2ccc:	1f 91       	pop	r17
    2cce:	0f 91       	pop	r16
    2cd0:	ff 90       	pop	r15
    2cd2:	ef 90       	pop	r14
    2cd4:	df 90       	pop	r13
    2cd6:	cf 90       	pop	r12
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    2cd8:	0c 94 c2 1b 	jmp	0x3784	; 0x3784 <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    2cdc:	ff 20       	and	r15, r15
    2cde:	a1 f0       	breq	.+40     	; 0x2d08 <process_action+0x5ac>
                        if (tap_count > 0) {
    2ce0:	22 23       	and	r18, r18
    2ce2:	09 f4       	brne	.+2      	; 0x2ce6 <process_action+0x58a>
    2ce4:	b1 cf       	rjmp	.-158    	; 0x2c48 <process_action+0x4ec>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2ce6:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    2ce8:	28 96       	adiw	r28, 0x08	; 8
    2cea:	0f b6       	in	r0, 0x3f	; 63
    2cec:	f8 94       	cli
    2cee:	de bf       	out	0x3e, r29	; 62
    2cf0:	0f be       	out	0x3f, r0	; 63
    2cf2:	cd bf       	out	0x3d, r28	; 61
    2cf4:	df 91       	pop	r29
    2cf6:	cf 91       	pop	r28
    2cf8:	1f 91       	pop	r17
    2cfa:	0f 91       	pop	r16
    2cfc:	ff 90       	pop	r15
    2cfe:	ef 90       	pop	r14
    2d00:	df 90       	pop	r13
    2d02:	cf 90       	pop	r12
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2d04:	0c 94 83 12 	jmp	0x2506	; 0x2506 <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    2d08:	22 23       	and	r18, r18
    2d0a:	09 f4       	brne	.+2      	; 0x2d0e <process_action+0x5b2>
    2d0c:	b1 cf       	rjmp	.-158    	; 0x2c70 <process_action+0x514>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2d0e:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    2d10:	28 96       	adiw	r28, 0x08	; 8
    2d12:	0f b6       	in	r0, 0x3f	; 63
    2d14:	f8 94       	cli
    2d16:	de bf       	out	0x3e, r29	; 62
    2d18:	0f be       	out	0x3f, r0	; 63
    2d1a:	cd bf       	out	0x3d, r28	; 61
    2d1c:	df 91       	pop	r29
    2d1e:	cf 91       	pop	r28
    2d20:	1f 91       	pop	r17
    2d22:	0f 91       	pop	r16
    2d24:	ff 90       	pop	r15
    2d26:	ef 90       	pop	r14
    2d28:	df 90       	pop	r13
    2d2a:	cf 90       	pop	r12
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2d2c:	0c 94 32 13 	jmp	0x2664	; 0x2664 <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2d30:	4f 70       	andi	r20, 0x0F	; 15
    2d32:	c8 01       	movw	r24, r16
    2d34:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    2d38:	28 96       	adiw	r28, 0x08	; 8
    2d3a:	0f b6       	in	r0, 0x3f	; 63
    2d3c:	f8 94       	cli
    2d3e:	de bf       	out	0x3e, r29	; 62
    2d40:	0f be       	out	0x3f, r0	; 63
    2d42:	cd bf       	out	0x3d, r28	; 61
    2d44:	df 91       	pop	r29
    2d46:	cf 91       	pop	r28
    2d48:	1f 91       	pop	r17
    2d4a:	0f 91       	pop	r16
    2d4c:	ff 90       	pop	r15
    2d4e:	ef 90       	pop	r14
    2d50:	df 90       	pop	r13
    2d52:	cf 90       	pop	r12
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2d54:	0c 94 d4 1a 	jmp	0x35a8	; 0x35a8 <action_macro_play>
            break;
#endif
#ifdef BACKLIGHT_ENABLE
        case ACT_BACKLIGHT:
            if (!event.pressed) {
    2d58:	f1 10       	cpse	r15, r1
    2d5a:	7a c0       	rjmp	.+244    	; 0x2e50 <process_action+0x6f4>
                switch (action.backlight.opt) {
    2d5c:	94 2f       	mov	r25, r20
    2d5e:	9f 70       	andi	r25, 0x0F	; 15
    2d60:	49 2f       	mov	r20, r25
    2d62:	50 e0       	ldi	r21, 0x00	; 0
    2d64:	42 30       	cpi	r20, 0x02	; 2
    2d66:	51 05       	cpc	r21, r1
    2d68:	09 f4       	brne	.+2      	; 0x2d6c <process_action+0x610>
    2d6a:	40 c0       	rjmp	.+128    	; 0x2dec <process_action+0x690>
    2d6c:	bc f4       	brge	.+46     	; 0x2d9c <process_action+0x640>
    2d6e:	41 15       	cp	r20, r1
    2d70:	51 05       	cpc	r21, r1
    2d72:	61 f1       	breq	.+88     	; 0x2dcc <process_action+0x670>
    2d74:	41 30       	cpi	r20, 0x01	; 1
    2d76:	51 05       	cpc	r21, r1
    2d78:	09 f0       	breq	.+2      	; 0x2d7c <process_action+0x620>
    2d7a:	6a c0       	rjmp	.+212    	; 0x2e50 <process_action+0x6f4>
            break;
#endif
        default:
            break;
    }
}
    2d7c:	28 96       	adiw	r28, 0x08	; 8
    2d7e:	0f b6       	in	r0, 0x3f	; 63
    2d80:	f8 94       	cli
    2d82:	de bf       	out	0x3e, r29	; 62
    2d84:	0f be       	out	0x3f, r0	; 63
    2d86:	cd bf       	out	0x3d, r28	; 61
    2d88:	df 91       	pop	r29
    2d8a:	cf 91       	pop	r28
    2d8c:	1f 91       	pop	r17
    2d8e:	0f 91       	pop	r16
    2d90:	ff 90       	pop	r15
    2d92:	ef 90       	pop	r14
    2d94:	df 90       	pop	r13
    2d96:	cf 90       	pop	r12
                switch (action.backlight.opt) {
                    case BACKLIGHT_INCREASE:
                        backlight_increase();
                        break;
                    case BACKLIGHT_DECREASE:
                        backlight_decrease();
    2d98:	0c 94 2d 29 	jmp	0x525a	; 0x525a <backlight_decrease>
            break;
#endif
#ifdef BACKLIGHT_ENABLE
        case ACT_BACKLIGHT:
            if (!event.pressed) {
                switch (action.backlight.opt) {
    2d9c:	43 30       	cpi	r20, 0x03	; 3
    2d9e:	51 05       	cpc	r21, r1
    2da0:	a9 f1       	breq	.+106    	; 0x2e0c <process_action+0x6b0>
    2da2:	44 30       	cpi	r20, 0x04	; 4
    2da4:	51 05       	cpc	r21, r1
    2da6:	09 f0       	breq	.+2      	; 0x2daa <process_action+0x64e>
    2da8:	53 c0       	rjmp	.+166    	; 0x2e50 <process_action+0x6f4>
                        break;
                    case BACKLIGHT_STEP:
                        backlight_step();
                        break;
                    case BACKLIGHT_LEVEL:
                        backlight_level(action.backlight.level);
    2daa:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    2dac:	28 96       	adiw	r28, 0x08	; 8
    2dae:	0f b6       	in	r0, 0x3f	; 63
    2db0:	f8 94       	cli
    2db2:	de bf       	out	0x3e, r29	; 62
    2db4:	0f be       	out	0x3f, r0	; 63
    2db6:	cd bf       	out	0x3d, r28	; 61
    2db8:	df 91       	pop	r29
    2dba:	cf 91       	pop	r28
    2dbc:	1f 91       	pop	r17
    2dbe:	0f 91       	pop	r16
    2dc0:	ff 90       	pop	r15
    2dc2:	ef 90       	pop	r14
    2dc4:	df 90       	pop	r13
    2dc6:	cf 90       	pop	r12
                        break;
                    case BACKLIGHT_STEP:
                        backlight_step();
                        break;
                    case BACKLIGHT_LEVEL:
                        backlight_level(action.backlight.level);
    2dc8:	0c 94 ba 29 	jmp	0x5374	; 0x5374 <backlight_level>
            break;
#endif
        default:
            break;
    }
}
    2dcc:	28 96       	adiw	r28, 0x08	; 8
    2dce:	0f b6       	in	r0, 0x3f	; 63
    2dd0:	f8 94       	cli
    2dd2:	de bf       	out	0x3e, r29	; 62
    2dd4:	0f be       	out	0x3f, r0	; 63
    2dd6:	cd bf       	out	0x3d, r28	; 61
    2dd8:	df 91       	pop	r29
    2dda:	cf 91       	pop	r28
    2ddc:	1f 91       	pop	r17
    2dde:	0f 91       	pop	r16
    2de0:	ff 90       	pop	r15
    2de2:	ef 90       	pop	r14
    2de4:	df 90       	pop	r13
    2de6:	cf 90       	pop	r12
#ifdef BACKLIGHT_ENABLE
        case ACT_BACKLIGHT:
            if (!event.pressed) {
                switch (action.backlight.opt) {
                    case BACKLIGHT_INCREASE:
                        backlight_increase();
    2de8:	0c 94 03 29 	jmp	0x5206	; 0x5206 <backlight_increase>
            break;
#endif
        default:
            break;
    }
}
    2dec:	28 96       	adiw	r28, 0x08	; 8
    2dee:	0f b6       	in	r0, 0x3f	; 63
    2df0:	f8 94       	cli
    2df2:	de bf       	out	0x3e, r29	; 62
    2df4:	0f be       	out	0x3f, r0	; 63
    2df6:	cd bf       	out	0x3d, r28	; 61
    2df8:	df 91       	pop	r29
    2dfa:	cf 91       	pop	r28
    2dfc:	1f 91       	pop	r17
    2dfe:	0f 91       	pop	r16
    2e00:	ff 90       	pop	r15
    2e02:	ef 90       	pop	r14
    2e04:	df 90       	pop	r13
    2e06:	cf 90       	pop	r12
                        break;
                    case BACKLIGHT_DECREASE:
                        backlight_decrease();
                        break;
                    case BACKLIGHT_TOGGLE:
                        backlight_toggle();
    2e08:	0c 94 5c 29 	jmp	0x52b8	; 0x52b8 <backlight_toggle>
            break;
#endif
        default:
            break;
    }
}
    2e0c:	28 96       	adiw	r28, 0x08	; 8
    2e0e:	0f b6       	in	r0, 0x3f	; 63
    2e10:	f8 94       	cli
    2e12:	de bf       	out	0x3e, r29	; 62
    2e14:	0f be       	out	0x3f, r0	; 63
    2e16:	cd bf       	out	0x3d, r28	; 61
    2e18:	df 91       	pop	r29
    2e1a:	cf 91       	pop	r28
    2e1c:	1f 91       	pop	r17
    2e1e:	0f 91       	pop	r16
    2e20:	ff 90       	pop	r15
    2e22:	ef 90       	pop	r14
    2e24:	df 90       	pop	r13
    2e26:	cf 90       	pop	r12
                        break;
                    case BACKLIGHT_TOGGLE:
                        backlight_toggle();
                        break;
                    case BACKLIGHT_STEP:
                        backlight_step();
    2e28:	0c 94 82 29 	jmp	0x5304	; 0x5304 <backlight_step>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2e2c:	4f 70       	andi	r20, 0x0F	; 15
    2e2e:	c8 01       	movw	r24, r16
            break;
#endif
        default:
            break;
    }
}
    2e30:	28 96       	adiw	r28, 0x08	; 8
    2e32:	0f b6       	in	r0, 0x3f	; 63
    2e34:	f8 94       	cli
    2e36:	de bf       	out	0x3e, r29	; 62
    2e38:	0f be       	out	0x3f, r0	; 63
    2e3a:	cd bf       	out	0x3d, r28	; 61
    2e3c:	df 91       	pop	r29
    2e3e:	cf 91       	pop	r28
    2e40:	1f 91       	pop	r17
    2e42:	0f 91       	pop	r16
    2e44:	ff 90       	pop	r15
    2e46:	ef 90       	pop	r14
    2e48:	df 90       	pop	r13
    2e4a:	cf 90       	pop	r12
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2e4c:	0c 94 03 1f 	jmp	0x3e06	; 0x3e06 <action_function>
            break;
#endif
        default:
            break;
    }
}
    2e50:	28 96       	adiw	r28, 0x08	; 8
    2e52:	0f b6       	in	r0, 0x3f	; 63
    2e54:	f8 94       	cli
    2e56:	de bf       	out	0x3e, r29	; 62
    2e58:	0f be       	out	0x3f, r0	; 63
    2e5a:	cd bf       	out	0x3d, r28	; 61
    2e5c:	df 91       	pop	r29
    2e5e:	cf 91       	pop	r28
    2e60:	1f 91       	pop	r17
    2e62:	0f 91       	pop	r16
    2e64:	ff 90       	pop	r15
    2e66:	ef 90       	pop	r14
    2e68:	df 90       	pop	r13
    2e6a:	cf 90       	pop	r12
    2e6c:	08 95       	ret

00002e6e <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    2e6e:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <clear_weak_mods>
    clear_keys();
    2e72:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <clear_keys>
    send_keyboard_report();
    2e76:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    2e7a:	0e 94 8c 23 	call	0x4718	; 0x4718 <mousekey_clear>
    mousekey_send();
    2e7e:	0e 94 5e 22 	call	0x44bc	; 0x44bc <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    2e82:	80 e0       	ldi	r24, 0x00	; 0
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	0e 94 18 11 	call	0x2230	; 0x2230 <host_system_send>
    host_consumer_send(0);
    2e8a:	80 e0       	ldi	r24, 0x00	; 0
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	0c 94 46 11 	jmp	0x228c	; 0x228c <host_consumer_send>

00002e92 <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    2e92:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <clear_mods>
    clear_keyboard_but_mods();
    2e96:	0c 94 37 17 	jmp	0x2e6e	; 0x2e6e <clear_keyboard_but_mods>

00002e9a <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    2e9a:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <layer_switch_get_action>

    switch (action.kind.id) {
    2e9e:	29 2f       	mov	r18, r25
    2ea0:	22 95       	swap	r18
    2ea2:	2f 70       	andi	r18, 0x0F	; 15
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	2c 30       	cpi	r18, 0x0C	; 12
    2ea8:	31 05       	cpc	r19, r1
    2eaa:	4c f4       	brge	.+18     	; 0x2ebe <is_tap_key+0x24>
    2eac:	2a 30       	cpi	r18, 0x0A	; 10
    2eae:	31 05       	cpc	r19, r1
    2eb0:	c4 f4       	brge	.+48     	; 0x2ee2 <is_tap_key+0x48>
    2eb2:	22 50       	subi	r18, 0x02	; 2
    2eb4:	31 09       	sbc	r19, r1
    2eb6:	22 30       	cpi	r18, 0x02	; 2
    2eb8:	31 05       	cpc	r19, r1
    2eba:	40 f0       	brcs	.+16     	; 0x2ecc <is_tap_key+0x32>
    2ebc:	21 c0       	rjmp	.+66     	; 0x2f00 <is_tap_key+0x66>
    2ebe:	2c 30       	cpi	r18, 0x0C	; 12
    2ec0:	31 05       	cpc	r19, r1
    2ec2:	d1 f0       	breq	.+52     	; 0x2ef8 <is_tap_key+0x5e>
    2ec4:	2f 30       	cpi	r18, 0x0F	; 15
    2ec6:	31 05       	cpc	r19, r1
    2ec8:	b9 f0       	breq	.+46     	; 0x2ef8 <is_tap_key+0x5e>
    2eca:	1a c0       	rjmp	.+52     	; 0x2f00 <is_tap_key+0x66>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            switch (action.key.code) {
    2ecc:	85 3a       	cpi	r24, 0xA5	; 165
    2ece:	28 f4       	brcc	.+10     	; 0x2eda <is_tap_key+0x40>
    2ed0:	84 30       	cpi	r24, 0x04	; 4
    2ed2:	c0 f4       	brcc	.+48     	; 0x2f04 <is_tap_key+0x6a>
    2ed4:	82 30       	cpi	r24, 0x02	; 2
    2ed6:	28 f4       	brcc	.+10     	; 0x2ee2 <is_tap_key+0x48>
    2ed8:	15 c0       	rjmp	.+42     	; 0x2f04 <is_tap_key+0x6a>
    2eda:	90 e2       	ldi	r25, 0x20	; 32
    2edc:	98 0f       	add	r25, r24
    2ede:	98 30       	cpi	r25, 0x08	; 8
    2ee0:	88 f0       	brcs	.+34     	; 0x2f04 <is_tap_key+0x6a>
                case KC_LCTRL ... KC_RGUI:              // tap key
                    return true;
            }
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2ee2:	88 3e       	cpi	r24, 0xE8	; 232
    2ee4:	30 f4       	brcc	.+12     	; 0x2ef2 <is_tap_key+0x58>
    2ee6:	80 3e       	cpi	r24, 0xE0	; 224
    2ee8:	68 f4       	brcc	.+26     	; 0x2f04 <is_tap_key+0x6a>
    2eea:	84 50       	subi	r24, 0x04	; 4
    2eec:	81 3a       	cpi	r24, 0xA1	; 161
    2eee:	40 f4       	brcc	.+16     	; 0x2f00 <is_tap_key+0x66>
    2ef0:	09 c0       	rjmp	.+18     	; 0x2f04 <is_tap_key+0x6a>
    2ef2:	80 3f       	cpi	r24, 0xF0	; 240
    2ef4:	29 f4       	brne	.+10     	; 0x2f00 <is_tap_key+0x66>
    2ef6:	06 c0       	rjmp	.+12     	; 0x2f04 <is_tap_key+0x6a>
                    return true;
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    2ef8:	93 fb       	bst	r25, 3
    2efa:	88 27       	eor	r24, r24
    2efc:	80 f9       	bld	r24, 0
    2efe:	08 95       	ret
            return false;
    }
    return false;
    2f00:	80 e0       	ldi	r24, 0x00	; 0
    2f02:	08 95       	ret
                case 0xc0 ... 0xdf:         // with modifiers
                    return false;
                case KC_A ... KC_EXSEL:     // tap key
                case KC_LCTRL ... KC_RGUI:  // tap key
                case OP_TAP_TOGGLE:
                    return true;
    2f04:	81 e0       	ldi	r24, 0x01	; 1
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    2f06:	08 95       	ret

00002f08 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    2f08:	cf 93       	push	r28
    2f0a:	df 93       	push	r29
    2f0c:	00 d0       	rcall	.+0      	; 0x2f0e <debug_event+0x6>
    2f0e:	00 d0       	rcall	.+0      	; 0x2f10 <debug_event+0x8>
    2f10:	1f 92       	push	r1
    2f12:	cd b7       	in	r28, 0x3d	; 61
    2f14:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    2f16:	0f 90       	pop	r0
    2f18:	0f 90       	pop	r0
    2f1a:	0f 90       	pop	r0
    2f1c:	0f 90       	pop	r0
    2f1e:	0f 90       	pop	r0
    2f20:	df 91       	pop	r29
    2f22:	cf 91       	pop	r28
    2f24:	08 95       	ret

00002f26 <debug_record>:

void debug_record(keyrecord_t record)
{
    2f26:	cf 93       	push	r28
    2f28:	df 93       	push	r29
    2f2a:	00 d0       	rcall	.+0      	; 0x2f2c <debug_record+0x6>
    2f2c:	00 d0       	rcall	.+0      	; 0x2f2e <debug_record+0x8>
    2f2e:	00 d0       	rcall	.+0      	; 0x2f30 <debug_record+0xa>
    2f30:	cd b7       	in	r28, 0x3d	; 61
    2f32:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    2f34:	26 96       	adiw	r28, 0x06	; 6
    2f36:	0f b6       	in	r0, 0x3f	; 63
    2f38:	f8 94       	cli
    2f3a:	de bf       	out	0x3e, r29	; 62
    2f3c:	0f be       	out	0x3f, r0	; 63
    2f3e:	cd bf       	out	0x3d, r28	; 61
    2f40:	df 91       	pop	r29
    2f42:	cf 91       	pop	r28
    2f44:	08 95       	ret

00002f46 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    2f46:	1f 93       	push	r17
    2f48:	cf 93       	push	r28
    2f4a:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2f4c:	c0 91 76 01 	lds	r28, 0x0176
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2f50:	16 e0       	ldi	r17, 0x06	; 6
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2f52:	80 91 77 01 	lds	r24, 0x0177
    2f56:	c8 17       	cp	r28, r24
    2f58:	99 f0       	breq	.+38     	; 0x2f80 <debug_waiting_buffer+0x3a>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2f5a:	d0 e0       	ldi	r29, 0x00	; 0
    2f5c:	1c 9f       	mul	r17, r28
    2f5e:	f0 01       	movw	r30, r0
    2f60:	1d 9f       	mul	r17, r29
    2f62:	f0 0d       	add	r31, r0
    2f64:	11 24       	eor	r1, r1
    2f66:	e8 58       	subi	r30, 0x88	; 136
    2f68:	fe 4f       	sbci	r31, 0xFE	; 254
    2f6a:	40 81       	ld	r20, Z
    2f6c:	51 81       	ldd	r21, Z+1	; 0x01
    2f6e:	62 81       	ldd	r22, Z+2	; 0x02
    2f70:	73 81       	ldd	r23, Z+3	; 0x03
    2f72:	84 81       	ldd	r24, Z+4	; 0x04
    2f74:	95 81       	ldd	r25, Z+5	; 0x05
    2f76:	0e 94 93 17 	call	0x2f26	; 0x2f26 <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2f7a:	21 96       	adiw	r28, 0x01	; 1
    2f7c:	c7 70       	andi	r28, 0x07	; 7
    2f7e:	e9 cf       	rjmp	.-46     	; 0x2f52 <debug_waiting_buffer+0xc>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    2f80:	df 91       	pop	r29
    2f82:	cf 91       	pop	r28
    2f84:	1f 91       	pop	r17
    2f86:	08 95       	ret

00002f88 <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    2f88:	40 91 a8 01 	lds	r20, 0x01A8
    2f8c:	50 91 a9 01 	lds	r21, 0x01A9
    2f90:	60 91 aa 01 	lds	r22, 0x01AA
    2f94:	70 91 ab 01 	lds	r23, 0x01AB
    2f98:	80 91 ac 01 	lds	r24, 0x01AC
    2f9c:	90 91 ad 01 	lds	r25, 0x01AD
    2fa0:	0c 94 93 17 	jmp	0x2f26	; 0x2f26 <debug_record>

00002fa4 <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    2fa4:	cf 93       	push	r28
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    2fa6:	80 91 ad 01 	lds	r24, 0x01AD
    2faa:	82 95       	swap	r24
    2fac:	8f 70       	andi	r24, 0x0F	; 15
    2fae:	09 f0       	breq	.+2      	; 0x2fb2 <waiting_buffer_scan_tap+0xe>
    2fb0:	5f c0       	rjmp	.+190    	; 0x3070 <waiting_buffer_scan_tap+0xcc>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    2fb2:	80 91 aa 01 	lds	r24, 0x01AA
    2fb6:	88 23       	and	r24, r24
    2fb8:	09 f4       	brne	.+2      	; 0x2fbc <waiting_buffer_scan_tap+0x18>
    2fba:	5a c0       	rjmp	.+180    	; 0x3070 <waiting_buffer_scan_tap+0xcc>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2fbc:	20 91 76 01 	lds	r18, 0x0176
    2fc0:	a0 91 77 01 	lds	r26, 0x0177
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2fc4:	60 91 a8 01 	lds	r22, 0x01A8
    2fc8:	70 91 a9 01 	lds	r23, 0x01A9
    2fcc:	80 91 ab 01 	lds	r24, 0x01AB
    2fd0:	90 91 ac 01 	lds	r25, 0x01AC
    2fd4:	31 e0       	ldi	r19, 0x01	; 1
    2fd6:	6f 3f       	cpi	r22, 0xFF	; 255
    2fd8:	09 f0       	breq	.+2      	; 0x2fdc <waiting_buffer_scan_tap+0x38>
    2fda:	30 e0       	ldi	r19, 0x00	; 0
    2fdc:	b3 2f       	mov	r27, r19
    2fde:	c6 e0       	ldi	r28, 0x06	; 6
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2fe0:	2a 17       	cp	r18, r26
    2fe2:	09 f4       	brne	.+2      	; 0x2fe6 <waiting_buffer_scan_tap+0x42>
    2fe4:	45 c0       	rjmp	.+138    	; 0x3070 <waiting_buffer_scan_tap+0xcc>
    2fe6:	00 97       	sbiw	r24, 0x00	; 0
    2fe8:	21 f0       	breq	.+8      	; 0x2ff2 <waiting_buffer_scan_tap+0x4e>
    2fea:	7f 3f       	cpi	r23, 0xFF	; 255
    2fec:	21 f4       	brne	.+8      	; 0x2ff6 <waiting_buffer_scan_tap+0x52>
    2fee:	4b 2f       	mov	r20, r27
    2ff0:	03 c0       	rjmp	.+6      	; 0x2ff8 <waiting_buffer_scan_tap+0x54>
    2ff2:	41 e0       	ldi	r20, 0x01	; 1
    2ff4:	01 c0       	rjmp	.+2      	; 0x2ff8 <waiting_buffer_scan_tap+0x54>
    2ff6:	40 e0       	ldi	r20, 0x00	; 0
    2ff8:	30 e0       	ldi	r19, 0x00	; 0
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2ffa:	40 fd       	sbrc	r20, 0
    2ffc:	35 c0       	rjmp	.+106    	; 0x3068 <waiting_buffer_scan_tap+0xc4>
    2ffe:	c2 9f       	mul	r28, r18
    3000:	f0 01       	movw	r30, r0
    3002:	c3 9f       	mul	r28, r19
    3004:	f0 0d       	add	r31, r0
    3006:	11 24       	eor	r1, r1
    3008:	e8 58       	subi	r30, 0x88	; 136
    300a:	fe 4f       	sbci	r31, 0xFE	; 254
    300c:	41 81       	ldd	r20, Z+1	; 0x01
    300e:	74 13       	cpse	r23, r20
    3010:	2b c0       	rjmp	.+86     	; 0x3068 <waiting_buffer_scan_tap+0xc4>
    3012:	40 81       	ld	r20, Z
    3014:	64 13       	cpse	r22, r20
    3016:	28 c0       	rjmp	.+80     	; 0x3068 <waiting_buffer_scan_tap+0xc4>
    3018:	42 81       	ldd	r20, Z+2	; 0x02
    301a:	41 11       	cpse	r20, r1
    301c:	25 c0       	rjmp	.+74     	; 0x3068 <waiting_buffer_scan_tap+0xc4>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    301e:	43 81       	ldd	r20, Z+3	; 0x03
    3020:	54 81       	ldd	r21, Z+4	; 0x04
    3022:	48 17       	cp	r20, r24
    3024:	59 07       	cpc	r21, r25
    3026:	10 f4       	brcc	.+4      	; 0x302c <waiting_buffer_scan_tap+0x88>
    3028:	41 50       	subi	r20, 0x01	; 1
    302a:	51 09       	sbc	r21, r1
    302c:	48 1b       	sub	r20, r24
    302e:	59 0b       	sbc	r21, r25
    3030:	48 3c       	cpi	r20, 0xC8	; 200
    3032:	51 05       	cpc	r21, r1
    3034:	c8 f4       	brcc	.+50     	; 0x3068 <waiting_buffer_scan_tap+0xc4>
            tapping_key.tap.count = 1;
    3036:	80 91 ad 01 	lds	r24, 0x01AD
    303a:	8f 70       	andi	r24, 0x0F	; 15
    303c:	80 61       	ori	r24, 0x10	; 16
    303e:	80 93 ad 01 	sts	0x01AD, r24
            waiting_buffer[i].tap.count = 1;
    3042:	86 e0       	ldi	r24, 0x06	; 6
    3044:	82 9f       	mul	r24, r18
    3046:	f0 01       	movw	r30, r0
    3048:	83 9f       	mul	r24, r19
    304a:	f0 0d       	add	r31, r0
    304c:	11 24       	eor	r1, r1
    304e:	e3 58       	subi	r30, 0x83	; 131
    3050:	fe 4f       	sbci	r31, 0xFE	; 254
    3052:	80 81       	ld	r24, Z
    3054:	8f 70       	andi	r24, 0x0F	; 15
    3056:	80 61       	ori	r24, 0x10	; 16
    3058:	80 83       	st	Z, r24
            process_action(&tapping_key);
    305a:	88 ea       	ldi	r24, 0xA8	; 168
    305c:	91 e0       	ldi	r25, 0x01	; 1
    305e:	0e 94 ae 13 	call	0x275c	; 0x275c <process_action>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    3062:	cf 91       	pop	r28
            tapping_key.tap.count = 1;
            waiting_buffer[i].tap.count = 1;
            process_action(&tapping_key);

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    3064:	0c 94 a3 17 	jmp	0x2f46	; 0x2f46 <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3068:	2f 5f       	subi	r18, 0xFF	; 255
    306a:	3f 4f       	sbci	r19, 0xFF	; 255
    306c:	27 70       	andi	r18, 0x07	; 7
    306e:	b8 cf       	rjmp	.-144    	; 0x2fe0 <waiting_buffer_scan_tap+0x3c>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    3070:	cf 91       	pop	r28
    3072:	08 95       	ret

00003074 <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    3074:	cf 92       	push	r12
    3076:	df 92       	push	r13
    3078:	ef 92       	push	r14
    307a:	ff 92       	push	r15
    307c:	0f 93       	push	r16
    307e:	1f 93       	push	r17
    3080:	cf 93       	push	r28
    3082:	df 93       	push	r29
    3084:	cd b7       	in	r28, 0x3d	; 61
    3086:	de b7       	in	r29, 0x3e	; 62
    3088:	62 97       	sbiw	r28, 0x12	; 18
    308a:	0f b6       	in	r0, 0x3f	; 63
    308c:	f8 94       	cli
    308e:	de bf       	out	0x3e, r29	; 62
    3090:	0f be       	out	0x3f, r0	; 63
    3092:	cd bf       	out	0x3d, r28	; 61
    3094:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    3096:	85 e0       	ldi	r24, 0x05	; 5
    3098:	f8 01       	movw	r30, r16
    309a:	de 01       	movw	r26, r28
    309c:	1d 96       	adiw	r26, 0x0d	; 13
    309e:	01 90       	ld	r0, Z+
    30a0:	0d 92       	st	X+, r0
    30a2:	8a 95       	dec	r24
    30a4:	e1 f7       	brne	.-8      	; 0x309e <process_tapping+0x2a>
    30a6:	d8 01       	movw	r26, r16
    30a8:	4c 91       	ld	r20, X
    30aa:	11 96       	adiw	r26, 0x01	; 1
    30ac:	5c 91       	ld	r21, X
    30ae:	11 97       	sbiw	r26, 0x01	; 1
    30b0:	12 96       	adiw	r26, 0x02	; 2
    30b2:	6c 91       	ld	r22, X
    30b4:	12 97       	sbiw	r26, 0x02	; 2
    30b6:	13 96       	adiw	r26, 0x03	; 3
    30b8:	ed 90       	ld	r14, X+
    30ba:	fc 90       	ld	r15, X
    30bc:	14 97       	sbiw	r26, 0x04	; 4

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    30be:	70 91 a8 01 	lds	r23, 0x01A8
    30c2:	e0 91 a9 01 	lds	r30, 0x01A9
    30c6:	20 91 ab 01 	lds	r18, 0x01AB
    30ca:	30 91 ac 01 	lds	r19, 0x01AC
    30ce:	21 15       	cp	r18, r1
    30d0:	31 05       	cpc	r19, r1
    30d2:	31 f0       	breq	.+12     	; 0x30e0 <process_tapping+0x6c>
    30d4:	ef 3f       	cpi	r30, 0xFF	; 255
    30d6:	31 f4       	brne	.+12     	; 0x30e4 <process_tapping+0x70>
    30d8:	81 e0       	ldi	r24, 0x01	; 1
    30da:	7f 3f       	cpi	r23, 0xFF	; 255
    30dc:	19 f4       	brne	.+6      	; 0x30e4 <process_tapping+0x70>
    30de:	03 c0       	rjmp	.+6      	; 0x30e6 <process_tapping+0x72>
    30e0:	81 e0       	ldi	r24, 0x01	; 1
    30e2:	01 c0       	rjmp	.+2      	; 0x30e6 <process_tapping+0x72>
    30e4:	80 e0       	ldi	r24, 0x00	; 0
    30e6:	b8 2f       	mov	r27, r24
    30e8:	b1 70       	andi	r27, 0x01	; 1
    30ea:	cb 2e       	mov	r12, r27
    30ec:	80 fd       	sbrc	r24, 0
    30ee:	6c c1       	rjmp	.+728    	; 0x33c8 <process_tapping+0x354>
    30f0:	d0 90 aa 01 	lds	r13, 0x01AA
    30f4:	dd 20       	and	r13, r13
    30f6:	09 f4       	brne	.+2      	; 0x30fa <process_tapping+0x86>
    30f8:	f5 c0       	rjmp	.+490    	; 0x32e4 <process_tapping+0x270>
    30fa:	f0 91 ad 01 	lds	r31, 0x01AD
        if (WITHIN_TAPPING_TERM(event)) {
    30fe:	e2 16       	cp	r14, r18
    3100:	f3 06       	cpc	r15, r19
    3102:	38 f0       	brcs	.+14     	; 0x3112 <process_tapping+0x9e>
    3104:	c7 01       	movw	r24, r14
    3106:	82 1b       	sub	r24, r18
    3108:	93 0b       	sbc	r25, r19
    310a:	88 3c       	cpi	r24, 0xC8	; 200
    310c:	91 05       	cpc	r25, r1
    310e:	48 f0       	brcs	.+18     	; 0x3122 <process_tapping+0xae>
    3110:	9b c0       	rjmp	.+310    	; 0x3248 <process_tapping+0x1d4>
    3112:	20 95       	com	r18
    3114:	30 95       	com	r19
    3116:	2e 0d       	add	r18, r14
    3118:	3f 1d       	adc	r19, r15
    311a:	28 3c       	cpi	r18, 0xC8	; 200
    311c:	31 05       	cpc	r19, r1
    311e:	08 f0       	brcs	.+2      	; 0x3122 <process_tapping+0xae>
    3120:	93 c0       	rjmp	.+294    	; 0x3248 <process_tapping+0x1d4>
            if (tapping_key.tap.count == 0) {
    3122:	8f 2f       	mov	r24, r31
    3124:	80 7f       	andi	r24, 0xF0	; 240
    3126:	09 f0       	breq	.+2      	; 0x312a <process_tapping+0xb6>
    3128:	52 c0       	rjmp	.+164    	; 0x31ce <process_tapping+0x15a>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    312a:	e5 13       	cpse	r30, r21
    312c:	14 c0       	rjmp	.+40     	; 0x3156 <process_tapping+0xe2>
    312e:	74 13       	cpse	r23, r20
    3130:	12 c0       	rjmp	.+36     	; 0x3156 <process_tapping+0xe2>
    3132:	d6 2e       	mov	r13, r22
    3134:	61 11       	cpse	r22, r1
    3136:	0f c0       	rjmp	.+30     	; 0x3156 <process_tapping+0xe2>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    3138:	ff 70       	andi	r31, 0x0F	; 15
    313a:	f0 61       	ori	r31, 0x10	; 16
    313c:	f0 93 ad 01 	sts	0x01AD, r31
                    debug_tapping_key();
    3140:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <debug_tapping_key>
                    process_action(&tapping_key);
    3144:	88 ea       	ldi	r24, 0xA8	; 168
    3146:	91 e0       	ldi	r25, 0x01	; 1
    3148:	0e 94 ae 13 	call	0x275c	; 0x275c <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    314c:	80 91 ad 01 	lds	r24, 0x01AD
    3150:	f8 01       	movw	r30, r16
    3152:	85 83       	std	Z+5, r24	; 0x05
                    // enqueue
                    return false;
    3154:	6c c1       	rjmp	.+728    	; 0x342e <process_tapping+0x3ba>
    3156:	ef 28       	or	r14, r15
    3158:	31 f0       	breq	.+12     	; 0x3166 <process_tapping+0xf2>
    315a:	5f 3f       	cpi	r21, 0xFF	; 255
    315c:	31 f4       	brne	.+12     	; 0x316a <process_tapping+0xf6>
    315e:	81 e0       	ldi	r24, 0x01	; 1
    3160:	4f 3f       	cpi	r20, 0xFF	; 255
    3162:	19 f4       	brne	.+6      	; 0x316a <process_tapping+0xf6>
    3164:	03 c0       	rjmp	.+6      	; 0x316c <process_tapping+0xf8>
    3166:	81 e0       	ldi	r24, 0x01	; 1
    3168:	01 c0       	rjmp	.+2      	; 0x316c <process_tapping+0xf8>
    316a:	80 e0       	ldi	r24, 0x00	; 0
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    316c:	80 fd       	sbrc	r24, 0
    316e:	03 c0       	rjmp	.+6      	; 0x3176 <process_tapping+0x102>
    3170:	81 e0       	ldi	r24, 0x01	; 1
    3172:	86 27       	eor	r24, r22
    3174:	01 c0       	rjmp	.+2      	; 0x3178 <process_tapping+0x104>
    3176:	80 e0       	ldi	r24, 0x00	; 0
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    3178:	f8 2f       	mov	r31, r24
    317a:	f1 70       	andi	r31, 0x01	; 1
    317c:	ff 2e       	mov	r15, r31
    317e:	80 ff       	sbrs	r24, 0
    3180:	1c c0       	rjmp	.+56     	; 0x31ba <process_tapping+0x146>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3182:	80 91 76 01 	lds	r24, 0x0176
    3186:	20 91 77 01 	lds	r18, 0x0177
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    318a:	36 e0       	ldi	r19, 0x06	; 6
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    318c:	82 17       	cp	r24, r18
    318e:	09 f4       	brne	.+2      	; 0x3192 <process_tapping+0x11e>
    3190:	28 c1       	rjmp	.+592    	; 0x33e2 <process_tapping+0x36e>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    3192:	90 e0       	ldi	r25, 0x00	; 0
    3194:	38 9f       	mul	r19, r24
    3196:	f0 01       	movw	r30, r0
    3198:	39 9f       	mul	r19, r25
    319a:	f0 0d       	add	r31, r0
    319c:	11 24       	eor	r1, r1
    319e:	e8 58       	subi	r30, 0x88	; 136
    31a0:	fe 4f       	sbci	r31, 0xFE	; 254
    31a2:	71 81       	ldd	r23, Z+1	; 0x01
    31a4:	57 13       	cpse	r21, r23
    31a6:	06 c0       	rjmp	.+12     	; 0x31b4 <process_tapping+0x140>
    31a8:	70 81       	ld	r23, Z
    31aa:	47 13       	cpse	r20, r23
    31ac:	03 c0       	rjmp	.+6      	; 0x31b4 <process_tapping+0x140>
    31ae:	72 81       	ldd	r23, Z+2	; 0x02
    31b0:	67 13       	cpse	r22, r23
    31b2:	03 c0       	rjmp	.+6      	; 0x31ba <process_tapping+0x146>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    31b4:	01 96       	adiw	r24, 0x01	; 1
    31b6:	87 70       	andi	r24, 0x07	; 7
    31b8:	e9 cf       	rjmp	.-46     	; 0x318c <process_tapping+0x118>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    31ba:	d6 2e       	mov	r13, r22
    31bc:	66 23       	and	r22, r22
    31be:	09 f4       	brne	.+2      	; 0x31c2 <process_tapping+0x14e>
    31c0:	36 c1       	rjmp	.+620    	; 0x342e <process_tapping+0x3ba>
                        tapping_key.tap.interrupted = true;
    31c2:	80 91 ad 01 	lds	r24, 0x01AD
    31c6:	81 60       	ori	r24, 0x01	; 1
    31c8:	80 93 ad 01 	sts	0x01AD, r24
    31cc:	53 c0       	rjmp	.+166    	; 0x3274 <process_tapping+0x200>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    31ce:	e5 13       	cpse	r30, r21
    31d0:	08 c0       	rjmp	.+16     	; 0x31e2 <process_tapping+0x16e>
    31d2:	74 13       	cpse	r23, r20
    31d4:	06 c0       	rjmp	.+12     	; 0x31e2 <process_tapping+0x16e>
    31d6:	61 11       	cpse	r22, r1
    31d8:	04 c0       	rjmp	.+8      	; 0x31e2 <process_tapping+0x16e>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    31da:	d8 01       	movw	r26, r16
    31dc:	15 96       	adiw	r26, 0x05	; 5
    31de:	fc 93       	st	X, r31
    31e0:	ae c0       	rjmp	.+348    	; 0x333e <process_tapping+0x2ca>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    31e2:	4d 87       	std	Y+13, r20	; 0x0d
    31e4:	5e 87       	std	Y+14, r21	; 0x0e
    31e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    31e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    31ea:	6a 8b       	std	Y+18, r22	; 0x12
    31ec:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <is_tap_key>
    31f0:	6a 89       	ldd	r22, Y+18	; 0x12
    31f2:	88 23       	and	r24, r24
    31f4:	29 f1       	breq	.+74     	; 0x3240 <process_tapping+0x1cc>
    31f6:	d6 2e       	mov	r13, r22
    31f8:	66 23       	and	r22, r22
    31fa:	11 f1       	breq	.+68     	; 0x3240 <process_tapping+0x1cc>
                    if (tapping_key.tap.count > 1) {
    31fc:	20 91 ad 01 	lds	r18, 0x01AD
    3200:	82 2f       	mov	r24, r18
    3202:	82 95       	swap	r24
    3204:	8f 70       	andi	r24, 0x0F	; 15
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	02 97       	sbiw	r24, 0x02	; 2
    320a:	0c f4       	brge	.+2      	; 0x320e <process_tapping+0x19a>
    320c:	60 c0       	rjmp	.+192    	; 0x32ce <process_tapping+0x25a>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    320e:	80 91 a8 01 	lds	r24, 0x01A8
    3212:	90 91 a9 01 	lds	r25, 0x01A9
    3216:	98 87       	std	Y+8, r25	; 0x08
    3218:	8f 83       	std	Y+7, r24	; 0x07
    321a:	19 86       	std	Y+9, r1	; 0x09
    321c:	fb 86       	std	Y+11, r15	; 0x0b
    321e:	ea 86       	std	Y+10, r14	; 0x0a
    3220:	2c 87       	std	Y+12, r18	; 0x0c
    3222:	ce 01       	movw	r24, r28
    3224:	07 96       	adiw	r24, 0x07	; 7
    3226:	51 c0       	rjmp	.+162    	; 0x32ca <process_tapping+0x256>
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3228:	e5 17       	cp	r30, r21
    322a:	31 f1       	breq	.+76     	; 0x3278 <process_tapping+0x204>
                    keyp->tap = tapping_key.tap;
                    process_action(keyp);
                    tapping_key = (keyrecord_t){};
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    322c:	4d 87       	std	Y+13, r20	; 0x0d
    322e:	5e 87       	std	Y+14, r21	; 0x0e
    3230:	8d 85       	ldd	r24, Y+13	; 0x0d
    3232:	9e 85       	ldd	r25, Y+14	; 0x0e
    3234:	6a 8b       	std	Y+18, r22	; 0x12
    3236:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <is_tap_key>
    323a:	6a 89       	ldd	r22, Y+18	; 0x12
    323c:	81 11       	cpse	r24, r1
    323e:	2e c0       	rjmp	.+92     	; 0x329c <process_tapping+0x228>
                }
                else {
                    if (!IS_NOEVENT(event)) {
                        debug("Tapping: key event while last tap(>0).\n");
                    }
                    process_action(keyp);
    3240:	c8 01       	movw	r24, r16
    3242:	0e 94 ae 13 	call	0x275c	; 0x275c <process_action>
    3246:	a4 c0       	rjmp	.+328    	; 0x3390 <process_tapping+0x31c>
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    3248:	8f 2f       	mov	r24, r31
    324a:	80 7f       	andi	r24, 0xF0	; 240
    324c:	69 f7       	brne	.-38     	; 0x3228 <process_tapping+0x1b4>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    324e:	7e 2d       	mov	r23, r14
    3250:	f9 8a       	std	Y+17, r15	; 0x11
    3252:	e8 8a       	std	Y+16, r14	; 0x10
    3254:	89 89       	ldd	r24, Y+17	; 0x11
    3256:	0e 94 84 17 	call	0x2f08	; 0x2f08 <debug_event>
                process_action(&tapping_key);
    325a:	88 ea       	ldi	r24, 0xA8	; 168
    325c:	91 e0       	ldi	r25, 0x01	; 1
    325e:	0e 94 ae 13 	call	0x275c	; 0x275c <process_action>
                tapping_key = (keyrecord_t){};
    3262:	e8 ea       	ldi	r30, 0xA8	; 168
    3264:	f1 e0       	ldi	r31, 0x01	; 1
    3266:	86 e0       	ldi	r24, 0x06	; 6
    3268:	df 01       	movw	r26, r30
    326a:	1d 92       	st	X+, r1
    326c:	8a 95       	dec	r24
    326e:	e9 f7       	brne	.-6      	; 0x326a <process_tapping+0x1f6>
                debug_tapping_key();
    3270:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <debug_tapping_key>
                return false;
    3274:	d1 2c       	mov	r13, r1
    3276:	db c0       	rjmp	.+438    	; 0x342e <process_tapping+0x3ba>
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3278:	74 13       	cpse	r23, r20
    327a:	d8 cf       	rjmp	.-80     	; 0x322c <process_tapping+0x1b8>
    327c:	61 11       	cpse	r22, r1
    327e:	d6 cf       	rjmp	.-84     	; 0x322c <process_tapping+0x1b8>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    3280:	d8 01       	movw	r26, r16
    3282:	15 96       	adiw	r26, 0x05	; 5
    3284:	fc 93       	st	X, r31
                    process_action(keyp);
    3286:	c8 01       	movw	r24, r16
    3288:	0e 94 ae 13 	call	0x275c	; 0x275c <process_action>
                    tapping_key = (keyrecord_t){};
    328c:	e8 ea       	ldi	r30, 0xA8	; 168
    328e:	f1 e0       	ldi	r31, 0x01	; 1
    3290:	86 e0       	ldi	r24, 0x06	; 6
    3292:	df 01       	movw	r26, r30
    3294:	1d 92       	st	X+, r1
    3296:	8a 95       	dec	r24
    3298:	e9 f7       	brne	.-6      	; 0x3294 <process_tapping+0x220>
                    return true;
    329a:	c9 c0       	rjmp	.+402    	; 0x342e <process_tapping+0x3ba>
                }
                else if (is_tap_key(event.key) && event.pressed) {
    329c:	d6 2e       	mov	r13, r22
    329e:	66 23       	and	r22, r22
    32a0:	79 f2       	breq	.-98     	; 0x3240 <process_tapping+0x1cc>
                    if (tapping_key.tap.count > 1) {
    32a2:	20 91 ad 01 	lds	r18, 0x01AD
    32a6:	82 2f       	mov	r24, r18
    32a8:	82 95       	swap	r24
    32aa:	8f 70       	andi	r24, 0x0F	; 15
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	02 97       	sbiw	r24, 0x02	; 2
    32b0:	74 f0       	brlt	.+28     	; 0x32ce <process_tapping+0x25a>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    32b2:	80 91 a8 01 	lds	r24, 0x01A8
    32b6:	90 91 a9 01 	lds	r25, 0x01A9
    32ba:	9a 83       	std	Y+2, r25	; 0x02
    32bc:	89 83       	std	Y+1, r24	; 0x01
    32be:	1b 82       	std	Y+3, r1	; 0x03
    32c0:	fd 82       	std	Y+5, r15	; 0x05
    32c2:	ec 82       	std	Y+4, r14	; 0x04
    32c4:	2e 83       	std	Y+6, r18	; 0x06
    32c6:	ce 01       	movw	r24, r28
    32c8:	01 96       	adiw	r24, 0x01	; 1
    32ca:	0e 94 ae 13 	call	0x275c	; 0x275c <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last timeout tap(1).\n");
                    }
                    tapping_key = *keyp;
    32ce:	86 e0       	ldi	r24, 0x06	; 6
    32d0:	f8 01       	movw	r30, r16
    32d2:	a8 ea       	ldi	r26, 0xA8	; 168
    32d4:	b1 e0       	ldi	r27, 0x01	; 1
    32d6:	01 90       	ld	r0, Z+
    32d8:	0d 92       	st	X+, r0
    32da:	8a 95       	dec	r24
    32dc:	e1 f7       	brne	.-8      	; 0x32d6 <process_tapping+0x262>
                    waiting_buffer_scan_tap();
    32de:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <waiting_buffer_scan_tap>
    32e2:	6f c0       	rjmp	.+222    	; 0x33c2 <process_tapping+0x34e>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    32e4:	e2 16       	cp	r14, r18
    32e6:	f3 06       	cpc	r15, r19
    32e8:	28 f0       	brcs	.+10     	; 0x32f4 <process_tapping+0x280>
    32ea:	c7 01       	movw	r24, r14
    32ec:	82 1b       	sub	r24, r18
    32ee:	93 0b       	sbc	r25, r19
    32f0:	9c 01       	movw	r18, r24
    32f2:	04 c0       	rjmp	.+8      	; 0x32fc <process_tapping+0x288>
    32f4:	20 95       	com	r18
    32f6:	30 95       	com	r19
    32f8:	2e 0d       	add	r18, r14
    32fa:	3f 1d       	adc	r19, r15
    32fc:	28 3c       	cpi	r18, 0xC8	; 200
    32fe:	31 05       	cpc	r19, r1
    3300:	08 f0       	brcs	.+2      	; 0x3304 <process_tapping+0x290>
    3302:	52 c0       	rjmp	.+164    	; 0x33a8 <process_tapping+0x334>
            if (event.pressed) {
    3304:	d6 2e       	mov	r13, r22
    3306:	66 23       	and	r22, r22
    3308:	09 f4       	brne	.+2      	; 0x330c <process_tapping+0x298>
    330a:	9a cf       	rjmp	.-204    	; 0x3240 <process_tapping+0x1cc>
                if (IS_TAPPING_KEY(event.key)) {
    330c:	e5 13       	cpse	r30, r21
    330e:	2c c0       	rjmp	.+88     	; 0x3368 <process_tapping+0x2f4>
    3310:	74 13       	cpse	r23, r20
    3312:	2a c0       	rjmp	.+84     	; 0x3368 <process_tapping+0x2f4>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    3314:	80 91 ad 01 	lds	r24, 0x01AD
    3318:	80 fd       	sbrc	r24, 0
    331a:	1d c0       	rjmp	.+58     	; 0x3356 <process_tapping+0x2e2>
    331c:	98 2f       	mov	r25, r24
    331e:	92 95       	swap	r25
    3320:	9f 70       	andi	r25, 0x0F	; 15
    3322:	c9 f0       	breq	.+50     	; 0x3356 <process_tapping+0x2e2>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    3324:	d8 01       	movw	r26, r16
    3326:	15 96       	adiw	r26, 0x05	; 5
    3328:	8c 93       	st	X, r24
    332a:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    332c:	9f 30       	cpi	r25, 0x0F	; 15
    332e:	39 f0       	breq	.+14     	; 0x333e <process_tapping+0x2ca>
    3330:	9f 5f       	subi	r25, 0xFF	; 255
    3332:	92 95       	swap	r25
    3334:	90 7f       	andi	r25, 0xF0	; 240
    3336:	8f 70       	andi	r24, 0x0F	; 15
    3338:	89 2b       	or	r24, r25
    333a:	15 96       	adiw	r26, 0x05	; 5
    333c:	8c 93       	st	X, r24
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    333e:	c8 01       	movw	r24, r16
    3340:	0e 94 ae 13 	call	0x275c	; 0x275c <process_action>
                        tapping_key = *keyp;
    3344:	86 e0       	ldi	r24, 0x06	; 6
    3346:	f8 01       	movw	r30, r16
    3348:	a8 ea       	ldi	r26, 0xA8	; 168
    334a:	b1 e0       	ldi	r27, 0x01	; 1
    334c:	01 90       	ld	r0, Z+
    334e:	0d 92       	st	X+, r0
    3350:	8a 95       	dec	r24
    3352:	e1 f7       	brne	.-8      	; 0x334c <process_tapping+0x2d8>
    3354:	36 c0       	rjmp	.+108    	; 0x33c2 <process_tapping+0x34e>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    3356:	86 e0       	ldi	r24, 0x06	; 6
    3358:	f8 01       	movw	r30, r16
    335a:	a8 ea       	ldi	r26, 0xA8	; 168
    335c:	b1 e0       	ldi	r27, 0x01	; 1
    335e:	01 90       	ld	r0, Z+
    3360:	0d 92       	st	X+, r0
    3362:	8a 95       	dec	r24
    3364:	e1 f7       	brne	.-8      	; 0x335e <process_tapping+0x2ea>
                        return true;
    3366:	63 c0       	rjmp	.+198    	; 0x342e <process_tapping+0x3ba>
                    }
                } else if (is_tap_key(event.key)) {
    3368:	4d 87       	std	Y+13, r20	; 0x0d
    336a:	5e 87       	std	Y+14, r21	; 0x0e
    336c:	8d 85       	ldd	r24, Y+13	; 0x0d
    336e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3370:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <is_tap_key>
    3374:	88 23       	and	r24, r24
    3376:	79 f0       	breq	.+30     	; 0x3396 <process_tapping+0x322>
                    // Sequential tap can be interfered with other tap key.
                    debug("Tapping: Start with interfering other tap.\n");
                    tapping_key = *keyp;
    3378:	86 e0       	ldi	r24, 0x06	; 6
    337a:	f8 01       	movw	r30, r16
    337c:	a8 ea       	ldi	r26, 0xA8	; 168
    337e:	b1 e0       	ldi	r27, 0x01	; 1
    3380:	01 90       	ld	r0, Z+
    3382:	0d 92       	st	X+, r0
    3384:	8a 95       	dec	r24
    3386:	e1 f7       	brne	.-8      	; 0x3380 <process_tapping+0x30c>
                    waiting_buffer_scan_tap();
    3388:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <waiting_buffer_scan_tap>
                    debug_tapping_key();
    338c:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <debug_tapping_key>
                    return true;
    3390:	dd 24       	eor	r13, r13
    3392:	d3 94       	inc	r13
    3394:	4c c0       	rjmp	.+152    	; 0x342e <process_tapping+0x3ba>
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    3396:	80 91 ad 01 	lds	r24, 0x01AD
    339a:	81 60       	ori	r24, 0x01	; 1
    339c:	80 93 ad 01 	sts	0x01AD, r24
                    process_action(keyp);
    33a0:	c8 01       	movw	r24, r16
    33a2:	0e 94 ae 13 	call	0x275c	; 0x275c <process_action>
                    return true;
    33a6:	43 c0       	rjmp	.+134    	; 0x342e <process_tapping+0x3ba>
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    33a8:	7e 2d       	mov	r23, r14
    33aa:	f9 8a       	std	Y+17, r15	; 0x11
    33ac:	e8 8a       	std	Y+16, r14	; 0x10
    33ae:	89 89       	ldd	r24, Y+17	; 0x11
    33b0:	0e 94 84 17 	call	0x2f08	; 0x2f08 <debug_event>
            tapping_key = (keyrecord_t){};
    33b4:	e8 ea       	ldi	r30, 0xA8	; 168
    33b6:	f1 e0       	ldi	r31, 0x01	; 1
    33b8:	86 e0       	ldi	r24, 0x06	; 6
    33ba:	df 01       	movw	r26, r30
    33bc:	1d 92       	st	X+, r1
    33be:	8a 95       	dec	r24
    33c0:	e9 f7       	brne	.-6      	; 0x33bc <process_tapping+0x348>
            debug_tapping_key();
    33c2:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <debug_tapping_key>
            return false;
    33c6:	33 c0       	rjmp	.+102    	; 0x342e <process_tapping+0x3ba>
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    33c8:	66 23       	and	r22, r22
    33ca:	09 f4       	brne	.+2      	; 0x33ce <process_tapping+0x35a>
    33cc:	39 cf       	rjmp	.-398    	; 0x3240 <process_tapping+0x1cc>
    33ce:	4d 87       	std	Y+13, r20	; 0x0d
    33d0:	5e 87       	std	Y+14, r21	; 0x0e
    33d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    33d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    33d6:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <is_tap_key>
    33da:	88 23       	and	r24, r24
    33dc:	09 f4       	brne	.+2      	; 0x33e0 <process_tapping+0x36c>
    33de:	30 cf       	rjmp	.-416    	; 0x3240 <process_tapping+0x1cc>
    33e0:	cb cf       	rjmp	.-106    	; 0x3378 <process_tapping+0x304>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    33e2:	4d 87       	std	Y+13, r20	; 0x0d
    33e4:	5e 87       	std	Y+14, r21	; 0x0e
    33e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    33e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    33ea:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <layer_switch_get_action>
                    switch (action.kind.id) {
    33ee:	29 2f       	mov	r18, r25
    33f0:	22 95       	swap	r18
    33f2:	2f 70       	andi	r18, 0x0F	; 15
    33f4:	30 e0       	ldi	r19, 0x00	; 0
    33f6:	22 30       	cpi	r18, 0x02	; 2
    33f8:	31 05       	cpc	r19, r1
    33fa:	2c f4       	brge	.+10     	; 0x3406 <process_tapping+0x392>
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    33fc:	9f 70       	andi	r25, 0x0F	; 15
    33fe:	41 f0       	breq	.+16     	; 0x3410 <process_tapping+0x39c>
    3400:	81 11       	cpse	r24, r1
    3402:	06 c0       	rjmp	.+12     	; 0x3410 <process_tapping+0x39c>
    3404:	0c c0       	rjmp	.+24     	; 0x341e <process_tapping+0x3aa>
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
    3406:	24 30       	cpi	r18, 0x04	; 4
    3408:	31 05       	cpc	r19, r1
    340a:	2c f4       	brge	.+10     	; 0x3416 <process_tapping+0x3a2>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    340c:	9f 70       	andi	r25, 0x0F	; 15
    340e:	49 f4       	brne	.+18     	; 0x3422 <process_tapping+0x3ae>
                            if (IS_MOD(action.key.code)) return false;
    3410:	80 5e       	subi	r24, 0xE0	; 224
    3412:	88 30       	cpi	r24, 0x08	; 8
    3414:	20 f0       	brcs	.+8      	; 0x341e <process_tapping+0x3aa>
                            break;
                    }
                    // Release of key should be process immediately.
                    debug("Tapping: release event of a key pressed before tapping\n");
                    process_action(keyp);
    3416:	c8 01       	movw	r24, r16
    3418:	0e 94 ae 13 	call	0x275c	; 0x275c <process_action>
                    return true;
    341c:	cf 2c       	mov	r12, r15
    341e:	dc 2c       	mov	r13, r12
    3420:	06 c0       	rjmp	.+12     	; 0x342e <process_tapping+0x3ba>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    3422:	d8 01       	movw	r26, r16
    3424:	15 96       	adiw	r26, 0x05	; 5
    3426:	9c 91       	ld	r25, X
    3428:	90 7f       	andi	r25, 0xF0	; 240
    342a:	91 f7       	brne	.-28     	; 0x3410 <process_tapping+0x39c>
    342c:	f8 cf       	rjmp	.-16     	; 0x341e <process_tapping+0x3aa>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    342e:	8d 2d       	mov	r24, r13
    3430:	62 96       	adiw	r28, 0x12	; 18
    3432:	0f b6       	in	r0, 0x3f	; 63
    3434:	f8 94       	cli
    3436:	de bf       	out	0x3e, r29	; 62
    3438:	0f be       	out	0x3f, r0	; 63
    343a:	cd bf       	out	0x3d, r28	; 61
    343c:	df 91       	pop	r29
    343e:	cf 91       	pop	r28
    3440:	1f 91       	pop	r17
    3442:	0f 91       	pop	r16
    3444:	ff 90       	pop	r15
    3446:	ef 90       	pop	r14
    3448:	df 90       	pop	r13
    344a:	cf 90       	pop	r12
    344c:	08 95       	ret

0000344e <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    344e:	1f 93       	push	r17
    3450:	cf 93       	push	r28
    3452:	df 93       	push	r29
    3454:	cd b7       	in	r28, 0x3d	; 61
    3456:	de b7       	in	r29, 0x3e	; 62
    3458:	2c 97       	sbiw	r28, 0x0c	; 12
    345a:	0f b6       	in	r0, 0x3f	; 63
    345c:	f8 94       	cli
    345e:	de bf       	out	0x3e, r29	; 62
    3460:	0f be       	out	0x3f, r0	; 63
    3462:	cd bf       	out	0x3d, r28	; 61
    3464:	4f 83       	std	Y+7, r20	; 0x07
    3466:	58 87       	std	Y+8, r21	; 0x08
    3468:	69 87       	std	Y+9, r22	; 0x09
    346a:	7a 87       	std	Y+10, r23	; 0x0a
    346c:	8b 87       	std	Y+11, r24	; 0x0b
    346e:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    3470:	ce 01       	movw	r24, r28
    3472:	07 96       	adiw	r24, 0x07	; 7
    3474:	0e 94 3a 18 	call	0x3074	; 0x3074 <process_tapping>
    3478:	88 23       	and	r24, r24
    347a:	c1 f0       	breq	.+48     	; 0x34ac <action_tapping_process+0x5e>
        if (!IS_NOEVENT(record.event)) {
    347c:	2f 81       	ldd	r18, Y+7	; 0x07
    347e:	38 85       	ldd	r19, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    3480:	8a 85       	ldd	r24, Y+10	; 0x0a
    3482:	9b 85       	ldd	r25, Y+11	; 0x0b
    3484:	89 2b       	or	r24, r25
    3486:	31 f0       	breq	.+12     	; 0x3494 <action_tapping_process+0x46>
    3488:	3f 3f       	cpi	r19, 0xFF	; 255
    348a:	11 f0       	breq	.+4      	; 0x3490 <action_tapping_process+0x42>
    348c:	80 e0       	ldi	r24, 0x00	; 0
    348e:	03 c0       	rjmp	.+6      	; 0x3496 <action_tapping_process+0x48>
    3490:	2f 3f       	cpi	r18, 0xFF	; 255
    3492:	e1 f7       	brne	.-8      	; 0x348c <action_tapping_process+0x3e>
    3494:	81 e0       	ldi	r24, 0x01	; 1
    3496:	81 11       	cpse	r24, r1
    3498:	47 c0       	rjmp	.+142    	; 0x3528 <action_tapping_process+0xda>
            debug("processed: "); debug_record(record); debug("\n");
    349a:	4f 81       	ldd	r20, Y+7	; 0x07
    349c:	58 85       	ldd	r21, Y+8	; 0x08
    349e:	69 85       	ldd	r22, Y+9	; 0x09
    34a0:	7a 85       	ldd	r23, Y+10	; 0x0a
    34a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    34a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    34a6:	0e 94 93 17 	call	0x2f26	; 0x2f26 <debug_record>
    34aa:	3e c0       	rjmp	.+124    	; 0x3528 <action_tapping_process+0xda>
    34ac:	86 e0       	ldi	r24, 0x06	; 6
    34ae:	fe 01       	movw	r30, r28
    34b0:	37 96       	adiw	r30, 0x07	; 7
    34b2:	de 01       	movw	r26, r28
    34b4:	11 96       	adiw	r26, 0x01	; 1
    34b6:	01 90       	ld	r0, Z+
    34b8:	0d 92       	st	X+, r0
    34ba:	8a 95       	dec	r24
    34bc:	e1 f7       	brne	.-8      	; 0x34b6 <action_tapping_process+0x68>
    34be:	ff 81       	ldd	r31, Y+7	; 0x07
    34c0:	e8 85       	ldd	r30, Y+8	; 0x08
    34c2:	4a 85       	ldd	r20, Y+10	; 0x0a
    34c4:	5b 85       	ldd	r21, Y+11	; 0x0b
    34c6:	41 15       	cp	r20, r1
    34c8:	51 05       	cpc	r21, r1
    34ca:	31 f0       	breq	.+12     	; 0x34d8 <action_tapping_process+0x8a>
    34cc:	ef 3f       	cpi	r30, 0xFF	; 255
    34ce:	31 f4       	brne	.+12     	; 0x34dc <action_tapping_process+0x8e>
    34d0:	81 e0       	ldi	r24, 0x01	; 1
    34d2:	ff 3f       	cpi	r31, 0xFF	; 255
    34d4:	19 f4       	brne	.+6      	; 0x34dc <action_tapping_process+0x8e>
    34d6:	03 c0       	rjmp	.+6      	; 0x34de <action_tapping_process+0x90>
    34d8:	81 e0       	ldi	r24, 0x01	; 1
    34da:	01 c0       	rjmp	.+2      	; 0x34de <action_tapping_process+0x90>
    34dc:	80 e0       	ldi	r24, 0x00	; 0
/*
 * Waiting buffer
 */
bool waiting_buffer_enq(keyrecord_t record)
{
    if (IS_NOEVENT(record.event)) {
    34de:	80 fd       	sbrc	r24, 0
    34e0:	23 c0       	rjmp	.+70     	; 0x3528 <action_tapping_process+0xda>
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    34e2:	20 91 77 01 	lds	r18, 0x0177
    34e6:	30 e0       	ldi	r19, 0x00	; 0
    34e8:	c9 01       	movw	r24, r18
    34ea:	01 96       	adiw	r24, 0x01	; 1
    34ec:	87 70       	andi	r24, 0x07	; 7
    34ee:	99 27       	eor	r25, r25
    34f0:	60 91 76 01 	lds	r22, 0x0176
    34f4:	70 e0       	ldi	r23, 0x00	; 0
    34f6:	86 17       	cp	r24, r22
    34f8:	97 07       	cpc	r25, r23
    34fa:	f1 f1       	breq	.+124    	; 0x3578 <action_tapping_process+0x12a>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    34fc:	f9 83       	std	Y+1, r31	; 0x01
    34fe:	ea 83       	std	Y+2, r30	; 0x02
    3500:	5d 83       	std	Y+5, r21	; 0x05
    3502:	4c 83       	std	Y+4, r20	; 0x04
    3504:	96 e0       	ldi	r25, 0x06	; 6
    3506:	92 9f       	mul	r25, r18
    3508:	d0 01       	movw	r26, r0
    350a:	93 9f       	mul	r25, r19
    350c:	b0 0d       	add	r27, r0
    350e:	11 24       	eor	r1, r1
    3510:	a8 58       	subi	r26, 0x88	; 136
    3512:	be 4f       	sbci	r27, 0xFE	; 254
    3514:	fe 01       	movw	r30, r28
    3516:	31 96       	adiw	r30, 0x01	; 1
    3518:	01 90       	ld	r0, Z+
    351a:	0d 92       	st	X+, r0
    351c:	9a 95       	dec	r25
    351e:	e1 f7       	brne	.-8      	; 0x3518 <action_tapping_process+0xca>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    3520:	80 93 77 01 	sts	0x0177, r24

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    3524:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <debug_waiting_buffer>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    3528:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    352a:	80 91 76 01 	lds	r24, 0x0176
    352e:	90 91 77 01 	lds	r25, 0x0177
    3532:	89 17       	cp	r24, r25
    3534:	79 f1       	breq	.+94     	; 0x3594 <action_tapping_process+0x146>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    3536:	18 9f       	mul	r17, r24
    3538:	c0 01       	movw	r24, r0
    353a:	11 24       	eor	r1, r1
    353c:	88 58       	subi	r24, 0x88	; 136
    353e:	9e 4f       	sbci	r25, 0xFE	; 254
    3540:	0e 94 3a 18 	call	0x3074	; 0x3074 <process_tapping>
    3544:	88 23       	and	r24, r24
    3546:	31 f1       	breq	.+76     	; 0x3594 <action_tapping_process+0x146>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    3548:	e0 91 76 01 	lds	r30, 0x0176
    354c:	1e 9f       	mul	r17, r30
    354e:	f0 01       	movw	r30, r0
    3550:	11 24       	eor	r1, r1
    3552:	e8 58       	subi	r30, 0x88	; 136
    3554:	fe 4f       	sbci	r31, 0xFE	; 254
    3556:	40 81       	ld	r20, Z
    3558:	51 81       	ldd	r21, Z+1	; 0x01
    355a:	62 81       	ldd	r22, Z+2	; 0x02
    355c:	73 81       	ldd	r23, Z+3	; 0x03
    355e:	84 81       	ldd	r24, Z+4	; 0x04
    3560:	95 81       	ldd	r25, Z+5	; 0x05
    3562:	0e 94 93 17 	call	0x2f26	; 0x2f26 <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    3566:	80 91 76 01 	lds	r24, 0x0176
    356a:	90 e0       	ldi	r25, 0x00	; 0
    356c:	01 96       	adiw	r24, 0x01	; 1
    356e:	87 70       	andi	r24, 0x07	; 7
    3570:	99 27       	eor	r25, r25
    3572:	80 93 76 01 	sts	0x0176, r24
    3576:	d9 cf       	rjmp	.-78     	; 0x352a <action_tapping_process+0xdc>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    3578:	0e 94 49 17 	call	0x2e92	; 0x2e92 <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    357c:	10 92 77 01 	sts	0x0177, r1
    waiting_buffer_tail = 0;
    3580:	10 92 76 01 	sts	0x0176, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    3584:	e8 ea       	ldi	r30, 0xA8	; 168
    3586:	f1 e0       	ldi	r31, 0x01	; 1
    3588:	86 e0       	ldi	r24, 0x06	; 6
    358a:	df 01       	movw	r26, r30
    358c:	1d 92       	st	X+, r1
    358e:	8a 95       	dec	r24
    3590:	e9 f7       	brne	.-6      	; 0x358c <action_tapping_process+0x13e>
    3592:	ca cf       	rjmp	.-108    	; 0x3528 <action_tapping_process+0xda>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    3594:	2c 96       	adiw	r28, 0x0c	; 12
    3596:	0f b6       	in	r0, 0x3f	; 63
    3598:	f8 94       	cli
    359a:	de bf       	out	0x3e, r29	; 62
    359c:	0f be       	out	0x3f, r0	; 63
    359e:	cd bf       	out	0x3d, r28	; 61
    35a0:	df 91       	pop	r29
    35a2:	cf 91       	pop	r28
    35a4:	1f 91       	pop	r17
    35a6:	08 95       	ret

000035a8 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    35a8:	df 92       	push	r13
    35aa:	ef 92       	push	r14
    35ac:	ff 92       	push	r15
    35ae:	0f 93       	push	r16
    35b0:	1f 93       	push	r17
    35b2:	cf 93       	push	r28
    35b4:	df 93       	push	r29
    35b6:	9c 01       	movw	r18, r24
    macro_t macro = END;
    uint8_t interval = 0;

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    35b8:	00 97       	sbiw	r24, 0x00	; 0
    35ba:	09 f4       	brne	.+2      	; 0x35be <action_macro_play+0x16>
    35bc:	8a c0       	rjmp	.+276    	; 0x36d2 <action_macro_play+0x12a>
    35be:	e1 2c       	mov	r14, r1
    35c0:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    35c2:	dd 24       	eor	r13, r13
    35c4:	d3 94       	inc	r13

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    35c6:	e9 01       	movw	r28, r18
    35c8:	21 96       	adiw	r28, 0x01	; 1
    35ca:	f9 01       	movw	r30, r18
    35cc:	84 91       	lpm	r24, Z
    35ce:	85 37       	cpi	r24, 0x75	; 117
    35d0:	09 f4       	brne	.+2      	; 0x35d4 <action_macro_play+0x2c>
    35d2:	62 c0       	rjmp	.+196    	; 0x3698 <action_macro_play+0xf0>
    35d4:	58 f4       	brcc	.+22     	; 0x35ec <action_macro_play+0x44>
    35d6:	84 37       	cpi	r24, 0x74	; 116
    35d8:	08 f0       	brcs	.+2      	; 0x35dc <action_macro_play+0x34>
    35da:	4e c0       	rjmp	.+156    	; 0x3678 <action_macro_play+0xd0>
    35dc:	84 30       	cpi	r24, 0x04	; 4
    35de:	08 f0       	brcs	.+2      	; 0x35e2 <action_macro_play+0x3a>
    35e0:	69 c0       	rjmp	.+210    	; 0x36b4 <action_macro_play+0x10c>
    35e2:	81 30       	cpi	r24, 0x01	; 1
    35e4:	d1 f0       	breq	.+52     	; 0x361a <action_macro_play+0x72>
    35e6:	82 30       	cpi	r24, 0x02	; 2
    35e8:	71 f1       	breq	.+92     	; 0x3646 <action_macro_play+0x9e>
    35ea:	73 c0       	rjmp	.+230    	; 0x36d2 <action_macro_play+0x12a>
    35ec:	88 37       	cpi	r24, 0x78	; 120
    35ee:	09 f4       	brne	.+2      	; 0x35f2 <action_macro_play+0x4a>
    35f0:	5c c0       	rjmp	.+184    	; 0x36aa <action_macro_play+0x102>
    35f2:	50 f4       	brcc	.+20     	; 0x3608 <action_macro_play+0x60>
    35f4:	86 37       	cpi	r24, 0x76	; 118
    35f6:	09 f4       	brne	.+2      	; 0x35fa <action_macro_play+0x52>
    35f8:	54 c0       	rjmp	.+168    	; 0x36a2 <action_macro_play+0xfa>
    35fa:	87 37       	cpi	r24, 0x77	; 119
    35fc:	09 f0       	breq	.+2      	; 0x3600 <action_macro_play+0x58>
    35fe:	69 c0       	rjmp	.+210    	; 0x36d2 <action_macro_play+0x12a>
                break;
            case MOD_STORE:
                mod_storage = get_mods();
                break;
            case MOD_RESTORE:
                set_mods(mod_storage);
    3600:	8e 2d       	mov	r24, r14
    3602:	0e 94 57 1d 	call	0x3aae	; 0x3aae <set_mods>
    3606:	53 c0       	rjmp	.+166    	; 0x36ae <action_macro_play+0x106>

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    3608:	9c e7       	ldi	r25, 0x7C	; 124
    360a:	98 0f       	add	r25, r24
    360c:	90 37       	cpi	r25, 0x70	; 112
    360e:	08 f0       	brcs	.+2      	; 0x3612 <action_macro_play+0x6a>
    3610:	60 c0       	rjmp	.+192    	; 0x36d2 <action_macro_play+0x12a>
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    3612:	8f 77       	andi	r24, 0x7F	; 127
    3614:	0e 94 32 13 	call	0x2664	; 0x2664 <unregister_code>
                break;
    3618:	4f c0       	rjmp	.+158    	; 0x36b8 <action_macro_play+0x110>

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
    361a:	89 01       	movw	r16, r18
    361c:	0e 5f       	subi	r16, 0xFE	; 254
    361e:	1f 4f       	sbci	r17, 0xFF	; 255
    3620:	fe 01       	movw	r30, r28
    3622:	c4 91       	lpm	r28, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    3624:	80 e2       	ldi	r24, 0x20	; 32
    3626:	8c 0f       	add	r24, r28
    3628:	88 30       	cpi	r24, 0x08	; 8
    362a:	48 f4       	brcc	.+18     	; 0x363e <action_macro_play+0x96>
                    add_weak_mods(MOD_BIT(macro));
    362c:	c7 70       	andi	r28, 0x07	; 7
    362e:	8d 2d       	mov	r24, r13
    3630:	01 c0       	rjmp	.+2      	; 0x3634 <action_macro_play+0x8c>
    3632:	88 0f       	add	r24, r24
    3634:	ca 95       	dec	r28
    3636:	ea f7       	brpl	.-6      	; 0x3632 <action_macro_play+0x8a>
    3638:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <add_weak_mods>
    363c:	15 c0       	rjmp	.+42     	; 0x3668 <action_macro_play+0xc0>
                    send_keyboard_report();
                } else {
                    register_code(macro);
    363e:	8c 2f       	mov	r24, r28
    3640:	0e 94 83 12 	call	0x2506	; 0x2506 <register_code>
    3644:	13 c0       	rjmp	.+38     	; 0x366c <action_macro_play+0xc4>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    3646:	89 01       	movw	r16, r18
    3648:	0e 5f       	subi	r16, 0xFE	; 254
    364a:	1f 4f       	sbci	r17, 0xFF	; 255
    364c:	fe 01       	movw	r30, r28
    364e:	c4 91       	lpm	r28, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    3650:	80 e2       	ldi	r24, 0x20	; 32
    3652:	8c 0f       	add	r24, r28
    3654:	88 30       	cpi	r24, 0x08	; 8
    3656:	60 f4       	brcc	.+24     	; 0x3670 <action_macro_play+0xc8>
                    del_weak_mods(MOD_BIT(macro));
    3658:	c7 70       	andi	r28, 0x07	; 7
    365a:	8d 2d       	mov	r24, r13
    365c:	01 c0       	rjmp	.+2      	; 0x3660 <action_macro_play+0xb8>
    365e:	88 0f       	add	r24, r24
    3660:	ca 95       	dec	r28
    3662:	ea f7       	brpl	.-6      	; 0x365e <action_macro_play+0xb6>
    3664:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <del_weak_mods>
                    send_keyboard_report();
    3668:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <send_keyboard_report>
                } else {
                    register_code(macro);
                }
                break;
            case KEY_UP:
                MACRO_READ();
    366c:	e8 01       	movw	r28, r16
    366e:	24 c0       	rjmp	.+72     	; 0x36b8 <action_macro_play+0x110>
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    del_weak_mods(MOD_BIT(macro));
                    send_keyboard_report();
                } else {
                    unregister_code(macro);
    3670:	8c 2f       	mov	r24, r28
    3672:	0e 94 32 13 	call	0x2664	; 0x2664 <unregister_code>
    3676:	fa cf       	rjmp	.-12     	; 0x366c <action_macro_play+0xc4>
                }
                break;
            case WAIT:
                MACRO_READ();
    3678:	2e 5f       	subi	r18, 0xFE	; 254
    367a:	3f 4f       	sbci	r19, 0xFF	; 255
    367c:	fe 01       	movw	r30, r28
    367e:	c4 91       	lpm	r28, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    3680:	cc 23       	and	r28, r28
    3682:	41 f0       	breq	.+16     	; 0x3694 <action_macro_play+0xec>
    3684:	8f e9       	ldi	r24, 0x9F	; 159
    3686:	9f e0       	ldi	r25, 0x0F	; 15
    3688:	01 97       	sbiw	r24, 0x01	; 1
    368a:	f1 f7       	brne	.-4      	; 0x3688 <action_macro_play+0xe0>
    368c:	00 c0       	rjmp	.+0      	; 0x368e <action_macro_play+0xe6>
    368e:	00 00       	nop
    3690:	c1 50       	subi	r28, 0x01	; 1
    3692:	f6 cf       	rjmp	.-20     	; 0x3680 <action_macro_play+0xd8>
                } else {
                    unregister_code(macro);
                }
                break;
            case WAIT:
                MACRO_READ();
    3694:	e9 01       	movw	r28, r18
    3696:	10 c0       	rjmp	.+32     	; 0x36b8 <action_macro_play+0x110>
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
                break;
            case INTERVAL:
                interval = MACRO_READ();
    3698:	fe 01       	movw	r30, r28
    369a:	f4 90       	lpm	r15, Z
    369c:	e9 01       	movw	r28, r18
    369e:	22 96       	adiw	r28, 0x02	; 2
                dprintf("INTERVAL(%u)\n", interval);
                break;
    36a0:	0b c0       	rjmp	.+22     	; 0x36b8 <action_macro_play+0x110>
            case MOD_STORE:
                mod_storage = get_mods();
    36a2:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <get_mods>
    36a6:	e8 2e       	mov	r14, r24
                break;
    36a8:	07 c0       	rjmp	.+14     	; 0x36b8 <action_macro_play+0x110>
            case MOD_RESTORE:
                set_mods(mod_storage);
                send_keyboard_report();
                break;
            case MOD_CLEAR:
                clear_mods();
    36aa:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <clear_mods>
                send_keyboard_report();
    36ae:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <send_keyboard_report>
                break;
    36b2:	02 c0       	rjmp	.+4      	; 0x36b8 <action_macro_play+0x110>
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    36b4:	0e 94 83 12 	call	0x2506	; 0x2506 <register_code>
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    36b8:	9f 2d       	mov	r25, r15
    36ba:	99 23       	and	r25, r25
    36bc:	41 f0       	breq	.+16     	; 0x36ce <action_macro_play+0x126>
    36be:	ef e9       	ldi	r30, 0x9F	; 159
    36c0:	ff e0       	ldi	r31, 0x0F	; 15
    36c2:	31 97       	sbiw	r30, 0x01	; 1
    36c4:	f1 f7       	brne	.-4      	; 0x36c2 <action_macro_play+0x11a>
    36c6:	00 c0       	rjmp	.+0      	; 0x36c8 <action_macro_play+0x120>
    36c8:	00 00       	nop
    36ca:	91 50       	subi	r25, 0x01	; 1
    36cc:	f6 cf       	rjmp	.-20     	; 0x36ba <action_macro_play+0x112>
    36ce:	9e 01       	movw	r18, r28
    36d0:	7a cf       	rjmp	.-268    	; 0x35c6 <action_macro_play+0x1e>
    }
}
    36d2:	df 91       	pop	r29
    36d4:	cf 91       	pop	r28
    36d6:	1f 91       	pop	r17
    36d8:	0f 91       	pop	r16
    36da:	ff 90       	pop	r15
    36dc:	ef 90       	pop	r14
    36de:	df 90       	pop	r13
    36e0:	08 95       	ret

000036e2 <default_layer_state_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    36e2:	60 93 b2 01 	sts	0x01B2, r22
    36e6:	70 93 b3 01 	sts	0x01B3, r23
    36ea:	80 93 b4 01 	sts	0x01B4, r24
    36ee:	90 93 b5 01 	sts	0x01B5, r25
    hook_default_layer_change(default_layer_state);
    36f2:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <hook_default_layer_change>
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    36f6:	0c 94 37 17 	jmp	0x2e6e	; 0x2e6e <clear_keyboard_but_mods>

000036fa <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    36fa:	60 93 ae 01 	sts	0x01AE, r22
    36fe:	70 93 af 01 	sts	0x01AF, r23
    3702:	80 93 b0 01 	sts	0x01B0, r24
    3706:	90 93 b1 01 	sts	0x01B1, r25
    hook_layer_change(layer_state);
    370a:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <hook_layer_change>
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    370e:	0c 94 37 17 	jmp	0x2e6e	; 0x2e6e <clear_keyboard_but_mods>

00003712 <default_layer_debug>:
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void default_layer_debug(void)
{
    3712:	08 95       	ret

00003714 <default_layer_set>:
    dprintf("%08lX(%u)", default_layer_state, biton32(default_layer_state));
}

void default_layer_set(uint32_t state)
{
    default_layer_state_set(state);
    3714:	0c 94 71 1b 	jmp	0x36e2	; 0x36e2 <default_layer_state_set>

00003718 <default_layer_or>:
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    3718:	0f 93       	push	r16
    371a:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    371c:	00 91 b2 01 	lds	r16, 0x01B2
    3720:	10 91 b3 01 	lds	r17, 0x01B3
    3724:	20 91 b4 01 	lds	r18, 0x01B4
    3728:	30 91 b5 01 	lds	r19, 0x01B5
    372c:	60 2b       	or	r22, r16
    372e:	71 2b       	or	r23, r17
    3730:	82 2b       	or	r24, r18
    3732:	93 2b       	or	r25, r19
}
    3734:	1f 91       	pop	r17
    3736:	0f 91       	pop	r16
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
    3738:	0c 94 71 1b 	jmp	0x36e2	; 0x36e2 <default_layer_state_set>

0000373c <default_layer_and>:
}
void default_layer_and(uint32_t state)
{
    373c:	0f 93       	push	r16
    373e:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    3740:	00 91 b2 01 	lds	r16, 0x01B2
    3744:	10 91 b3 01 	lds	r17, 0x01B3
    3748:	20 91 b4 01 	lds	r18, 0x01B4
    374c:	30 91 b5 01 	lds	r19, 0x01B5
    3750:	60 23       	and	r22, r16
    3752:	71 23       	and	r23, r17
    3754:	82 23       	and	r24, r18
    3756:	93 23       	and	r25, r19
}
    3758:	1f 91       	pop	r17
    375a:	0f 91       	pop	r16
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
    375c:	0c 94 71 1b 	jmp	0x36e2	; 0x36e2 <default_layer_state_set>

00003760 <default_layer_xor>:
}
void default_layer_xor(uint32_t state)
{
    3760:	0f 93       	push	r16
    3762:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    3764:	00 91 b2 01 	lds	r16, 0x01B2
    3768:	10 91 b3 01 	lds	r17, 0x01B3
    376c:	20 91 b4 01 	lds	r18, 0x01B4
    3770:	30 91 b5 01 	lds	r19, 0x01B5
    3774:	60 27       	eor	r22, r16
    3776:	71 27       	eor	r23, r17
    3778:	82 27       	eor	r24, r18
    377a:	93 27       	eor	r25, r19
}
    377c:	1f 91       	pop	r17
    377e:	0f 91       	pop	r16
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
    3780:	0c 94 71 1b 	jmp	0x36e2	; 0x36e2 <default_layer_state_set>

00003784 <layer_clear>:
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void layer_clear(void)
{
    layer_state_set(0);
    3784:	60 e0       	ldi	r22, 0x00	; 0
    3786:	70 e0       	ldi	r23, 0x00	; 0
    3788:	cb 01       	movw	r24, r22
    378a:	0c 94 7d 1b 	jmp	0x36fa	; 0x36fa <layer_state_set>

0000378e <layer_move>:
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    378e:	41 e0       	ldi	r20, 0x01	; 1
    3790:	50 e0       	ldi	r21, 0x00	; 0
    3792:	60 e0       	ldi	r22, 0x00	; 0
    3794:	70 e0       	ldi	r23, 0x00	; 0
    3796:	04 c0       	rjmp	.+8      	; 0x37a0 <layer_move+0x12>
    3798:	44 0f       	add	r20, r20
    379a:	55 1f       	adc	r21, r21
    379c:	66 1f       	adc	r22, r22
    379e:	77 1f       	adc	r23, r23
    37a0:	8a 95       	dec	r24
    37a2:	d2 f7       	brpl	.-12     	; 0x3798 <layer_move+0xa>
    37a4:	cb 01       	movw	r24, r22
    37a6:	ba 01       	movw	r22, r20
    37a8:	0c 94 7d 1b 	jmp	0x36fa	; 0x36fa <layer_state_set>

000037ac <layer_on>:
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    37ac:	41 e0       	ldi	r20, 0x01	; 1
    37ae:	50 e0       	ldi	r21, 0x00	; 0
    37b0:	60 e0       	ldi	r22, 0x00	; 0
    37b2:	70 e0       	ldi	r23, 0x00	; 0
    37b4:	04 c0       	rjmp	.+8      	; 0x37be <layer_on+0x12>
    37b6:	44 0f       	add	r20, r20
    37b8:	55 1f       	adc	r21, r21
    37ba:	66 1f       	adc	r22, r22
    37bc:	77 1f       	adc	r23, r23
    37be:	8a 95       	dec	r24
    37c0:	d2 f7       	brpl	.-12     	; 0x37b6 <layer_on+0xa>
    37c2:	80 91 ae 01 	lds	r24, 0x01AE
    37c6:	90 91 af 01 	lds	r25, 0x01AF
    37ca:	a0 91 b0 01 	lds	r26, 0x01B0
    37ce:	b0 91 b1 01 	lds	r27, 0x01B1
    37d2:	48 2b       	or	r20, r24
    37d4:	59 2b       	or	r21, r25
    37d6:	6a 2b       	or	r22, r26
    37d8:	7b 2b       	or	r23, r27
    37da:	cb 01       	movw	r24, r22
    37dc:	ba 01       	movw	r22, r20
    37de:	0c 94 7d 1b 	jmp	0x36fa	; 0x36fa <layer_state_set>

000037e2 <layer_off>:
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    37e2:	41 e0       	ldi	r20, 0x01	; 1
    37e4:	50 e0       	ldi	r21, 0x00	; 0
    37e6:	60 e0       	ldi	r22, 0x00	; 0
    37e8:	70 e0       	ldi	r23, 0x00	; 0
    37ea:	04 c0       	rjmp	.+8      	; 0x37f4 <layer_off+0x12>
    37ec:	44 0f       	add	r20, r20
    37ee:	55 1f       	adc	r21, r21
    37f0:	66 1f       	adc	r22, r22
    37f2:	77 1f       	adc	r23, r23
    37f4:	8a 95       	dec	r24
    37f6:	d2 f7       	brpl	.-12     	; 0x37ec <layer_off+0xa>
    37f8:	40 95       	com	r20
    37fa:	50 95       	com	r21
    37fc:	60 95       	com	r22
    37fe:	70 95       	com	r23
    3800:	80 91 ae 01 	lds	r24, 0x01AE
    3804:	90 91 af 01 	lds	r25, 0x01AF
    3808:	a0 91 b0 01 	lds	r26, 0x01B0
    380c:	b0 91 b1 01 	lds	r27, 0x01B1
    3810:	48 23       	and	r20, r24
    3812:	59 23       	and	r21, r25
    3814:	6a 23       	and	r22, r26
    3816:	7b 23       	and	r23, r27
    3818:	cb 01       	movw	r24, r22
    381a:	ba 01       	movw	r22, r20
    381c:	0c 94 7d 1b 	jmp	0x36fa	; 0x36fa <layer_state_set>

00003820 <layer_invert>:
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    3820:	41 e0       	ldi	r20, 0x01	; 1
    3822:	50 e0       	ldi	r21, 0x00	; 0
    3824:	60 e0       	ldi	r22, 0x00	; 0
    3826:	70 e0       	ldi	r23, 0x00	; 0
    3828:	04 c0       	rjmp	.+8      	; 0x3832 <layer_invert+0x12>
    382a:	44 0f       	add	r20, r20
    382c:	55 1f       	adc	r21, r21
    382e:	66 1f       	adc	r22, r22
    3830:	77 1f       	adc	r23, r23
    3832:	8a 95       	dec	r24
    3834:	d2 f7       	brpl	.-12     	; 0x382a <layer_invert+0xa>
    3836:	80 91 ae 01 	lds	r24, 0x01AE
    383a:	90 91 af 01 	lds	r25, 0x01AF
    383e:	a0 91 b0 01 	lds	r26, 0x01B0
    3842:	b0 91 b1 01 	lds	r27, 0x01B1
    3846:	48 27       	eor	r20, r24
    3848:	59 27       	eor	r21, r25
    384a:	6a 27       	eor	r22, r26
    384c:	7b 27       	eor	r23, r27
    384e:	cb 01       	movw	r24, r22
    3850:	ba 01       	movw	r22, r20
    3852:	0c 94 7d 1b 	jmp	0x36fa	; 0x36fa <layer_state_set>

00003856 <layer_or>:
}

void layer_or(uint32_t state)
{
    3856:	0f 93       	push	r16
    3858:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    385a:	00 91 ae 01 	lds	r16, 0x01AE
    385e:	10 91 af 01 	lds	r17, 0x01AF
    3862:	20 91 b0 01 	lds	r18, 0x01B0
    3866:	30 91 b1 01 	lds	r19, 0x01B1
    386a:	60 2b       	or	r22, r16
    386c:	71 2b       	or	r23, r17
    386e:	82 2b       	or	r24, r18
    3870:	93 2b       	or	r25, r19
}
    3872:	1f 91       	pop	r17
    3874:	0f 91       	pop	r16
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
    3876:	0c 94 7d 1b 	jmp	0x36fa	; 0x36fa <layer_state_set>

0000387a <layer_and>:
}
void layer_and(uint32_t state)
{
    387a:	0f 93       	push	r16
    387c:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    387e:	00 91 ae 01 	lds	r16, 0x01AE
    3882:	10 91 af 01 	lds	r17, 0x01AF
    3886:	20 91 b0 01 	lds	r18, 0x01B0
    388a:	30 91 b1 01 	lds	r19, 0x01B1
    388e:	60 23       	and	r22, r16
    3890:	71 23       	and	r23, r17
    3892:	82 23       	and	r24, r18
    3894:	93 23       	and	r25, r19
}
    3896:	1f 91       	pop	r17
    3898:	0f 91       	pop	r16
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
    389a:	0c 94 7d 1b 	jmp	0x36fa	; 0x36fa <layer_state_set>

0000389e <layer_xor>:
}
void layer_xor(uint32_t state)
{
    389e:	0f 93       	push	r16
    38a0:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    38a2:	00 91 ae 01 	lds	r16, 0x01AE
    38a6:	10 91 af 01 	lds	r17, 0x01AF
    38aa:	20 91 b0 01 	lds	r18, 0x01B0
    38ae:	30 91 b1 01 	lds	r19, 0x01B1
    38b2:	60 27       	eor	r22, r16
    38b4:	71 27       	eor	r23, r17
    38b6:	82 27       	eor	r24, r18
    38b8:	93 27       	eor	r25, r19
}
    38ba:	1f 91       	pop	r17
    38bc:	0f 91       	pop	r16
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
    38be:	0c 94 7d 1b 	jmp	0x36fa	; 0x36fa <layer_state_set>

000038c2 <layer_debug>:
}

void layer_debug(void)
{
    38c2:	08 95       	ret

000038c4 <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    38c4:	cf 92       	push	r12
    38c6:	df 92       	push	r13
    38c8:	ef 92       	push	r14
    38ca:	ff 92       	push	r15
    38cc:	0f 93       	push	r16
    38ce:	1f 93       	push	r17
    38d0:	cf 93       	push	r28
    38d2:	df 93       	push	r29
    38d4:	ec 01       	movw	r28, r24
    action_t action = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    38d6:	c0 90 b2 01 	lds	r12, 0x01B2
    38da:	d0 90 b3 01 	lds	r13, 0x01B3
    38de:	e0 90 b4 01 	lds	r14, 0x01B4
    38e2:	f0 90 b5 01 	lds	r15, 0x01B5
    38e6:	80 91 ae 01 	lds	r24, 0x01AE
    38ea:	90 91 af 01 	lds	r25, 0x01AF
    38ee:	a0 91 b0 01 	lds	r26, 0x01B0
    38f2:	b0 91 b1 01 	lds	r27, 0x01B1
    38f6:	c8 2a       	or	r12, r24
    38f8:	d9 2a       	or	r13, r25
    38fa:	ea 2a       	or	r14, r26
    38fc:	fb 2a       	or	r15, r27
    38fe:	0f e1       	ldi	r16, 0x1F	; 31
    3900:	10 e0       	ldi	r17, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    3902:	b7 01       	movw	r22, r14
    3904:	a6 01       	movw	r20, r12
    3906:	00 2e       	mov	r0, r16
    3908:	04 c0       	rjmp	.+8      	; 0x3912 <layer_switch_get_action+0x4e>
    390a:	76 95       	lsr	r23
    390c:	67 95       	ror	r22
    390e:	57 95       	ror	r21
    3910:	47 95       	ror	r20
    3912:	0a 94       	dec	r0
    3914:	d2 f7       	brpl	.-12     	; 0x390a <layer_switch_get_action+0x46>
    3916:	40 ff       	sbrs	r20, 0
    3918:	07 c0       	rjmp	.+14     	; 0x3928 <layer_switch_get_action+0x64>
            action = action_for_key(i, key);
    391a:	be 01       	movw	r22, r28
    391c:	80 2f       	mov	r24, r16
    391e:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <action_for_key>
            if (action.code != (action_t)ACTION_TRANSPARENT.code) {
    3922:	81 30       	cpi	r24, 0x01	; 1
    3924:	91 05       	cpc	r25, r1
    3926:	39 f4       	brne	.+14     	; 0x3936 <layer_switch_get_action+0x72>
    3928:	01 50       	subi	r16, 0x01	; 1
    392a:	11 09       	sbc	r17, r1
    392c:	50 f7       	brcc	.-44     	; 0x3902 <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    392e:	be 01       	movw	r22, r28
    3930:	80 e0       	ldi	r24, 0x00	; 0
    3932:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    3936:	df 91       	pop	r29
    3938:	cf 91       	pop	r28
    393a:	1f 91       	pop	r17
    393c:	0f 91       	pop	r16
    393e:	ff 90       	pop	r15
    3940:	ef 90       	pop	r14
    3942:	df 90       	pop	r13
    3944:	cf 90       	pop	r12
    3946:	08 95       	ret

00003948 <add_key>:

/* key */
void add_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    3948:	90 91 0b 01 	lds	r25, 0x010B
    394c:	99 23       	and	r25, r25
    394e:	61 f1       	breq	.+88     	; 0x39a8 <add_key+0x60>
    3950:	90 91 0c 01 	lds	r25, 0x010C
    3954:	99 23       	and	r25, r25
    3956:	41 f1       	breq	.+80     	; 0x39a8 <add_key+0x60>
}

#ifdef NKRO_ENABLE
static inline void add_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    3958:	98 2f       	mov	r25, r24
    395a:	96 95       	lsr	r25
    395c:	96 95       	lsr	r25
    395e:	96 95       	lsr	r25
    3960:	9f 31       	cpi	r25, 0x1F	; 31
    3962:	88 f4       	brcc	.+34     	; 0x3986 <add_key+0x3e>
        keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
    3964:	e0 91 0d 01 	lds	r30, 0x010D
    3968:	f0 91 0e 01 	lds	r31, 0x010E
    396c:	e9 0f       	add	r30, r25
    396e:	f1 1d       	adc	r31, r1
    3970:	87 70       	andi	r24, 0x07	; 7
    3972:	21 e0       	ldi	r18, 0x01	; 1
    3974:	30 e0       	ldi	r19, 0x00	; 0
    3976:	01 c0       	rjmp	.+2      	; 0x397a <add_key+0x32>
    3978:	22 0f       	add	r18, r18
    397a:	8a 95       	dec	r24
    397c:	ea f7       	brpl	.-6      	; 0x3978 <add_key+0x30>
    397e:	81 81       	ldd	r24, Z+1	; 0x01
    3980:	82 2b       	or	r24, r18
    3982:	81 83       	std	Z+1, r24	; 0x01
    3984:	08 95       	ret
    } else {
        dprintf("add_key_bit: can't add: %02X\n", code);
    3986:	90 91 d9 01 	lds	r25, 0x01D9
    398a:	90 ff       	sbrs	r25, 0
    398c:	2d c0       	rjmp	.+90     	; 0x39e8 <add_key+0xa0>
    398e:	1f 92       	push	r1
    3990:	8f 93       	push	r24
    3992:	87 e0       	ldi	r24, 0x07	; 7
    3994:	95 e0       	ldi	r25, 0x05	; 5
    3996:	9f 93       	push	r25
    3998:	8f 93       	push	r24
    399a:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    399e:	0f 90       	pop	r0
    39a0:	0f 90       	pop	r0
    39a2:	0f 90       	pop	r0
    39a4:	0f 90       	pop	r0
    39a6:	08 95       	ret
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    39a8:	40 91 0d 01 	lds	r20, 0x010D
    39ac:	50 91 0e 01 	lds	r21, 0x010E
    39b0:	20 e0       	ldi	r18, 0x00	; 0
    39b2:	30 e0       	ldi	r19, 0x00	; 0
    39b4:	9f ef       	ldi	r25, 0xFF	; 255
    39b6:	fa 01       	movw	r30, r20
    39b8:	e2 0f       	add	r30, r18
    39ba:	f3 1f       	adc	r31, r19
    39bc:	62 81       	ldd	r22, Z+2	; 0x02
    39be:	68 17       	cp	r22, r24
    39c0:	99 f0       	breq	.+38     	; 0x39e8 <add_key+0xa0>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    39c2:	9f 3f       	cpi	r25, 0xFF	; 255
    39c4:	19 f4       	brne	.+6      	; 0x39cc <add_key+0x84>
    39c6:	61 11       	cpse	r22, r1
    39c8:	01 c0       	rjmp	.+2      	; 0x39cc <add_key+0x84>
    39ca:	92 2f       	mov	r25, r18
    39cc:	2f 5f       	subi	r18, 0xFF	; 255
    39ce:	3f 4f       	sbci	r19, 0xFF	; 255
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    39d0:	2e 31       	cpi	r18, 0x1E	; 30
    39d2:	31 05       	cpc	r19, r1
    39d4:	81 f7       	brne	.-32     	; 0x39b6 <add_key+0x6e>
        if (empty == -1 && keyboard_report->keys[i] == 0) {
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    39d6:	9f 3f       	cpi	r25, 0xFF	; 255
    39d8:	39 f0       	breq	.+14     	; 0x39e8 <add_key+0xa0>
            keyboard_report->keys[empty] = code;
    39da:	fa 01       	movw	r30, r20
    39dc:	e9 0f       	add	r30, r25
    39de:	f1 1d       	adc	r31, r1
    39e0:	97 fd       	sbrc	r25, 7
    39e2:	fa 95       	dec	r31
    39e4:	82 83       	std	Z+2, r24	; 0x02
    39e6:	08 95       	ret
    39e8:	08 95       	ret

000039ea <del_key>:
}

void del_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    39ea:	90 91 0b 01 	lds	r25, 0x010B
    39ee:	99 23       	and	r25, r25
    39f0:	69 f1       	breq	.+90     	; 0x3a4c <del_key+0x62>
    39f2:	90 91 0c 01 	lds	r25, 0x010C
    39f6:	99 23       	and	r25, r25
    39f8:	49 f1       	breq	.+82     	; 0x3a4c <del_key+0x62>
    }
}

static inline void del_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    39fa:	98 2f       	mov	r25, r24
    39fc:	96 95       	lsr	r25
    39fe:	96 95       	lsr	r25
    3a00:	96 95       	lsr	r25
    3a02:	9f 31       	cpi	r25, 0x1F	; 31
    3a04:	90 f4       	brcc	.+36     	; 0x3a2a <del_key+0x40>
        keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
    3a06:	e0 91 0d 01 	lds	r30, 0x010D
    3a0a:	f0 91 0e 01 	lds	r31, 0x010E
    3a0e:	e9 0f       	add	r30, r25
    3a10:	f1 1d       	adc	r31, r1
    3a12:	87 70       	andi	r24, 0x07	; 7
    3a14:	21 e0       	ldi	r18, 0x01	; 1
    3a16:	30 e0       	ldi	r19, 0x00	; 0
    3a18:	01 c0       	rjmp	.+2      	; 0x3a1c <del_key+0x32>
    3a1a:	22 0f       	add	r18, r18
    3a1c:	8a 95       	dec	r24
    3a1e:	ea f7       	brpl	.-6      	; 0x3a1a <del_key+0x30>
    3a20:	20 95       	com	r18
    3a22:	81 81       	ldd	r24, Z+1	; 0x01
    3a24:	28 23       	and	r18, r24
    3a26:	21 83       	std	Z+1, r18	; 0x01
    3a28:	08 95       	ret
    } else {
        dprintf("del_key_bit: can't del: %02X\n", code);
    3a2a:	90 91 d9 01 	lds	r25, 0x01D9
    3a2e:	90 ff       	sbrs	r25, 0
    3a30:	1f c0       	rjmp	.+62     	; 0x3a70 <del_key+0x86>
    3a32:	1f 92       	push	r1
    3a34:	8f 93       	push	r24
    3a36:	89 ee       	ldi	r24, 0xE9	; 233
    3a38:	94 e0       	ldi	r25, 0x04	; 4
    3a3a:	9f 93       	push	r25
    3a3c:	8f 93       	push	r24
    3a3e:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    3a42:	0f 90       	pop	r0
    3a44:	0f 90       	pop	r0
    3a46:	0f 90       	pop	r0
    3a48:	0f 90       	pop	r0
    3a4a:	08 95       	ret
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3a4c:	40 91 0d 01 	lds	r20, 0x010D
    3a50:	50 91 0e 01 	lds	r21, 0x010E
    3a54:	20 e0       	ldi	r18, 0x00	; 0
    3a56:	30 e0       	ldi	r19, 0x00	; 0
    3a58:	fa 01       	movw	r30, r20
    3a5a:	e2 0f       	add	r30, r18
    3a5c:	f3 1f       	adc	r31, r19
    3a5e:	92 81       	ldd	r25, Z+2	; 0x02
    3a60:	98 13       	cpse	r25, r24
    3a62:	01 c0       	rjmp	.+2      	; 0x3a66 <del_key+0x7c>
            keyboard_report->keys[i] = 0;
    3a64:	12 82       	std	Z+2, r1	; 0x02
    3a66:	2f 5f       	subi	r18, 0xFF	; 255
    3a68:	3f 4f       	sbci	r19, 0xFF	; 255
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    3a6a:	2e 31       	cpi	r18, 0x1E	; 30
    3a6c:	31 05       	cpc	r19, r1
    3a6e:	a1 f7       	brne	.-24     	; 0x3a58 <del_key+0x6e>
    3a70:	08 95       	ret

00003a72 <clear_keys>:
#endif
    del_key_byte(key);
}

void clear_keys(void)
{
    3a72:	81 e0       	ldi	r24, 0x01	; 1
    3a74:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    3a76:	e0 91 0d 01 	lds	r30, 0x010D
    3a7a:	f0 91 0e 01 	lds	r31, 0x010E
    3a7e:	e8 0f       	add	r30, r24
    3a80:	f9 1f       	adc	r31, r25
    3a82:	10 82       	st	Z, r1
    3a84:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3a86:	80 32       	cpi	r24, 0x20	; 32
    3a88:	91 05       	cpc	r25, r1
    3a8a:	a9 f7       	brne	.-22     	; 0x3a76 <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    3a8c:	08 95       	ret

00003a8e <get_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
    3a8e:	80 91 d8 01 	lds	r24, 0x01D8
    3a92:	08 95       	ret

00003a94 <add_mods>:
void add_mods(uint8_t mods) { real_mods |= mods; }
    3a94:	90 91 d8 01 	lds	r25, 0x01D8
    3a98:	98 2b       	or	r25, r24
    3a9a:	90 93 d8 01 	sts	0x01D8, r25
    3a9e:	08 95       	ret

00003aa0 <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    3aa0:	80 95       	com	r24
    3aa2:	90 91 d8 01 	lds	r25, 0x01D8
    3aa6:	98 23       	and	r25, r24
    3aa8:	90 93 d8 01 	sts	0x01D8, r25
    3aac:	08 95       	ret

00003aae <set_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
    3aae:	80 93 d8 01 	sts	0x01D8, r24
    3ab2:	08 95       	ret

00003ab4 <clear_mods>:
void clear_mods(void) { real_mods = 0; }
    3ab4:	10 92 d8 01 	sts	0x01D8, r1
    3ab8:	08 95       	ret

00003aba <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    3aba:	90 91 d7 01 	lds	r25, 0x01D7
    3abe:	98 2b       	or	r25, r24
    3ac0:	90 93 d7 01 	sts	0x01D7, r25
    3ac4:	08 95       	ret

00003ac6 <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    3ac6:	80 95       	com	r24
    3ac8:	90 91 d7 01 	lds	r25, 0x01D7
    3acc:	98 23       	and	r25, r24
    3ace:	90 93 d7 01 	sts	0x01D7, r25
    3ad2:	08 95       	ret

00003ad4 <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    3ad4:	10 92 d7 01 	sts	0x01D7, r1
    3ad8:	08 95       	ret

00003ada <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    3ada:	80 93 b6 01 	sts	0x01B6, r24
    3ade:	08 95       	ret

00003ae0 <clear_oneshot_mods>:
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3ae0:	10 92 b6 01 	sts	0x01B6, r1
    3ae4:	08 95       	ret

00003ae6 <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3ae6:	40 91 0d 01 	lds	r20, 0x010D
    3aea:	50 91 0e 01 	lds	r21, 0x010E
    3aee:	20 e0       	ldi	r18, 0x00	; 0
    3af0:	30 e0       	ldi	r19, 0x00	; 0
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    3af2:	80 e0       	ldi	r24, 0x00	; 0
    3af4:	fa 01       	movw	r30, r20
    3af6:	e2 0f       	add	r30, r18
    3af8:	f3 1f       	adc	r31, r19
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3afa:	91 81       	ldd	r25, Z+1	; 0x01
    3afc:	91 11       	cpse	r25, r1
            cnt++;
    3afe:	8f 5f       	subi	r24, 0xFF	; 255
    3b00:	2f 5f       	subi	r18, 0xFF	; 255
    3b02:	3f 4f       	sbci	r19, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3b04:	2f 31       	cpi	r18, 0x1F	; 31
    3b06:	31 05       	cpc	r19, r1
    3b08:	a9 f7       	brne	.-22     	; 0x3af4 <has_anykey+0xe>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    3b0a:	08 95       	ret

00003b0c <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    3b0c:	e0 91 0d 01 	lds	r30, 0x010D
    3b10:	f0 91 0e 01 	lds	r31, 0x010E
    3b14:	80 91 d8 01 	lds	r24, 0x01D8
    3b18:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    3b1a:	e0 91 0d 01 	lds	r30, 0x010D
    3b1e:	f0 91 0e 01 	lds	r31, 0x010E
    3b22:	80 81       	ld	r24, Z
    3b24:	90 91 d7 01 	lds	r25, 0x01D7
    3b28:	89 2b       	or	r24, r25
    3b2a:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    3b2c:	90 91 b6 01 	lds	r25, 0x01B6
    3b30:	99 23       	and	r25, r25
    3b32:	61 f0       	breq	.+24     	; 0x3b4c <send_keyboard_report+0x40>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    3b34:	e0 91 0d 01 	lds	r30, 0x010D
    3b38:	f0 91 0e 01 	lds	r31, 0x010E
    3b3c:	80 81       	ld	r24, Z
    3b3e:	89 2b       	or	r24, r25
    3b40:	80 83       	st	Z, r24
        if (has_anykey()) {
    3b42:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <has_anykey>
    3b46:	81 11       	cpse	r24, r1
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3b48:	10 92 b6 01 	sts	0x01B6, r1
        if (has_anykey()) {
            clear_oneshot_mods();
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    3b4c:	80 91 0d 01 	lds	r24, 0x010D
    3b50:	90 91 0e 01 	lds	r25, 0x010E
    3b54:	0c 94 c8 10 	jmp	0x2190	; 0x2190 <host_keyboard_send>

00003b58 <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    3b58:	90 93 39 01 	sts	0x0139, r25
    3b5c:	80 93 38 01 	sts	0x0138, r24
    3b60:	08 95       	ret

00003b62 <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    3b62:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    3b64:	98 2f       	mov	r25, r24
    3b66:	9c 7c       	andi	r25, 0xCC	; 204
    3b68:	96 95       	lsr	r25
    3b6a:	96 95       	lsr	r25
    3b6c:	83 73       	andi	r24, 0x33	; 51
    3b6e:	44 e0       	ldi	r20, 0x04	; 4
    3b70:	84 9f       	mul	r24, r20
    3b72:	90 01       	movw	r18, r0
    3b74:	11 24       	eor	r1, r1
    3b76:	92 2b       	or	r25, r18
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    3b78:	89 2f       	mov	r24, r25
    3b7a:	8a 7a       	andi	r24, 0xAA	; 170
    3b7c:	86 95       	lsr	r24
    3b7e:	95 75       	andi	r25, 0x55	; 85
    3b80:	99 0f       	add	r25, r25
    return bits;
}
    3b82:	89 2b       	or	r24, r25
    3b84:	08 95       	ret

00003b86 <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    3b86:	1f 93       	push	r17
    3b88:	cf 93       	push	r28
    3b8a:	df 93       	push	r29
    3b8c:	1f 92       	push	r1
    3b8e:	cd b7       	in	r28, 0x3d	; 61
    3b90:	de b7       	in	r29, 0x3e	; 62
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    3b92:	99 83       	std	Y+1, r25	; 0x01
    3b94:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <bitrev>
    3b98:	18 2f       	mov	r17, r24
    3b9a:	99 81       	ldd	r25, Y+1	; 0x01
    3b9c:	89 2f       	mov	r24, r25
    3b9e:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <bitrev>
    3ba2:	21 2f       	mov	r18, r17
    3ba4:	30 e0       	ldi	r19, 0x00	; 0
    3ba6:	32 2f       	mov	r19, r18
    3ba8:	22 27       	eor	r18, r18
    return bits;
}
    3baa:	a9 01       	movw	r20, r18
    3bac:	48 2b       	or	r20, r24
    3bae:	ca 01       	movw	r24, r20
    3bb0:	0f 90       	pop	r0
    3bb2:	df 91       	pop	r29
    3bb4:	cf 91       	pop	r28
    3bb6:	1f 91       	pop	r17
    3bb8:	08 95       	ret

00003bba <hook_keyboard_loop>:
/* -------------------------------------------------
 * Definitions of default hooks
 * ------------------------------------------------- */

__attribute__((weak))
void hook_keyboard_loop(void) {}
    3bba:	08 95       	ret

00003bbc <hook_matrix_change>:

__attribute__((weak))
void hook_matrix_change(keyevent_t event) {
    3bbc:	cf 93       	push	r28
    3bbe:	df 93       	push	r29
    3bc0:	00 d0       	rcall	.+0      	; 0x3bc2 <hook_matrix_change+0x6>
    3bc2:	00 d0       	rcall	.+0      	; 0x3bc4 <hook_matrix_change+0x8>
    3bc4:	1f 92       	push	r1
    3bc6:	cd b7       	in	r28, 0x3d	; 61
    3bc8:	de b7       	in	r29, 0x3e	; 62
    (void)event;
}
    3bca:	0f 90       	pop	r0
    3bcc:	0f 90       	pop	r0
    3bce:	0f 90       	pop	r0
    3bd0:	0f 90       	pop	r0
    3bd2:	0f 90       	pop	r0
    3bd4:	df 91       	pop	r29
    3bd6:	cf 91       	pop	r28
    3bd8:	08 95       	ret

00003bda <hook_default_layer_change>:

__attribute__((weak))
void hook_default_layer_change(uint32_t default_layer_state) {
    3bda:	08 95       	ret

00003bdc <hook_layer_change>:
    (void)default_layer_state;
}

__attribute__((weak))
void hook_layer_change(uint32_t layer_state) {
    3bdc:	08 95       	ret

00003bde <hook_keyboard_leds_change>:
    (void)layer_state;
}

__attribute__((weak))
void hook_keyboard_leds_change(uint8_t led_status) {
    keyboard_set_leds(led_status);
    3bde:	0c 94 3b 12 	jmp	0x2476	; 0x2476 <keyboard_set_leds>

00003be2 <hook_bootmagic>:
}

__attribute__((weak))
void hook_bootmagic(void) {}
    3be2:	08 95       	ret

00003be4 <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    3be4:	80 91 ee 01 	lds	r24, 0x01EE
    3be8:	84 30       	cpi	r24, 0x04	; 4
    3bea:	09 f1       	breq	.+66     	; 0x3c2e <suspend_power_down+0x4a>
#endif
    wdt_timeout = wdto;
    3bec:	10 92 da 01 	sts	0x01DA, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    3bf0:	20 e4       	ldi	r18, 0x40	; 64
    3bf2:	88 e1       	ldi	r24, 0x18	; 24
    3bf4:	90 e0       	ldi	r25, 0x00	; 0
    3bf6:	0f b6       	in	r0, 0x3f	; 63
    3bf8:	f8 94       	cli
    3bfa:	a8 95       	wdr
    3bfc:	80 93 60 00 	sts	0x0060, r24
    3c00:	0f be       	out	0x3f, r0	; 63
    3c02:	20 93 60 00 	sts	0x0060, r18
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3c06:	83 b7       	in	r24, 0x33	; 51
    3c08:	81 7f       	andi	r24, 0xF1	; 241
    3c0a:	84 60       	ori	r24, 0x04	; 4
    3c0c:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    3c0e:	83 b7       	in	r24, 0x33	; 51
    3c10:	81 60       	ori	r24, 0x01	; 1
    3c12:	83 bf       	out	0x33, r24	; 51
    sei();
    3c14:	78 94       	sei
    sleep_cpu();
    3c16:	88 95       	sleep
    sleep_disable();
    3c18:	83 b7       	in	r24, 0x33	; 51
    3c1a:	8e 7f       	andi	r24, 0xFE	; 254
    3c1c:	83 bf       	out	0x33, r24	; 51

    // Disable watchdog after sleep
    wdt_disable();
    3c1e:	88 e1       	ldi	r24, 0x18	; 24
    3c20:	0f b6       	in	r0, 0x3f	; 63
    3c22:	f8 94       	cli
    3c24:	80 93 60 00 	sts	0x0060, r24
    3c28:	10 92 60 00 	sts	0x0060, r1
    3c2c:	0f be       	out	0x3f, r0	; 63
    3c2e:	08 95       	ret

00003c30 <suspend_wakeup_condition>:
    power_down(WDTO_15MS);
#endif
}

bool suspend_wakeup_condition(void)
{
    3c30:	cf 93       	push	r28
    matrix_power_up();
    3c32:	0e 94 3f 12 	call	0x247e	; 0x247e <matrix_power_up>
    matrix_scan();
    3c36:	0e 94 cb 07 	call	0xf96	; 0xf96 <matrix_scan>
    matrix_power_down();
    3c3a:	0e 94 40 12 	call	0x2480	; 0x2480 <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3c3e:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    3c40:	8c 2f       	mov	r24, r28
    3c42:	0e 94 6e 08 	call	0x10dc	; 0x10dc <matrix_get_row>
    3c46:	81 11       	cpse	r24, r1
    3c48:	05 c0       	rjmp	.+10     	; 0x3c54 <suspend_wakeup_condition+0x24>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3c4a:	cf 5f       	subi	r28, 0xFF	; 255
    3c4c:	c5 30       	cpi	r28, 0x05	; 5
    3c4e:	c1 f7       	brne	.-16     	; 0x3c40 <suspend_wakeup_condition+0x10>
        if (matrix_get_row(r)) return true;
    }
    return false;
    3c50:	80 e0       	ldi	r24, 0x00	; 0
    3c52:	01 c0       	rjmp	.+2      	; 0x3c56 <suspend_wakeup_condition+0x26>
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
    3c54:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    3c56:	cf 91       	pop	r28
    3c58:	08 95       	ret

00003c5a <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    matrix_clear();
    3c5a:	0e 94 3d 12 	call	0x247a	; 0x247a <matrix_clear>
    clear_keyboard();
    3c5e:	0e 94 49 17 	call	0x2e92	; 0x2e92 <clear_keyboard>
#ifdef BACKLIGHT_ENABLE
    backlight_init();
    3c62:	0c 94 f2 28 	jmp	0x51e4	; 0x51e4 <backlight_init>

00003c66 <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    3c66:	1f 92       	push	r1
    3c68:	0f 92       	push	r0
    3c6a:	0f b6       	in	r0, 0x3f	; 63
    3c6c:	0f 92       	push	r0
    3c6e:	11 24       	eor	r1, r1
    3c70:	8f 93       	push	r24
    3c72:	9f 93       	push	r25
    3c74:	af 93       	push	r26
    3c76:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    3c78:	80 91 da 01 	lds	r24, 0x01DA
    3c7c:	81 11       	cpse	r24, r1
    3c7e:	13 c0       	rjmp	.+38     	; 0x3ca6 <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    3c80:	80 91 db 01 	lds	r24, 0x01DB
    3c84:	90 91 dc 01 	lds	r25, 0x01DC
    3c88:	a0 91 dd 01 	lds	r26, 0x01DD
    3c8c:	b0 91 de 01 	lds	r27, 0x01DE
    3c90:	41 96       	adiw	r24, 0x11	; 17
    3c92:	a1 1d       	adc	r26, r1
    3c94:	b1 1d       	adc	r27, r1
    3c96:	80 93 db 01 	sts	0x01DB, r24
    3c9a:	90 93 dc 01 	sts	0x01DC, r25
    3c9e:	a0 93 dd 01 	sts	0x01DD, r26
    3ca2:	b0 93 de 01 	sts	0x01DE, r27
            break;
        default:
            ;
    }
}
    3ca6:	bf 91       	pop	r27
    3ca8:	af 91       	pop	r26
    3caa:	9f 91       	pop	r25
    3cac:	8f 91       	pop	r24
    3cae:	0f 90       	pop	r0
    3cb0:	0f be       	out	0x3f, r0	; 63
    3cb2:	0f 90       	pop	r0
    3cb4:	1f 90       	pop	r1
    3cb6:	18 95       	reti

00003cb8 <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    3cb8:	82 e0       	ldi	r24, 0x02	; 2
    3cba:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    3cbc:	93 e0       	ldi	r25, 0x03	; 3
    3cbe:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    3cc0:	9a ef       	ldi	r25, 0xFA	; 250
    3cc2:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    3cc4:	80 93 6e 00 	sts	0x006E, r24
    3cc8:	08 95       	ret

00003cca <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3cca:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3ccc:	f8 94       	cli
    t = timer_count;
    3cce:	80 91 db 01 	lds	r24, 0x01DB
    3cd2:	90 91 dc 01 	lds	r25, 0x01DC
    3cd6:	a0 91 dd 01 	lds	r26, 0x01DD
    3cda:	b0 91 de 01 	lds	r27, 0x01DE
    SREG = sreg;
    3cde:	2f bf       	out	0x3f, r18	; 63

    return (t & 0xFFFF);
}
    3ce0:	08 95       	ret

00003ce2 <timer_read32>:
inline
uint32_t timer_read32(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3ce2:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3ce4:	f8 94       	cli
    t = timer_count;
    3ce6:	60 91 db 01 	lds	r22, 0x01DB
    3cea:	70 91 dc 01 	lds	r23, 0x01DC
    3cee:	80 91 dd 01 	lds	r24, 0x01DD
    3cf2:	90 91 de 01 	lds	r25, 0x01DE
    SREG = sreg;
    3cf6:	2f bf       	out	0x3f, r18	; 63

    return t;
}
    3cf8:	08 95       	ret

00003cfa <timer_elapsed>:

inline
uint16_t timer_elapsed(uint16_t last)
{
    3cfa:	cf 92       	push	r12
    3cfc:	df 92       	push	r13
    3cfe:	ef 92       	push	r14
    3d00:	ff 92       	push	r15
    3d02:	0f 93       	push	r16
    3d04:	1f 93       	push	r17
    uint32_t t;

    uint8_t sreg = SREG;
    3d06:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3d08:	f8 94       	cli
    t = timer_count;
    3d0a:	40 91 db 01 	lds	r20, 0x01DB
    3d0e:	50 91 dc 01 	lds	r21, 0x01DC
    3d12:	60 91 dd 01 	lds	r22, 0x01DD
    3d16:	70 91 de 01 	lds	r23, 0x01DE
    SREG = sreg;
    3d1a:	2f bf       	out	0x3f, r18	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    3d1c:	6a 01       	movw	r12, r20
    3d1e:	7b 01       	movw	r14, r22
    3d20:	ee 24       	eor	r14, r14
    3d22:	ff 24       	eor	r15, r15
    3d24:	8c 01       	movw	r16, r24
    3d26:	20 e0       	ldi	r18, 0x00	; 0
    3d28:	30 e0       	ldi	r19, 0x00	; 0
    3d2a:	c0 16       	cp	r12, r16
    3d2c:	d1 06       	cpc	r13, r17
    3d2e:	e2 06       	cpc	r14, r18
    3d30:	f3 06       	cpc	r15, r19
    3d32:	10 f4       	brcc	.+4      	; 0x3d38 <timer_elapsed+0x3e>
    3d34:	41 50       	subi	r20, 0x01	; 1
    3d36:	51 09       	sbc	r21, r1
    3d38:	48 1b       	sub	r20, r24
    3d3a:	59 0b       	sbc	r21, r25
}
    3d3c:	ca 01       	movw	r24, r20
    3d3e:	1f 91       	pop	r17
    3d40:	0f 91       	pop	r16
    3d42:	ff 90       	pop	r15
    3d44:	ef 90       	pop	r14
    3d46:	df 90       	pop	r13
    3d48:	cf 90       	pop	r12
    3d4a:	08 95       	ret

00003d4c <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    3d4c:	1f 92       	push	r1
    3d4e:	0f 92       	push	r0
    3d50:	0f b6       	in	r0, 0x3f	; 63
    3d52:	0f 92       	push	r0
    3d54:	11 24       	eor	r1, r1
    3d56:	8f 93       	push	r24
    3d58:	9f 93       	push	r25
    3d5a:	af 93       	push	r26
    3d5c:	bf 93       	push	r27
    timer_count++;
    3d5e:	80 91 db 01 	lds	r24, 0x01DB
    3d62:	90 91 dc 01 	lds	r25, 0x01DC
    3d66:	a0 91 dd 01 	lds	r26, 0x01DD
    3d6a:	b0 91 de 01 	lds	r27, 0x01DE
    3d6e:	01 96       	adiw	r24, 0x01	; 1
    3d70:	a1 1d       	adc	r26, r1
    3d72:	b1 1d       	adc	r27, r1
    3d74:	80 93 db 01 	sts	0x01DB, r24
    3d78:	90 93 dc 01 	sts	0x01DC, r25
    3d7c:	a0 93 dd 01 	sts	0x01DD, r26
    3d80:	b0 93 de 01 	sts	0x01DE, r27
}
    3d84:	bf 91       	pop	r27
    3d86:	af 91       	pop	r26
    3d88:	9f 91       	pop	r25
    3d8a:	8f 91       	pop	r24
    3d8c:	0f 90       	pop	r0
    3d8e:	0f be       	out	0x3f, r0	; 63
    3d90:	0f 90       	pop	r0
    3d92:	1f 90       	pop	r1
    3d94:	18 95       	reti

00003d96 <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    3d96:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <USB_Disable>
    cli();
    3d9a:	f8 94       	cli
    3d9c:	2f ef       	ldi	r18, 0xFF	; 255
    3d9e:	87 ea       	ldi	r24, 0xA7	; 167
    3da0:	91 e6       	ldi	r25, 0x61	; 97
    3da2:	21 50       	subi	r18, 0x01	; 1
    3da4:	80 40       	sbci	r24, 0x00	; 0
    3da6:	90 40       	sbci	r25, 0x00	; 0
    3da8:	e1 f7       	brne	.-8      	; 0x3da2 <bootloader_jump+0xc>
    3daa:	00 c0       	rjmp	.+0      	; 0x3dac <bootloader_jump+0x16>
    3dac:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    3dae:	87 e0       	ldi	r24, 0x07	; 7
    3db0:	90 eb       	ldi	r25, 0xB0	; 176
    3db2:	dc 01       	movw	r26, r24
    3db4:	80 93 f9 01 	sts	0x01F9, r24
    3db8:	90 93 fa 01 	sts	0x01FA, r25
    3dbc:	a0 93 fb 01 	sts	0x01FB, r26
    3dc0:	b0 93 fc 01 	sts	0x01FC, r27
    wdt_enable(WDTO_250MS);
    3dc4:	2c e0       	ldi	r18, 0x0C	; 12
    3dc6:	88 e1       	ldi	r24, 0x18	; 24
    3dc8:	90 e0       	ldi	r25, 0x00	; 0
    3dca:	0f b6       	in	r0, 0x3f	; 63
    3dcc:	f8 94       	cli
    3dce:	a8 95       	wdr
    3dd0:	80 93 60 00 	sts	0x0060, r24
    3dd4:	0f be       	out	0x3f, r0	; 63
    3dd6:	20 93 60 00 	sts	0x0060, r18
    3dda:	ff cf       	rjmp	.-2      	; 0x3dda <bootloader_jump+0x44>

00003ddc <action_for_key>:

/* Converts key to action */
__attribute__ ((weak))
action_t action_for_key(uint8_t layer, keypos_t key)
{
    return (action_t)pgm_read_word(&actionmaps[(layer)][(key.row)][(key.col)]);
    3ddc:	96 e0       	ldi	r25, 0x06	; 6
    3dde:	79 9f       	mul	r23, r25
    3de0:	f0 01       	movw	r30, r0
    3de2:	11 24       	eor	r1, r1
    3de4:	9e e1       	ldi	r25, 0x1E	; 30
    3de6:	89 9f       	mul	r24, r25
    3de8:	e0 0d       	add	r30, r0
    3dea:	f1 1d       	adc	r31, r1
    3dec:	11 24       	eor	r1, r1
    3dee:	e6 0f       	add	r30, r22
    3df0:	f1 1d       	adc	r31, r1
    3df2:	ee 0f       	add	r30, r30
    3df4:	ff 1f       	adc	r31, r31
    3df6:	e0 52       	subi	r30, 0x20	; 32
    3df8:	ff 4f       	sbci	r31, 0xFF	; 255
}
    3dfa:	85 91       	lpm	r24, Z+
    3dfc:	94 91       	lpm	r25, Z
    3dfe:	08 95       	ret

00003e00 <action_get_macro>:
/* Macro */
__attribute__ ((weak))
const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    return MACRO_NONE;
}
    3e00:	80 e0       	ldi	r24, 0x00	; 0
    3e02:	90 e0       	ldi	r25, 0x00	; 0
    3e04:	08 95       	ret

00003e06 <action_function>:

/* Function */
__attribute__ ((weak))
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    3e06:	08 95       	ret

00003e08 <scan_key>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_key(uint16_t code)
{
    3e08:	df 92       	push	r13
    3e0a:	ef 92       	push	r14
    3e0c:	ff 92       	push	r15
    3e0e:	0f 93       	push	r16
    3e10:	1f 93       	push	r17
    3e12:	cf 93       	push	r28
    3e14:	df 93       	push	r29
    3e16:	8c 01       	movw	r16, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3e18:	d1 2c       	mov	r13, r1
        matrix_row_t matrix_row = matrix_get_row(r);
    3e1a:	8d 2d       	mov	r24, r13
    3e1c:	0e 94 6e 08 	call	0x10dc	; 0x10dc <matrix_get_row>
    3e20:	c0 e0       	ldi	r28, 0x00	; 0
    3e22:	d0 e0       	ldi	r29, 0x00	; 0
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    3e24:	e8 2e       	mov	r14, r24
    3e26:	f1 2c       	mov	r15, r1
    3e28:	97 01       	movw	r18, r14
    3e2a:	0c 2e       	mov	r0, r28
    3e2c:	02 c0       	rjmp	.+4      	; 0x3e32 <scan_key+0x2a>
    3e2e:	35 95       	asr	r19
    3e30:	27 95       	ror	r18
    3e32:	0a 94       	dec	r0
    3e34:	e2 f7       	brpl	.-8      	; 0x3e2e <scan_key+0x26>
    3e36:	20 ff       	sbrs	r18, 0
    3e38:	16 c0       	rjmp	.+44     	; 0x3e66 <scan_key+0x5e>
                // read key from Layer 0
                action_t action = action_for_key(0, (keypos_t){ .row = r, .col = c });
    3e3a:	6c 2f       	mov	r22, r28
    3e3c:	7d 2d       	mov	r23, r13
    3e3e:	80 e0       	ldi	r24, 0x00	; 0
    3e40:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <action_for_key>
    3e44:	9c 01       	movw	r18, r24
                if (action.code == code ||
    3e46:	80 17       	cp	r24, r16
    3e48:	91 07       	cpc	r25, r17
    3e4a:	59 f0       	breq	.+22     	; 0x3e62 <scan_key+0x5a>
    3e4c:	83 2f       	mov	r24, r19
    3e4e:	80 7e       	andi	r24, 0xE0	; 224
    3e50:	93 2f       	mov	r25, r19
    3e52:	90 7c       	andi	r25, 0xC0	; 192
    3e54:	11 f0       	breq	.+4      	; 0x3e5a <scan_key+0x52>
                    ((action.kind.id == ACT_LMODS ||
                      action.kind.id == ACT_RMODS ||
                      action.kind.id == ACT_LMODS_TAP ||
                      action.kind.id == ACT_RMODS_TAP ||
    3e56:	80 3a       	cpi	r24, 0xA0	; 160
    3e58:	31 f4       	brne	.+12     	; 0x3e66 <scan_key+0x5e>
                      action.kind.id == ACT_LAYER_TAP ||
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
                     action.key.code == code)) {
    3e5a:	30 e0       	ldi	r19, 0x00	; 0
                    ((action.kind.id == ACT_LMODS ||
                      action.kind.id == ACT_RMODS ||
                      action.kind.id == ACT_LMODS_TAP ||
                      action.kind.id == ACT_RMODS_TAP ||
                      action.kind.id == ACT_LAYER_TAP ||
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
    3e5c:	20 17       	cp	r18, r16
    3e5e:	31 07       	cpc	r19, r17
    3e60:	11 f4       	brne	.+4      	; 0x3e66 <scan_key+0x5e>
                     action.key.code == code)) {
                    return true;
    3e62:	81 e0       	ldi	r24, 0x01	; 1
    3e64:	09 c0       	rjmp	.+18     	; 0x3e78 <scan_key+0x70>
    3e66:	21 96       	adiw	r28, 0x01	; 1

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    3e68:	c6 30       	cpi	r28, 0x06	; 6
    3e6a:	d1 05       	cpc	r29, r1
    3e6c:	e9 f6       	brne	.-70     	; 0x3e28 <scan_key+0x20>
    }
}

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3e6e:	d3 94       	inc	r13
    3e70:	85 e0       	ldi	r24, 0x05	; 5
    3e72:	d8 12       	cpse	r13, r24
    3e74:	d2 cf       	rjmp	.-92     	; 0x3e1a <scan_key+0x12>
                    return true;
                }
            }
        }
    }
    return false;
    3e76:	80 e0       	ldi	r24, 0x00	; 0
}
    3e78:	df 91       	pop	r29
    3e7a:	cf 91       	pop	r28
    3e7c:	1f 91       	pop	r17
    3e7e:	0f 91       	pop	r16
    3e80:	ff 90       	pop	r15
    3e82:	ef 90       	pop	r14
    3e84:	df 90       	pop	r13
    3e86:	08 95       	ret

00003e88 <bootmagic_scan_key>:

bool bootmagic_scan_key(uint16_t code)
{
    3e88:	cf 93       	push	r28
    3e8a:	df 93       	push	r29
    3e8c:	ec 01       	movw	r28, r24
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;
    3e8e:	84 e1       	ldi	r24, 0x14	; 20
    3e90:	90 e0       	ldi	r25, 0x00	; 0
    3e92:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <scan_key>
    3e96:	88 23       	and	r24, r24
    3e98:	29 f0       	breq	.+10     	; 0x3ea4 <bootmagic_scan_key+0x1c>

    return scan_key(code);
    3e9a:	ce 01       	movw	r24, r28
}
    3e9c:	df 91       	pop	r29
    3e9e:	cf 91       	pop	r28

bool bootmagic_scan_key(uint16_t code)
{
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;

    return scan_key(code);
    3ea0:	0c 94 04 1f 	jmp	0x3e08	; 0x3e08 <scan_key>
}
    3ea4:	80 e0       	ldi	r24, 0x00	; 0
    3ea6:	df 91       	pop	r29
    3ea8:	cf 91       	pop	r28
    3eaa:	08 95       	ret

00003eac <bootmagic>:
#include "hook.h"

keymap_config_t keymap_config;

void bootmagic(void)
{
    3eac:	cf 93       	push	r28
    /* check signature */
    if (!eeconfig_is_enabled()) {
    3eae:	0e 94 c1 20 	call	0x4182	; 0x4182 <eeconfig_is_enabled>
    3eb2:	81 11       	cpse	r24, r1
    3eb4:	02 c0       	rjmp	.+4      	; 0x3eba <bootmagic+0xe>
        eeconfig_init();
    3eb6:	0e 94 a2 20 	call	0x4144	; 0x4144 <eeconfig_init>
    }

    /* do scans in case of bounce */
    print("bootmagic scan: ... ");
    3eba:	8c e2       	ldi	r24, 0x2C	; 44
    3ebc:	95 e0       	ldi	r25, 0x05	; 5
    3ebe:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    uint8_t scan = 100;
    while (scan--) { matrix_scan(); wait_ms(10); }
    3ec2:	c5 e6       	ldi	r28, 0x65	; 101
    3ec4:	c1 50       	subi	r28, 0x01	; 1
    3ec6:	49 f0       	breq	.+18     	; 0x3eda <bootmagic+0x2e>
    3ec8:	0e 94 cb 07 	call	0xf96	; 0xf96 <matrix_scan>
    3ecc:	8f e3       	ldi	r24, 0x3F	; 63
    3ece:	9c e9       	ldi	r25, 0x9C	; 156
    3ed0:	01 97       	sbiw	r24, 0x01	; 1
    3ed2:	f1 f7       	brne	.-4      	; 0x3ed0 <bootmagic+0x24>
    3ed4:	00 c0       	rjmp	.+0      	; 0x3ed6 <bootmagic+0x2a>
    3ed6:	00 00       	nop
    3ed8:	f5 cf       	rjmp	.-22     	; 0x3ec4 <bootmagic+0x18>
    print("done.\n");
    3eda:	85 e2       	ldi	r24, 0x25	; 37
    3edc:	95 e0       	ldi	r25, 0x05	; 5
    3ede:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>

    /* bootmagic skip */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SKIP)) {
    3ee2:	89 e2       	ldi	r24, 0x29	; 41
    3ee4:	90 e0       	ldi	r25, 0x00	; 0
    3ee6:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <bootmagic_scan_key>
    3eea:	81 11       	cpse	r24, r1
    3eec:	29 c1       	rjmp	.+594    	; 0x4140 <bootmagic+0x294>
        return;
    }

    /* eeconfig clear */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    3eee:	8a e2       	ldi	r24, 0x2A	; 42
    3ef0:	90 e0       	ldi	r25, 0x00	; 0
    3ef2:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <bootmagic_scan_key>
    3ef6:	81 11       	cpse	r24, r1
        eeconfig_init();
    3ef8:	0e 94 a2 20 	call	0x4144	; 0x4144 <eeconfig_init>
    }

    /* bootloader */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_BOOTLOADER)) {
    3efc:	85 e0       	ldi	r24, 0x05	; 5
    3efe:	90 e0       	ldi	r25, 0x00	; 0
    3f00:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <bootmagic_scan_key>
    3f04:	81 11       	cpse	r24, r1
        bootloader_jump();
    3f06:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <bootloader_jump>
    }

    /* user-defined checks */
    hook_bootmagic();
    3f0a:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <hook_bootmagic>

    /* debug enable */
    debug_config.raw = eeconfig_read_debug();
    3f0e:	0e 94 cc 20 	call	0x4198	; 0x4198 <eeconfig_read_debug>
    3f12:	80 93 d9 01 	sts	0x01D9, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    3f16:	87 e0       	ldi	r24, 0x07	; 7
    3f18:	90 e0       	ldi	r25, 0x00	; 0
    3f1a:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <bootmagic_scan_key>
    3f1e:	88 23       	and	r24, r24
    3f20:	b1 f1       	breq	.+108    	; 0x3f8e <bootmagic+0xe2>
        if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    3f22:	8b e1       	ldi	r24, 0x1B	; 27
    3f24:	90 e0       	ldi	r25, 0x00	; 0
    3f26:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <bootmagic_scan_key>
    3f2a:	88 23       	and	r24, r24
    3f2c:	51 f0       	breq	.+20     	; 0x3f42 <bootmagic+0x96>
            debug_config.matrix = !debug_config.matrix;
    3f2e:	90 91 d9 01 	lds	r25, 0x01D9
    3f32:	91 fb       	bst	r25, 1
    3f34:	88 27       	eor	r24, r24
    3f36:	80 f9       	bld	r24, 0
    3f38:	21 e0       	ldi	r18, 0x01	; 1
    3f3a:	82 27       	eor	r24, r18
    3f3c:	80 fb       	bst	r24, 0
    3f3e:	91 f9       	bld	r25, 1
    3f40:	24 c0       	rjmp	.+72     	; 0x3f8a <bootmagic+0xde>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    3f42:	8e e0       	ldi	r24, 0x0E	; 14
    3f44:	90 e0       	ldi	r25, 0x00	; 0
    3f46:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <bootmagic_scan_key>
    3f4a:	88 23       	and	r24, r24
    3f4c:	51 f0       	breq	.+20     	; 0x3f62 <bootmagic+0xb6>
            debug_config.keyboard = !debug_config.keyboard;
    3f4e:	90 91 d9 01 	lds	r25, 0x01D9
    3f52:	92 fb       	bst	r25, 2
    3f54:	88 27       	eor	r24, r24
    3f56:	80 f9       	bld	r24, 0
    3f58:	21 e0       	ldi	r18, 0x01	; 1
    3f5a:	82 27       	eor	r24, r18
    3f5c:	80 fb       	bst	r24, 0
    3f5e:	92 f9       	bld	r25, 2
    3f60:	14 c0       	rjmp	.+40     	; 0x3f8a <bootmagic+0xde>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    3f62:	80 e1       	ldi	r24, 0x10	; 16
    3f64:	90 e0       	ldi	r25, 0x00	; 0
    3f66:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <bootmagic_scan_key>
    3f6a:	90 91 d9 01 	lds	r25, 0x01D9
    3f6e:	88 23       	and	r24, r24
    3f70:	41 f0       	breq	.+16     	; 0x3f82 <bootmagic+0xd6>
            debug_config.mouse = !debug_config.mouse;
    3f72:	93 fb       	bst	r25, 3
    3f74:	88 27       	eor	r24, r24
    3f76:	80 f9       	bld	r24, 0
    3f78:	21 e0       	ldi	r18, 0x01	; 1
    3f7a:	82 27       	eor	r24, r18
    3f7c:	80 fb       	bst	r24, 0
    3f7e:	93 f9       	bld	r25, 3
    3f80:	04 c0       	rjmp	.+8      	; 0x3f8a <bootmagic+0xde>
        } else {
            debug_config.enable = !debug_config.enable;
    3f82:	89 2f       	mov	r24, r25
    3f84:	80 95       	com	r24
    3f86:	80 fb       	bst	r24, 0
    3f88:	90 f9       	bld	r25, 0
    3f8a:	90 93 d9 01 	sts	0x01D9, r25
        }
    }
    eeconfig_write_debug(debug_config.raw);
    3f8e:	80 91 d9 01 	lds	r24, 0x01D9
    3f92:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <eeconfig_write_debug>

    /* keymap config */
    keymap_config.raw = eeconfig_read_keymap();
    3f96:	0e 94 de 20 	call	0x41bc	; 0x41bc <eeconfig_read_keymap>
    3f9a:	80 93 f7 01 	sts	0x01F7, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    3f9e:	80 ee       	ldi	r24, 0xE0	; 224
    3fa0:	90 e0       	ldi	r25, 0x00	; 0
    3fa2:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <bootmagic_scan_key>
    3fa6:	88 23       	and	r24, r24
    3fa8:	41 f0       	breq	.+16     	; 0x3fba <bootmagic+0x10e>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    3faa:	80 91 f7 01 	lds	r24, 0x01F7
    3fae:	98 2f       	mov	r25, r24
    3fb0:	90 95       	com	r25
    3fb2:	90 fb       	bst	r25, 0
    3fb4:	80 f9       	bld	r24, 0
    3fb6:	80 93 f7 01 	sts	0x01F7, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    3fba:	89 e3       	ldi	r24, 0x39	; 57
    3fbc:	90 e0       	ldi	r25, 0x00	; 0
    3fbe:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <bootmagic_scan_key>
    3fc2:	88 23       	and	r24, r24
    3fc4:	59 f0       	breq	.+22     	; 0x3fdc <bootmagic+0x130>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    3fc6:	90 91 f7 01 	lds	r25, 0x01F7
    3fca:	91 fb       	bst	r25, 1
    3fcc:	88 27       	eor	r24, r24
    3fce:	80 f9       	bld	r24, 0
    3fd0:	21 e0       	ldi	r18, 0x01	; 1
    3fd2:	82 27       	eor	r24, r18
    3fd4:	80 fb       	bst	r24, 0
    3fd6:	91 f9       	bld	r25, 1
    3fd8:	90 93 f7 01 	sts	0x01F7, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    3fdc:	82 ee       	ldi	r24, 0xE2	; 226
    3fde:	90 e0       	ldi	r25, 0x00	; 0
    3fe0:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <bootmagic_scan_key>
    3fe4:	88 23       	and	r24, r24
    3fe6:	59 f0       	breq	.+22     	; 0x3ffe <bootmagic+0x152>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    3fe8:	90 91 f7 01 	lds	r25, 0x01F7
    3fec:	92 fb       	bst	r25, 2
    3fee:	88 27       	eor	r24, r24
    3ff0:	80 f9       	bld	r24, 0
    3ff2:	21 e0       	ldi	r18, 0x01	; 1
    3ff4:	82 27       	eor	r24, r18
    3ff6:	80 fb       	bst	r24, 0
    3ff8:	92 f9       	bld	r25, 2
    3ffa:	90 93 f7 01 	sts	0x01F7, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    3ffe:	86 ee       	ldi	r24, 0xE6	; 230
    4000:	90 e0       	ldi	r25, 0x00	; 0
    4002:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <bootmagic_scan_key>
    4006:	88 23       	and	r24, r24
    4008:	59 f0       	breq	.+22     	; 0x4020 <bootmagic+0x174>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    400a:	90 91 f7 01 	lds	r25, 0x01F7
    400e:	93 fb       	bst	r25, 3
    4010:	88 27       	eor	r24, r24
    4012:	80 f9       	bld	r24, 0
    4014:	21 e0       	ldi	r18, 0x01	; 1
    4016:	82 27       	eor	r24, r18
    4018:	80 fb       	bst	r24, 0
    401a:	93 f9       	bld	r25, 3
    401c:	90 93 f7 01 	sts	0x01F7, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_NO_GUI)) {
    4020:	83 ee       	ldi	r24, 0xE3	; 227
    4022:	90 e0       	ldi	r25, 0x00	; 0
    4024:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <bootmagic_scan_key>
    4028:	88 23       	and	r24, r24
    402a:	59 f0       	breq	.+22     	; 0x4042 <bootmagic+0x196>
        keymap_config.no_gui = !keymap_config.no_gui;
    402c:	90 91 f7 01 	lds	r25, 0x01F7
    4030:	94 fb       	bst	r25, 4
    4032:	88 27       	eor	r24, r24
    4034:	80 f9       	bld	r24, 0
    4036:	21 e0       	ldi	r18, 0x01	; 1
    4038:	82 27       	eor	r24, r18
    403a:	80 fb       	bst	r24, 0
    403c:	94 f9       	bld	r25, 4
    403e:	90 93 f7 01 	sts	0x01F7, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    4042:	85 e3       	ldi	r24, 0x35	; 53
    4044:	90 e0       	ldi	r25, 0x00	; 0
    4046:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <bootmagic_scan_key>
    404a:	88 23       	and	r24, r24
    404c:	59 f0       	breq	.+22     	; 0x4064 <bootmagic+0x1b8>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    404e:	90 91 f7 01 	lds	r25, 0x01F7
    4052:	95 fb       	bst	r25, 5
    4054:	88 27       	eor	r24, r24
    4056:	80 f9       	bld	r24, 0
    4058:	21 e0       	ldi	r18, 0x01	; 1
    405a:	82 27       	eor	r24, r18
    405c:	80 fb       	bst	r24, 0
    405e:	95 f9       	bld	r25, 5
    4060:	90 93 f7 01 	sts	0x01F7, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    4064:	81 e3       	ldi	r24, 0x31	; 49
    4066:	90 e0       	ldi	r25, 0x00	; 0
    4068:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <bootmagic_scan_key>
    406c:	88 23       	and	r24, r24
    406e:	59 f0       	breq	.+22     	; 0x4086 <bootmagic+0x1da>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    4070:	90 91 f7 01 	lds	r25, 0x01F7
    4074:	96 fb       	bst	r25, 6
    4076:	88 27       	eor	r24, r24
    4078:	80 f9       	bld	r24, 0
    407a:	21 e0       	ldi	r18, 0x01	; 1
    407c:	82 27       	eor	r24, r18
    407e:	80 fb       	bst	r24, 0
    4080:	96 f9       	bld	r25, 6
    4082:	90 93 f7 01 	sts	0x01F7, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_HOST_NKRO)) {
    4086:	81 e1       	ldi	r24, 0x11	; 17
    4088:	90 e0       	ldi	r25, 0x00	; 0
    408a:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <bootmagic_scan_key>
    408e:	88 23       	and	r24, r24
    4090:	59 f0       	breq	.+22     	; 0x40a8 <bootmagic+0x1fc>
        keymap_config.nkro = !keymap_config.nkro;
    4092:	90 91 f7 01 	lds	r25, 0x01F7
    4096:	97 fb       	bst	r25, 7
    4098:	88 27       	eor	r24, r24
    409a:	80 f9       	bld	r24, 0
    409c:	21 e0       	ldi	r18, 0x01	; 1
    409e:	82 27       	eor	r24, r18
    40a0:	80 fb       	bst	r24, 0
    40a2:	97 f9       	bld	r25, 7
    40a4:	90 93 f7 01 	sts	0x01F7, r25
    }
    eeconfig_write_keymap(keymap_config.raw);
    40a8:	80 91 f7 01 	lds	r24, 0x01F7
    40ac:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <eeconfig_write_keymap>

#ifdef NKRO_ENABLE
    keyboard_nkro = keymap_config.nkro;
    40b0:	80 91 f7 01 	lds	r24, 0x01F7
    40b4:	87 fb       	bst	r24, 7
    40b6:	88 27       	eor	r24, r24
    40b8:	80 f9       	bld	r24, 0
    40ba:	80 93 0c 01 	sts	0x010C, r24
#endif

    /* default layer */
    uint8_t default_layer = 0;
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    40be:	87 e2       	ldi	r24, 0x27	; 39
    40c0:	90 e0       	ldi	r25, 0x00	; 0
    40c2:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <bootmagic_scan_key>
    40c6:	c8 2f       	mov	r28, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    40c8:	8e e1       	ldi	r24, 0x1E	; 30
    40ca:	90 e0       	ldi	r25, 0x00	; 0
    40cc:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <bootmagic_scan_key>
    40d0:	81 11       	cpse	r24, r1
    40d2:	c2 60       	ori	r28, 0x02	; 2
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    40d4:	8f e1       	ldi	r24, 0x1F	; 31
    40d6:	90 e0       	ldi	r25, 0x00	; 0
    40d8:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <bootmagic_scan_key>
    40dc:	81 11       	cpse	r24, r1
    40de:	c4 60       	ori	r28, 0x04	; 4
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    40e0:	80 e2       	ldi	r24, 0x20	; 32
    40e2:	90 e0       	ldi	r25, 0x00	; 0
    40e4:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <bootmagic_scan_key>
    40e8:	81 11       	cpse	r24, r1
    40ea:	c8 60       	ori	r28, 0x08	; 8
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    40ec:	81 e2       	ldi	r24, 0x21	; 33
    40ee:	90 e0       	ldi	r25, 0x00	; 0
    40f0:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <bootmagic_scan_key>
    40f4:	81 11       	cpse	r24, r1
    40f6:	c0 61       	ori	r28, 0x10	; 16
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    40f8:	82 e2       	ldi	r24, 0x22	; 34
    40fa:	90 e0       	ldi	r25, 0x00	; 0
    40fc:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <bootmagic_scan_key>
    4100:	81 11       	cpse	r24, r1
    4102:	c0 62       	ori	r28, 0x20	; 32
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    4104:	83 e2       	ldi	r24, 0x23	; 35
    4106:	90 e0       	ldi	r25, 0x00	; 0
    4108:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <bootmagic_scan_key>
    410c:	81 11       	cpse	r24, r1
    410e:	c0 64       	ori	r28, 0x40	; 64
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    4110:	84 e2       	ldi	r24, 0x24	; 36
    4112:	90 e0       	ldi	r25, 0x00	; 0
    4114:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <bootmagic_scan_key>
    4118:	88 23       	and	r24, r24
    411a:	11 f0       	breq	.+4      	; 0x4120 <bootmagic+0x274>
    411c:	c0 68       	ori	r28, 0x80	; 128
    411e:	02 c0       	rjmp	.+4      	; 0x4124 <bootmagic+0x278>
    if (default_layer) {
    4120:	cc 23       	and	r28, r28
    4122:	29 f0       	breq	.+10     	; 0x412e <bootmagic+0x282>
        eeconfig_write_default_layer(default_layer);
    4124:	8c 2f       	mov	r24, r28
    4126:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    412a:	6c 2f       	mov	r22, r28
    412c:	03 c0       	rjmp	.+6      	; 0x4134 <bootmagic+0x288>
    } else {
        default_layer = eeconfig_read_default_layer();
    412e:	0e 94 d5 20 	call	0x41aa	; 0x41aa <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    4132:	68 2f       	mov	r22, r24
    4134:	70 e0       	ldi	r23, 0x00	; 0
    4136:	80 e0       	ldi	r24, 0x00	; 0
    4138:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    413a:	cf 91       	pop	r28
    if (default_layer) {
        eeconfig_write_default_layer(default_layer);
        default_layer_set((uint32_t)default_layer);
    } else {
        default_layer = eeconfig_read_default_layer();
        default_layer_set((uint32_t)default_layer);
    413c:	0c 94 8a 1b 	jmp	0x3714	; 0x3714 <default_layer_set>
    }
}
    4140:	cf 91       	pop	r28
    4142:	08 95       	ret

00004144 <eeconfig_init>:
#include <avr/eeprom.h>
#include "eeconfig.h"

void eeconfig_init(void)
{
    eeprom_write_word(EECONFIG_MAGIC,          EECONFIG_MAGIC_NUMBER);
    4144:	6d ee       	ldi	r22, 0xED	; 237
    4146:	7e ef       	ldi	r23, 0xFE	; 254
    4148:	80 e0       	ldi	r24, 0x00	; 0
    414a:	90 e0       	ldi	r25, 0x00	; 0
    414c:	0e 94 4e 2b 	call	0x569c	; 0x569c <__eewr_word_m32u4>
    eeprom_write_byte(EECONFIG_DEBUG,          0);
    4150:	60 e0       	ldi	r22, 0x00	; 0
    4152:	82 e0       	ldi	r24, 0x02	; 2
    4154:	90 e0       	ldi	r25, 0x00	; 0
    4156:	0e 94 40 2b 	call	0x5680	; 0x5680 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_DEFAULT_LAYER,  0);
    415a:	60 e0       	ldi	r22, 0x00	; 0
    415c:	83 e0       	ldi	r24, 0x03	; 3
    415e:	90 e0       	ldi	r25, 0x00	; 0
    4160:	0e 94 40 2b 	call	0x5680	; 0x5680 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_KEYMAP,         0);
    4164:	60 e0       	ldi	r22, 0x00	; 0
    4166:	84 e0       	ldi	r24, 0x04	; 4
    4168:	90 e0       	ldi	r25, 0x00	; 0
    416a:	0e 94 40 2b 	call	0x5680	; 0x5680 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_MOUSEKEY_ACCEL, 0);
    416e:	60 e0       	ldi	r22, 0x00	; 0
    4170:	85 e0       	ldi	r24, 0x05	; 5
    4172:	90 e0       	ldi	r25, 0x00	; 0
    4174:	0e 94 40 2b 	call	0x5680	; 0x5680 <__eewr_byte_m32u4>
#ifdef BACKLIGHT_ENABLE
    eeprom_write_byte(EECONFIG_BACKLIGHT,      0);
    4178:	60 e0       	ldi	r22, 0x00	; 0
    417a:	86 e0       	ldi	r24, 0x06	; 6
    417c:	90 e0       	ldi	r25, 0x00	; 0
    417e:	0c 94 40 2b 	jmp	0x5680	; 0x5680 <__eewr_byte_m32u4>

00004182 <eeconfig_is_enabled>:
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    4182:	80 e0       	ldi	r24, 0x00	; 0
    4184:	90 e0       	ldi	r25, 0x00	; 0
    4186:	0e 94 3a 2b 	call	0x5674	; 0x5674 <__eerd_word_m32u4>
    418a:	21 e0       	ldi	r18, 0x01	; 1
    418c:	8d 3e       	cpi	r24, 0xED	; 237
    418e:	9e 4f       	sbci	r25, 0xFE	; 254
    4190:	09 f0       	breq	.+2      	; 0x4194 <eeconfig_is_enabled+0x12>
    4192:	20 e0       	ldi	r18, 0x00	; 0
}
    4194:	82 2f       	mov	r24, r18
    4196:	08 95       	ret

00004198 <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    4198:	82 e0       	ldi	r24, 0x02	; 2
    419a:	90 e0       	ldi	r25, 0x00	; 0
    419c:	0c 94 32 2b 	jmp	0x5664	; 0x5664 <__eerd_byte_m32u4>

000041a0 <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    41a0:	68 2f       	mov	r22, r24
    41a2:	82 e0       	ldi	r24, 0x02	; 2
    41a4:	90 e0       	ldi	r25, 0x00	; 0
    41a6:	0c 94 40 2b 	jmp	0x5680	; 0x5680 <__eewr_byte_m32u4>

000041aa <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    41aa:	83 e0       	ldi	r24, 0x03	; 3
    41ac:	90 e0       	ldi	r25, 0x00	; 0
    41ae:	0c 94 32 2b 	jmp	0x5664	; 0x5664 <__eerd_byte_m32u4>

000041b2 <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    41b2:	68 2f       	mov	r22, r24
    41b4:	83 e0       	ldi	r24, 0x03	; 3
    41b6:	90 e0       	ldi	r25, 0x00	; 0
    41b8:	0c 94 40 2b 	jmp	0x5680	; 0x5680 <__eewr_byte_m32u4>

000041bc <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    41bc:	84 e0       	ldi	r24, 0x04	; 4
    41be:	90 e0       	ldi	r25, 0x00	; 0
    41c0:	0c 94 32 2b 	jmp	0x5664	; 0x5664 <__eerd_byte_m32u4>

000041c4 <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    41c4:	68 2f       	mov	r22, r24
    41c6:	84 e0       	ldi	r24, 0x04	; 4
    41c8:	90 e0       	ldi	r25, 0x00	; 0
    41ca:	0c 94 40 2b 	jmp	0x5680	; 0x5680 <__eewr_byte_m32u4>

000041ce <eeconfig_read_backlight>:

#ifdef BACKLIGHT_ENABLE
uint8_t eeconfig_read_backlight(void)      { return eeprom_read_byte(EECONFIG_BACKLIGHT); }
    41ce:	86 e0       	ldi	r24, 0x06	; 6
    41d0:	90 e0       	ldi	r25, 0x00	; 0
    41d2:	0c 94 32 2b 	jmp	0x5664	; 0x5664 <__eerd_byte_m32u4>

000041d6 <eeconfig_write_backlight>:
void eeconfig_write_backlight(uint8_t val) { eeprom_write_byte(EECONFIG_BACKLIGHT, val); }
    41d6:	68 2f       	mov	r22, r24
    41d8:	86 e0       	ldi	r24, 0x06	; 6
    41da:	90 e0       	ldi	r25, 0x00	; 0
    41dc:	0c 94 40 2b 	jmp	0x5680	; 0x5680 <__eewr_byte_m32u4>

000041e0 <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    41e0:	80 91 e1 01 	lds	r24, 0x01E1
    41e4:	80 ff       	sbrs	r24, 0
    41e6:	0b c0       	rjmp	.+22     	; 0x41fe <move_unit+0x1e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    41e8:	60 91 12 01 	lds	r22, 0x0112
    41ec:	85 e0       	ldi	r24, 0x05	; 5
    41ee:	68 9f       	mul	r22, r24
    41f0:	b0 01       	movw	r22, r0
    41f2:	11 24       	eor	r1, r1
    41f4:	75 95       	asr	r23
    41f6:	67 95       	ror	r22
    41f8:	75 95       	asr	r23
    41fa:	67 95       	ror	r22
    41fc:	2a c0       	rjmp	.+84     	; 0x4252 <move_unit+0x72>
    } else if (mousekey_accel & (1<<1)) {
    41fe:	81 ff       	sbrs	r24, 1
    4200:	09 c0       	rjmp	.+18     	; 0x4214 <move_unit+0x34>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    4202:	60 91 12 01 	lds	r22, 0x0112
    4206:	85 e0       	ldi	r24, 0x05	; 5
    4208:	68 9f       	mul	r22, r24
    420a:	b0 01       	movw	r22, r0
    420c:	11 24       	eor	r1, r1
    420e:	75 95       	asr	r23
    4210:	67 95       	ror	r22
    4212:	1f c0       	rjmp	.+62     	; 0x4252 <move_unit+0x72>
    } else if (mousekey_accel & (1<<2)) {
    4214:	82 ff       	sbrs	r24, 2
    4216:	07 c0       	rjmp	.+14     	; 0x4226 <move_unit+0x46>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    4218:	60 91 12 01 	lds	r22, 0x0112
    421c:	85 e0       	ldi	r24, 0x05	; 5
    421e:	68 9f       	mul	r22, r24
    4220:	b0 01       	movw	r22, r0
    4222:	11 24       	eor	r1, r1
    4224:	16 c0       	rjmp	.+44     	; 0x4252 <move_unit+0x72>
    } else if (mousekey_repeat == 0) {
    4226:	40 91 e2 01 	lds	r20, 0x01E2
    422a:	44 23       	and	r20, r20
    422c:	c9 f0       	breq	.+50     	; 0x4260 <move_unit+0x80>
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    422e:	60 91 11 01 	lds	r22, 0x0111
    4232:	46 17       	cp	r20, r22
    4234:	88 f7       	brcc	.-30     	; 0x4218 <move_unit+0x38>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    4236:	20 91 12 01 	lds	r18, 0x0112
    423a:	85 e0       	ldi	r24, 0x05	; 5
    423c:	28 9f       	mul	r18, r24
    423e:	90 01       	movw	r18, r0
    4240:	11 24       	eor	r1, r1
    4242:	42 9f       	mul	r20, r18
    4244:	c0 01       	movw	r24, r0
    4246:	43 9f       	mul	r20, r19
    4248:	90 0d       	add	r25, r0
    424a:	11 24       	eor	r1, r1
    424c:	70 e0       	ldi	r23, 0x00	; 0
    424e:	0e 94 04 2b 	call	0x5608	; 0x5608 <__divmodhi4>
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    4252:	60 38       	cpi	r22, 0x80	; 128
    4254:	71 05       	cpc	r23, r1
    4256:	40 f4       	brcc	.+16     	; 0x4268 <move_unit+0x88>
    4258:	61 15       	cp	r22, r1
    425a:	71 05       	cpc	r23, r1
    425c:	39 f0       	breq	.+14     	; 0x426c <move_unit+0x8c>
    425e:	02 c0       	rjmp	.+4      	; 0x4264 <move_unit+0x84>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_MOVE_DELTA;
    4260:	65 e0       	ldi	r22, 0x05	; 5
    4262:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    4264:	86 2f       	mov	r24, r22
    4266:	08 95       	ret
    4268:	8f e7       	ldi	r24, 0x7F	; 127
    426a:	08 95       	ret
    426c:	81 e0       	ldi	r24, 0x01	; 1
}
    426e:	08 95       	ret

00004270 <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    4270:	80 91 e1 01 	lds	r24, 0x01E1
    4274:	80 ff       	sbrs	r24, 0
    4276:	08 c0       	rjmp	.+16     	; 0x4288 <wheel_unit+0x18>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    4278:	60 91 10 01 	lds	r22, 0x0110
    427c:	70 e0       	ldi	r23, 0x00	; 0
    427e:	75 95       	asr	r23
    4280:	67 95       	ror	r22
    4282:	75 95       	asr	r23
    4284:	67 95       	ror	r22
    4286:	21 c0       	rjmp	.+66     	; 0x42ca <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<1)) {
    4288:	81 ff       	sbrs	r24, 1
    428a:	06 c0       	rjmp	.+12     	; 0x4298 <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    428c:	60 91 10 01 	lds	r22, 0x0110
    4290:	70 e0       	ldi	r23, 0x00	; 0
    4292:	75 95       	asr	r23
    4294:	67 95       	ror	r22
    4296:	19 c0       	rjmp	.+50     	; 0x42ca <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<2)) {
    4298:	82 ff       	sbrs	r24, 2
    429a:	04 c0       	rjmp	.+8      	; 0x42a4 <wheel_unit+0x34>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    429c:	60 91 10 01 	lds	r22, 0x0110
    42a0:	70 e0       	ldi	r23, 0x00	; 0
    42a2:	10 c0       	rjmp	.+32     	; 0x42c4 <wheel_unit+0x54>
    } else if (mousekey_repeat == 0) {
    42a4:	80 91 e2 01 	lds	r24, 0x01E2
    42a8:	88 23       	and	r24, r24
    42aa:	c1 f0       	breq	.+48     	; 0x42dc <wheel_unit+0x6c>
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    42ac:	60 91 0f 01 	lds	r22, 0x010F
    42b0:	86 17       	cp	r24, r22
    42b2:	a0 f7       	brcc	.-24     	; 0x429c <wheel_unit+0x2c>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    42b4:	90 91 10 01 	lds	r25, 0x0110
    42b8:	98 9f       	mul	r25, r24
    42ba:	c0 01       	movw	r24, r0
    42bc:	11 24       	eor	r1, r1
    42be:	70 e0       	ldi	r23, 0x00	; 0
    42c0:	0e 94 04 2b 	call	0x5608	; 0x5608 <__divmodhi4>
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    42c4:	60 38       	cpi	r22, 0x80	; 128
    42c6:	71 05       	cpc	r23, r1
    42c8:	28 f4       	brcc	.+10     	; 0x42d4 <wheel_unit+0x64>
    42ca:	61 15       	cp	r22, r1
    42cc:	71 05       	cpc	r23, r1
    42ce:	21 f0       	breq	.+8      	; 0x42d8 <wheel_unit+0x68>
    42d0:	86 2f       	mov	r24, r22
    42d2:	08 95       	ret
    42d4:	8f e7       	ldi	r24, 0x7F	; 127
    42d6:	08 95       	ret
    42d8:	81 e0       	ldi	r24, 0x01	; 1
    42da:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_WHEEL_DELTA;
    42dc:	61 e0       	ldi	r22, 0x01	; 1
    42de:	70 e0       	ldi	r23, 0x00	; 0
    42e0:	f4 cf       	rjmp	.-24     	; 0x42ca <wheel_unit+0x5a>

000042e2 <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    42e2:	80 3f       	cpi	r24, 0xF0	; 240
    42e4:	21 f4       	brne	.+8      	; 0x42ee <mousekey_on+0xc>
    42e6:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <move_unit>
    42ea:	81 95       	neg	r24
    42ec:	04 c0       	rjmp	.+8      	; 0x42f6 <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    42ee:	81 3f       	cpi	r24, 0xF1	; 241
    42f0:	29 f4       	brne	.+10     	; 0x42fc <mousekey_on+0x1a>
    42f2:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <move_unit>
    42f6:	80 93 e5 01 	sts	0x01E5, r24
    42fa:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    42fc:	82 3f       	cpi	r24, 0xF2	; 242
    42fe:	21 f4       	brne	.+8      	; 0x4308 <mousekey_on+0x26>
    4300:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <move_unit>
    4304:	81 95       	neg	r24
    4306:	04 c0       	rjmp	.+8      	; 0x4310 <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    4308:	83 3f       	cpi	r24, 0xF3	; 243
    430a:	29 f4       	brne	.+10     	; 0x4316 <mousekey_on+0x34>
    430c:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <move_unit>
    4310:	80 93 e4 01 	sts	0x01E4, r24
    4314:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    4316:	89 3f       	cpi	r24, 0xF9	; 249
    4318:	19 f4       	brne	.+6      	; 0x4320 <mousekey_on+0x3e>
    431a:	0e 94 38 21 	call	0x4270	; 0x4270 <wheel_unit>
    431e:	05 c0       	rjmp	.+10     	; 0x432a <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    4320:	8a 3f       	cpi	r24, 0xFA	; 250
    4322:	31 f4       	brne	.+12     	; 0x4330 <mousekey_on+0x4e>
    4324:	0e 94 38 21 	call	0x4270	; 0x4270 <wheel_unit>
    4328:	81 95       	neg	r24
    432a:	80 93 e6 01 	sts	0x01E6, r24
    432e:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    4330:	8b 3f       	cpi	r24, 0xFB	; 251
    4332:	21 f4       	brne	.+8      	; 0x433c <mousekey_on+0x5a>
    4334:	0e 94 38 21 	call	0x4270	; 0x4270 <wheel_unit>
    4338:	81 95       	neg	r24
    433a:	04 c0       	rjmp	.+8      	; 0x4344 <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    433c:	8c 3f       	cpi	r24, 0xFC	; 252
    433e:	29 f4       	brne	.+10     	; 0x434a <mousekey_on+0x68>
    4340:	0e 94 38 21 	call	0x4270	; 0x4270 <wheel_unit>
    4344:	80 93 e7 01 	sts	0x01E7, r24
    4348:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    434a:	84 3f       	cpi	r24, 0xF4	; 244
    434c:	21 f4       	brne	.+8      	; 0x4356 <mousekey_on+0x74>
    434e:	80 91 e3 01 	lds	r24, 0x01E3
    4352:	81 60       	ori	r24, 0x01	; 1
    4354:	17 c0       	rjmp	.+46     	; 0x4384 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    4356:	85 3f       	cpi	r24, 0xF5	; 245
    4358:	21 f4       	brne	.+8      	; 0x4362 <mousekey_on+0x80>
    435a:	80 91 e3 01 	lds	r24, 0x01E3
    435e:	82 60       	ori	r24, 0x02	; 2
    4360:	11 c0       	rjmp	.+34     	; 0x4384 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    4362:	86 3f       	cpi	r24, 0xF6	; 246
    4364:	21 f4       	brne	.+8      	; 0x436e <mousekey_on+0x8c>
    4366:	80 91 e3 01 	lds	r24, 0x01E3
    436a:	84 60       	ori	r24, 0x04	; 4
    436c:	0b c0       	rjmp	.+22     	; 0x4384 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    436e:	87 3f       	cpi	r24, 0xF7	; 247
    4370:	21 f4       	brne	.+8      	; 0x437a <mousekey_on+0x98>
    4372:	80 91 e3 01 	lds	r24, 0x01E3
    4376:	88 60       	ori	r24, 0x08	; 8
    4378:	05 c0       	rjmp	.+10     	; 0x4384 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    437a:	88 3f       	cpi	r24, 0xF8	; 248
    437c:	31 f4       	brne	.+12     	; 0x438a <mousekey_on+0xa8>
    437e:	80 91 e3 01 	lds	r24, 0x01E3
    4382:	80 61       	ori	r24, 0x10	; 16
    4384:	80 93 e3 01 	sts	0x01E3, r24
    4388:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    438a:	8d 3f       	cpi	r24, 0xFD	; 253
    438c:	21 f4       	brne	.+8      	; 0x4396 <mousekey_on+0xb4>
    438e:	80 91 e1 01 	lds	r24, 0x01E1
    4392:	81 60       	ori	r24, 0x01	; 1
    4394:	0b c0       	rjmp	.+22     	; 0x43ac <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    4396:	8e 3f       	cpi	r24, 0xFE	; 254
    4398:	21 f4       	brne	.+8      	; 0x43a2 <mousekey_on+0xc0>
    439a:	80 91 e1 01 	lds	r24, 0x01E1
    439e:	82 60       	ori	r24, 0x02	; 2
    43a0:	05 c0       	rjmp	.+10     	; 0x43ac <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    43a2:	8f 3f       	cpi	r24, 0xFF	; 255
    43a4:	29 f4       	brne	.+10     	; 0x43b0 <mousekey_on+0xce>
    43a6:	80 91 e1 01 	lds	r24, 0x01E1
    43aa:	84 60       	ori	r24, 0x04	; 4
    43ac:	80 93 e1 01 	sts	0x01E1, r24
    43b0:	08 95       	ret

000043b2 <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    43b2:	80 3f       	cpi	r24, 0xF0	; 240
    43b4:	39 f4       	brne	.+14     	; 0x43c4 <mousekey_off+0x12>
    43b6:	80 91 e5 01 	lds	r24, 0x01E5
    43ba:	87 ff       	sbrs	r24, 7
    43bc:	6c c0       	rjmp	.+216    	; 0x4496 <mousekey_off+0xe4>
    43be:	10 92 e5 01 	sts	0x01E5, r1
    43c2:	69 c0       	rjmp	.+210    	; 0x4496 <mousekey_off+0xe4>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    43c4:	81 3f       	cpi	r24, 0xF1	; 241
    43c6:	29 f4       	brne	.+10     	; 0x43d2 <mousekey_off+0x20>
    43c8:	80 91 e5 01 	lds	r24, 0x01E5
    43cc:	18 16       	cp	r1, r24
    43ce:	bc f3       	brlt	.-18     	; 0x43be <mousekey_off+0xc>
    43d0:	62 c0       	rjmp	.+196    	; 0x4496 <mousekey_off+0xe4>
    43d2:	90 91 e4 01 	lds	r25, 0x01E4
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    43d6:	82 3f       	cpi	r24, 0xF2	; 242
    43d8:	29 f4       	brne	.+10     	; 0x43e4 <mousekey_off+0x32>
    43da:	97 ff       	sbrs	r25, 7
    43dc:	5c c0       	rjmp	.+184    	; 0x4496 <mousekey_off+0xe4>
    43de:	10 92 e4 01 	sts	0x01E4, r1
    43e2:	59 c0       	rjmp	.+178    	; 0x4496 <mousekey_off+0xe4>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    43e4:	83 3f       	cpi	r24, 0xF3	; 243
    43e6:	19 f4       	brne	.+6      	; 0x43ee <mousekey_off+0x3c>
    43e8:	19 16       	cp	r1, r25
    43ea:	cc f3       	brlt	.-14     	; 0x43de <mousekey_off+0x2c>
    43ec:	54 c0       	rjmp	.+168    	; 0x4496 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    43ee:	89 3f       	cpi	r24, 0xF9	; 249
    43f0:	41 f4       	brne	.+16     	; 0x4402 <mousekey_off+0x50>
    43f2:	80 91 e6 01 	lds	r24, 0x01E6
    43f6:	18 16       	cp	r1, r24
    43f8:	0c f0       	brlt	.+2      	; 0x43fc <mousekey_off+0x4a>
    43fa:	4d c0       	rjmp	.+154    	; 0x4496 <mousekey_off+0xe4>
    43fc:	10 92 e6 01 	sts	0x01E6, r1
    4400:	4a c0       	rjmp	.+148    	; 0x4496 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    4402:	8a 3f       	cpi	r24, 0xFA	; 250
    4404:	29 f4       	brne	.+10     	; 0x4410 <mousekey_off+0x5e>
    4406:	80 91 e6 01 	lds	r24, 0x01E6
    440a:	87 ff       	sbrs	r24, 7
    440c:	44 c0       	rjmp	.+136    	; 0x4496 <mousekey_off+0xe4>
    440e:	f6 cf       	rjmp	.-20     	; 0x43fc <mousekey_off+0x4a>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    4410:	8b 3f       	cpi	r24, 0xFB	; 251
    4412:	39 f4       	brne	.+14     	; 0x4422 <mousekey_off+0x70>
    4414:	80 91 e7 01 	lds	r24, 0x01E7
    4418:	87 ff       	sbrs	r24, 7
    441a:	3d c0       	rjmp	.+122    	; 0x4496 <mousekey_off+0xe4>
    441c:	10 92 e7 01 	sts	0x01E7, r1
    4420:	3a c0       	rjmp	.+116    	; 0x4496 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    4422:	8c 3f       	cpi	r24, 0xFC	; 252
    4424:	29 f4       	brne	.+10     	; 0x4430 <mousekey_off+0x7e>
    4426:	80 91 e7 01 	lds	r24, 0x01E7
    442a:	18 16       	cp	r1, r24
    442c:	bc f3       	brlt	.-18     	; 0x441c <mousekey_off+0x6a>
    442e:	33 c0       	rjmp	.+102    	; 0x4496 <mousekey_off+0xe4>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    4430:	84 3f       	cpi	r24, 0xF4	; 244
    4432:	21 f4       	brne	.+8      	; 0x443c <mousekey_off+0x8a>
    4434:	80 91 e3 01 	lds	r24, 0x01E3
    4438:	8e 7f       	andi	r24, 0xFE	; 254
    443a:	17 c0       	rjmp	.+46     	; 0x446a <mousekey_off+0xb8>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    443c:	85 3f       	cpi	r24, 0xF5	; 245
    443e:	21 f4       	brne	.+8      	; 0x4448 <mousekey_off+0x96>
    4440:	80 91 e3 01 	lds	r24, 0x01E3
    4444:	8d 7f       	andi	r24, 0xFD	; 253
    4446:	11 c0       	rjmp	.+34     	; 0x446a <mousekey_off+0xb8>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    4448:	86 3f       	cpi	r24, 0xF6	; 246
    444a:	21 f4       	brne	.+8      	; 0x4454 <mousekey_off+0xa2>
    444c:	80 91 e3 01 	lds	r24, 0x01E3
    4450:	8b 7f       	andi	r24, 0xFB	; 251
    4452:	0b c0       	rjmp	.+22     	; 0x446a <mousekey_off+0xb8>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    4454:	87 3f       	cpi	r24, 0xF7	; 247
    4456:	21 f4       	brne	.+8      	; 0x4460 <mousekey_off+0xae>
    4458:	80 91 e3 01 	lds	r24, 0x01E3
    445c:	87 7f       	andi	r24, 0xF7	; 247
    445e:	05 c0       	rjmp	.+10     	; 0x446a <mousekey_off+0xb8>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    4460:	88 3f       	cpi	r24, 0xF8	; 248
    4462:	31 f4       	brne	.+12     	; 0x4470 <mousekey_off+0xbe>
    4464:	80 91 e3 01 	lds	r24, 0x01E3
    4468:	8f 7e       	andi	r24, 0xEF	; 239
    446a:	80 93 e3 01 	sts	0x01E3, r24
    446e:	13 c0       	rjmp	.+38     	; 0x4496 <mousekey_off+0xe4>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    4470:	8d 3f       	cpi	r24, 0xFD	; 253
    4472:	21 f4       	brne	.+8      	; 0x447c <mousekey_off+0xca>
    4474:	80 91 e1 01 	lds	r24, 0x01E1
    4478:	8e 7f       	andi	r24, 0xFE	; 254
    447a:	0b c0       	rjmp	.+22     	; 0x4492 <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    447c:	8e 3f       	cpi	r24, 0xFE	; 254
    447e:	21 f4       	brne	.+8      	; 0x4488 <mousekey_off+0xd6>
    4480:	80 91 e1 01 	lds	r24, 0x01E1
    4484:	8d 7f       	andi	r24, 0xFD	; 253
    4486:	05 c0       	rjmp	.+10     	; 0x4492 <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    4488:	8f 3f       	cpi	r24, 0xFF	; 255
    448a:	29 f4       	brne	.+10     	; 0x4496 <mousekey_off+0xe4>
    448c:	80 91 e1 01 	lds	r24, 0x01E1
    4490:	8b 7f       	andi	r24, 0xFB	; 251
    4492:	80 93 e1 01 	sts	0x01E1, r24

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    4496:	80 91 e4 01 	lds	r24, 0x01E4
    449a:	81 11       	cpse	r24, r1
    449c:	0e c0       	rjmp	.+28     	; 0x44ba <mousekey_off+0x108>
    449e:	80 91 e5 01 	lds	r24, 0x01E5
    44a2:	81 11       	cpse	r24, r1
    44a4:	0a c0       	rjmp	.+20     	; 0x44ba <mousekey_off+0x108>
    44a6:	80 91 e6 01 	lds	r24, 0x01E6
    44aa:	81 11       	cpse	r24, r1
    44ac:	06 c0       	rjmp	.+12     	; 0x44ba <mousekey_off+0x108>
    44ae:	80 91 e7 01 	lds	r24, 0x01E7
    44b2:	81 11       	cpse	r24, r1
    44b4:	02 c0       	rjmp	.+4      	; 0x44ba <mousekey_off+0x108>
        mousekey_repeat = 0;
    44b6:	10 92 e2 01 	sts	0x01E2, r1
    44ba:	08 95       	ret

000044bc <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    44bc:	80 91 d9 01 	lds	r24, 0x01D9
    44c0:	83 ff       	sbrs	r24, 3
    44c2:	7e c0       	rjmp	.+252    	; 0x45c0 <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    44c4:	88 e6       	ldi	r24, 0x68	; 104
    44c6:	95 e0       	ldi	r25, 0x05	; 5
    44c8:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    phex(mouse_report.buttons); print("|");
    44cc:	80 91 e3 01 	lds	r24, 0x01E3
    44d0:	1f 92       	push	r1
    44d2:	8f 93       	push	r24
    44d4:	83 e6       	ldi	r24, 0x63	; 99
    44d6:	95 e0       	ldi	r25, 0x05	; 5
    44d8:	9f 93       	push	r25
    44da:	8f 93       	push	r24
    44dc:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    44e0:	81 e6       	ldi	r24, 0x61	; 97
    44e2:	95 e0       	ldi	r25, 0x05	; 5
    44e4:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    print_decs(mouse_report.x); print(" ");
    44e8:	20 91 e4 01 	lds	r18, 0x01E4
    44ec:	82 2f       	mov	r24, r18
    44ee:	99 27       	eor	r25, r25
    44f0:	87 fd       	sbrc	r24, 7
    44f2:	90 95       	com	r25
    44f4:	9f 93       	push	r25
    44f6:	2f 93       	push	r18
    44f8:	8e e5       	ldi	r24, 0x5E	; 94
    44fa:	95 e0       	ldi	r25, 0x05	; 5
    44fc:	9f 93       	push	r25
    44fe:	8f 93       	push	r24
    4500:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    4504:	8c e5       	ldi	r24, 0x5C	; 92
    4506:	95 e0       	ldi	r25, 0x05	; 5
    4508:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    print_decs(mouse_report.y); print(" ");
    450c:	20 91 e5 01 	lds	r18, 0x01E5
    4510:	82 2f       	mov	r24, r18
    4512:	99 27       	eor	r25, r25
    4514:	87 fd       	sbrc	r24, 7
    4516:	90 95       	com	r25
    4518:	9f 93       	push	r25
    451a:	2f 93       	push	r18
    451c:	89 e5       	ldi	r24, 0x59	; 89
    451e:	95 e0       	ldi	r25, 0x05	; 5
    4520:	9f 93       	push	r25
    4522:	8f 93       	push	r24
    4524:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    4528:	87 e5       	ldi	r24, 0x57	; 87
    452a:	95 e0       	ldi	r25, 0x05	; 5
    452c:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    print_decs(mouse_report.v); print(" ");
    4530:	20 91 e6 01 	lds	r18, 0x01E6
    4534:	82 2f       	mov	r24, r18
    4536:	99 27       	eor	r25, r25
    4538:	87 fd       	sbrc	r24, 7
    453a:	90 95       	com	r25
    453c:	9f 93       	push	r25
    453e:	2f 93       	push	r18
    4540:	84 e5       	ldi	r24, 0x54	; 84
    4542:	95 e0       	ldi	r25, 0x05	; 5
    4544:	9f 93       	push	r25
    4546:	8f 93       	push	r24
    4548:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    454c:	82 e5       	ldi	r24, 0x52	; 82
    454e:	95 e0       	ldi	r25, 0x05	; 5
    4550:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    print_decs(mouse_report.h); print("](");
    4554:	20 91 e7 01 	lds	r18, 0x01E7
    4558:	82 2f       	mov	r24, r18
    455a:	99 27       	eor	r25, r25
    455c:	87 fd       	sbrc	r24, 7
    455e:	90 95       	com	r25
    4560:	9f 93       	push	r25
    4562:	2f 93       	push	r18
    4564:	8f e4       	ldi	r24, 0x4F	; 79
    4566:	95 e0       	ldi	r25, 0x05	; 5
    4568:	9f 93       	push	r25
    456a:	8f 93       	push	r24
    456c:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    4570:	8c e4       	ldi	r24, 0x4C	; 76
    4572:	95 e0       	ldi	r25, 0x05	; 5
    4574:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    print_dec(mousekey_repeat); print("/");
    4578:	80 91 e2 01 	lds	r24, 0x01E2
    457c:	1f 92       	push	r1
    457e:	8f 93       	push	r24
    4580:	89 e4       	ldi	r24, 0x49	; 73
    4582:	95 e0       	ldi	r25, 0x05	; 5
    4584:	9f 93       	push	r25
    4586:	8f 93       	push	r24
    4588:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    458c:	87 e4       	ldi	r24, 0x47	; 71
    458e:	95 e0       	ldi	r25, 0x05	; 5
    4590:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    print_dec(mousekey_accel); print(")\n");
    4594:	80 91 e1 01 	lds	r24, 0x01E1
    4598:	1f 92       	push	r1
    459a:	8f 93       	push	r24
    459c:	84 e4       	ldi	r24, 0x44	; 68
    459e:	95 e0       	ldi	r25, 0x05	; 5
    45a0:	9f 93       	push	r25
    45a2:	8f 93       	push	r24
    45a4:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    45a8:	81 e4       	ldi	r24, 0x41	; 65
    45aa:	95 e0       	ldi	r25, 0x05	; 5
    45ac:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    45b0:	8d b7       	in	r24, 0x3d	; 61
    45b2:	9e b7       	in	r25, 0x3e	; 62
    45b4:	4c 96       	adiw	r24, 0x1c	; 28
    45b6:	0f b6       	in	r0, 0x3f	; 63
    45b8:	f8 94       	cli
    45ba:	9e bf       	out	0x3e, r25	; 62
    45bc:	0f be       	out	0x3f, r0	; 63
    45be:	8d bf       	out	0x3d, r24	; 61
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    45c0:	83 ee       	ldi	r24, 0xE3	; 227
    45c2:	91 e0       	ldi	r25, 0x01	; 1
    45c4:	0e 94 0d 11 	call	0x221a	; 0x221a <host_mouse_send>
    last_timer = timer_read();
    45c8:	0e 94 65 1e 	call	0x3cca	; 0x3cca <timer_read>
    45cc:	90 93 e0 01 	sts	0x01E0, r25
    45d0:	80 93 df 01 	sts	0x01DF, r24
    45d4:	08 95       	ret

000045d6 <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    45d6:	1f 93       	push	r17
    45d8:	cf 93       	push	r28
    45da:	df 93       	push	r29
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    45dc:	80 91 df 01 	lds	r24, 0x01DF
    45e0:	90 91 e0 01 	lds	r25, 0x01E0
    45e4:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <timer_elapsed>
    45e8:	40 91 e2 01 	lds	r20, 0x01E2
    45ec:	44 23       	and	r20, r20
    45ee:	21 f0       	breq	.+8      	; 0x45f8 <mousekey_task+0x22>
    45f0:	20 91 13 01 	lds	r18, 0x0113
    45f4:	30 e0       	ldi	r19, 0x00	; 0
    45f6:	06 c0       	rjmp	.+12     	; 0x4604 <mousekey_task+0x2e>
    45f8:	20 91 14 01 	lds	r18, 0x0114
    45fc:	5a e0       	ldi	r21, 0x0A	; 10
    45fe:	25 9f       	mul	r18, r21
    4600:	90 01       	movw	r18, r0
    4602:	11 24       	eor	r1, r1
    4604:	82 17       	cp	r24, r18
    4606:	93 07       	cpc	r25, r19
    4608:	08 f4       	brcc	.+2      	; 0x460c <mousekey_task+0x36>
    460a:	82 c0       	rjmp	.+260    	; 0x4710 <mousekey_task+0x13a>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    460c:	80 91 e4 01 	lds	r24, 0x01E4
    4610:	10 91 e5 01 	lds	r17, 0x01E5
    4614:	d0 91 e6 01 	lds	r29, 0x01E6
    4618:	c0 91 e7 01 	lds	r28, 0x01E7
    461c:	81 11       	cpse	r24, r1
    461e:	07 c0       	rjmp	.+14     	; 0x462e <mousekey_task+0x58>
    4620:	11 11       	cpse	r17, r1
    4622:	05 c0       	rjmp	.+10     	; 0x462e <mousekey_task+0x58>
    4624:	d1 11       	cpse	r29, r1
    4626:	03 c0       	rjmp	.+6      	; 0x462e <mousekey_task+0x58>
    4628:	cc 23       	and	r28, r28
    462a:	09 f4       	brne	.+2      	; 0x462e <mousekey_task+0x58>
    462c:	71 c0       	rjmp	.+226    	; 0x4710 <mousekey_task+0x13a>
        return;

    if (mousekey_repeat != UINT8_MAX)
    462e:	4f 3f       	cpi	r20, 0xFF	; 255
    4630:	19 f0       	breq	.+6      	; 0x4638 <mousekey_task+0x62>
        mousekey_repeat++;
    4632:	4f 5f       	subi	r20, 0xFF	; 255
    4634:	40 93 e2 01 	sts	0x01E2, r20


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    4638:	18 16       	cp	r1, r24
    463a:	24 f4       	brge	.+8      	; 0x4644 <mousekey_task+0x6e>
    463c:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <move_unit>
    4640:	80 93 e4 01 	sts	0x01E4, r24
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    4644:	80 91 e4 01 	lds	r24, 0x01E4
    4648:	87 ff       	sbrs	r24, 7
    464a:	05 c0       	rjmp	.+10     	; 0x4656 <mousekey_task+0x80>
    464c:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <move_unit>
    4650:	81 95       	neg	r24
    4652:	80 93 e4 01 	sts	0x01E4, r24
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    4656:	11 16       	cp	r1, r17
    4658:	24 f4       	brge	.+8      	; 0x4662 <mousekey_task+0x8c>
    465a:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <move_unit>
    465e:	80 93 e5 01 	sts	0x01E5, r24
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    4662:	80 91 e5 01 	lds	r24, 0x01E5
    4666:	87 ff       	sbrs	r24, 7
    4668:	05 c0       	rjmp	.+10     	; 0x4674 <mousekey_task+0x9e>
    466a:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <move_unit>
    466e:	81 95       	neg	r24
    4670:	80 93 e5 01 	sts	0x01E5, r24

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    4674:	60 91 e4 01 	lds	r22, 0x01E4
    4678:	66 23       	and	r22, r22
    467a:	39 f1       	breq	.+78     	; 0x46ca <mousekey_task+0xf4>
    467c:	10 91 e5 01 	lds	r17, 0x01E5
    4680:	11 23       	and	r17, r17
    4682:	19 f1       	breq	.+70     	; 0x46ca <mousekey_task+0xf4>
        mouse_report.x *= 0.7;
    4684:	77 27       	eor	r23, r23
    4686:	67 fd       	sbrc	r22, 7
    4688:	70 95       	com	r23
    468a:	87 2f       	mov	r24, r23
    468c:	97 2f       	mov	r25, r23
    468e:	0e 94 09 2a 	call	0x5412	; 0x5412 <__floatsisf>
    4692:	23 e3       	ldi	r18, 0x33	; 51
    4694:	33 e3       	ldi	r19, 0x33	; 51
    4696:	43 e3       	ldi	r20, 0x33	; 51
    4698:	5f e3       	ldi	r21, 0x3F	; 63
    469a:	0e 94 6d 2a 	call	0x54da	; 0x54da <__mulsf3>
    469e:	0e 94 d6 29 	call	0x53ac	; 0x53ac <__fixsfsi>
    46a2:	60 93 e4 01 	sts	0x01E4, r22
        mouse_report.y *= 0.7;
    46a6:	61 2f       	mov	r22, r17
    46a8:	77 27       	eor	r23, r23
    46aa:	67 fd       	sbrc	r22, 7
    46ac:	70 95       	com	r23
    46ae:	87 2f       	mov	r24, r23
    46b0:	97 2f       	mov	r25, r23
    46b2:	0e 94 09 2a 	call	0x5412	; 0x5412 <__floatsisf>
    46b6:	23 e3       	ldi	r18, 0x33	; 51
    46b8:	33 e3       	ldi	r19, 0x33	; 51
    46ba:	43 e3       	ldi	r20, 0x33	; 51
    46bc:	5f e3       	ldi	r21, 0x3F	; 63
    46be:	0e 94 6d 2a 	call	0x54da	; 0x54da <__mulsf3>
    46c2:	0e 94 d6 29 	call	0x53ac	; 0x53ac <__fixsfsi>
    46c6:	60 93 e5 01 	sts	0x01E5, r22
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    46ca:	1d 16       	cp	r1, r29
    46cc:	24 f4       	brge	.+8      	; 0x46d6 <mousekey_task+0x100>
    46ce:	0e 94 38 21 	call	0x4270	; 0x4270 <wheel_unit>
    46d2:	80 93 e6 01 	sts	0x01E6, r24
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    46d6:	80 91 e6 01 	lds	r24, 0x01E6
    46da:	87 ff       	sbrs	r24, 7
    46dc:	05 c0       	rjmp	.+10     	; 0x46e8 <mousekey_task+0x112>
    46de:	0e 94 38 21 	call	0x4270	; 0x4270 <wheel_unit>
    46e2:	81 95       	neg	r24
    46e4:	80 93 e6 01 	sts	0x01E6, r24
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    46e8:	1c 16       	cp	r1, r28
    46ea:	24 f4       	brge	.+8      	; 0x46f4 <mousekey_task+0x11e>
    46ec:	0e 94 38 21 	call	0x4270	; 0x4270 <wheel_unit>
    46f0:	80 93 e7 01 	sts	0x01E7, r24
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    46f4:	80 91 e7 01 	lds	r24, 0x01E7
    46f8:	87 ff       	sbrs	r24, 7
    46fa:	05 c0       	rjmp	.+10     	; 0x4706 <mousekey_task+0x130>
    46fc:	0e 94 38 21 	call	0x4270	; 0x4270 <wheel_unit>
    4700:	81 95       	neg	r24
    4702:	80 93 e7 01 	sts	0x01E7, r24

    mousekey_send();
}
    4706:	df 91       	pop	r29
    4708:	cf 91       	pop	r28
    470a:	1f 91       	pop	r17
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
    470c:	0c 94 5e 22 	jmp	0x44bc	; 0x44bc <mousekey_send>
}
    4710:	df 91       	pop	r29
    4712:	cf 91       	pop	r28
    4714:	1f 91       	pop	r17
    4716:	08 95       	ret

00004718 <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    4718:	e3 ee       	ldi	r30, 0xE3	; 227
    471a:	f1 e0       	ldi	r31, 0x01	; 1
    471c:	85 e0       	ldi	r24, 0x05	; 5
    471e:	df 01       	movw	r26, r30
    4720:	1d 92       	st	X+, r1
    4722:	8a 95       	dec	r24
    4724:	e9 f7       	brne	.-6      	; 0x4720 <mousekey_clear+0x8>
    mousekey_repeat = 0;
    4726:	10 92 e2 01 	sts	0x01E2, r1
    mousekey_accel = 0;
    472a:	10 92 e1 01 	sts	0x01E1, r1
    472e:	08 95       	ret

00004730 <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    4730:	8b e8       	ldi	r24, 0x8B	; 139
    4732:	97 e0       	ldi	r25, 0x07	; 7
    4734:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    4738:	1f 92       	push	r1
    473a:	81 e0       	ldi	r24, 0x01	; 1
    473c:	8f 93       	push	r24
    473e:	1f 92       	push	r1
    4740:	85 e0       	ldi	r24, 0x05	; 5
    4742:	8f 93       	push	r24
    4744:	8d e3       	ldi	r24, 0x3D	; 61
    4746:	97 e0       	ldi	r25, 0x07	; 7
    4748:	9f 93       	push	r25
    474a:	8f 93       	push	r24
    474c:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    4750:	0f 90       	pop	r0
    4752:	0f 90       	pop	r0
    4754:	0f 90       	pop	r0
    4756:	0f 90       	pop	r0
    4758:	0f 90       	pop	r0
    475a:	0f 90       	pop	r0
    475c:	08 95       	ret

0000475e <mousekey_param_inc>:

//#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
#define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
    475e:	83 30       	cpi	r24, 0x03	; 3
    4760:	e9 f1       	breq	.+122    	; 0x47dc <mousekey_param_inc+0x7e>
    4762:	28 f4       	brcc	.+10     	; 0x476e <mousekey_param_inc+0x10>
    4764:	81 30       	cpi	r24, 0x01	; 1
    4766:	61 f0       	breq	.+24     	; 0x4780 <mousekey_param_inc+0x22>
    4768:	82 30       	cpi	r24, 0x02	; 2
    476a:	09 f1       	breq	.+66     	; 0x47ae <mousekey_param_inc+0x50>
    476c:	08 95       	ret
    476e:	85 30       	cpi	r24, 0x05	; 5
    4770:	09 f4       	brne	.+2      	; 0x4774 <mousekey_param_inc+0x16>
    4772:	62 c0       	rjmp	.+196    	; 0x4838 <mousekey_param_inc+0xda>
    4774:	08 f4       	brcc	.+2      	; 0x4778 <mousekey_param_inc+0x1a>
    4776:	49 c0       	rjmp	.+146    	; 0x480a <mousekey_param_inc+0xac>
    4778:	86 30       	cpi	r24, 0x06	; 6
    477a:	09 f4       	brne	.+2      	; 0x477e <mousekey_param_inc+0x20>
    477c:	74 c0       	rjmp	.+232    	; 0x4866 <mousekey_param_inc+0x108>
    477e:	08 95       	ret
        case 1:
            if (mk_delay + inc < UINT8_MAX)
    4780:	20 91 14 01 	lds	r18, 0x0114
    4784:	86 2f       	mov	r24, r22
    4786:	90 e0       	ldi	r25, 0x00	; 0
    4788:	82 0f       	add	r24, r18
    478a:	91 1d       	adc	r25, r1
    478c:	8f 3f       	cpi	r24, 0xFF	; 255
    478e:	91 05       	cpc	r25, r1
    4790:	20 f4       	brcc	.+8      	; 0x479a <mousekey_param_inc+0x3c>
                mk_delay += inc;
    4792:	62 0f       	add	r22, r18
    4794:	60 93 14 01 	sts	0x0114, r22
    4798:	03 c0       	rjmp	.+6      	; 0x47a0 <mousekey_param_inc+0x42>
            else
                mk_delay = UINT8_MAX;
    479a:	8f ef       	ldi	r24, 0xFF	; 255
    479c:	80 93 14 01 	sts	0x0114, r24
            PRINT_SET_VAL(mk_delay);
    47a0:	80 91 14 01 	lds	r24, 0x0114
    47a4:	1f 92       	push	r1
    47a6:	8f 93       	push	r24
    47a8:	86 e7       	ldi	r24, 0x76	; 118
    47aa:	96 e0       	ldi	r25, 0x06	; 6
    47ac:	72 c0       	rjmp	.+228    	; 0x4892 <mousekey_param_inc+0x134>
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
    47ae:	20 91 13 01 	lds	r18, 0x0113
    47b2:	86 2f       	mov	r24, r22
    47b4:	90 e0       	ldi	r25, 0x00	; 0
    47b6:	82 0f       	add	r24, r18
    47b8:	91 1d       	adc	r25, r1
    47ba:	8f 3f       	cpi	r24, 0xFF	; 255
    47bc:	91 05       	cpc	r25, r1
    47be:	20 f4       	brcc	.+8      	; 0x47c8 <mousekey_param_inc+0x6a>
                mk_interval += inc;
    47c0:	62 0f       	add	r22, r18
    47c2:	60 93 13 01 	sts	0x0113, r22
    47c6:	03 c0       	rjmp	.+6      	; 0x47ce <mousekey_param_inc+0x70>
            else
                mk_interval = UINT8_MAX;
    47c8:	8f ef       	ldi	r24, 0xFF	; 255
    47ca:	80 93 13 01 	sts	0x0113, r24
            PRINT_SET_VAL(mk_interval);
    47ce:	80 91 13 01 	lds	r24, 0x0113
    47d2:	1f 92       	push	r1
    47d4:	8f 93       	push	r24
    47d6:	84 e6       	ldi	r24, 0x64	; 100
    47d8:	96 e0       	ldi	r25, 0x06	; 6
    47da:	5b c0       	rjmp	.+182    	; 0x4892 <mousekey_param_inc+0x134>
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
    47dc:	20 91 12 01 	lds	r18, 0x0112
    47e0:	86 2f       	mov	r24, r22
    47e2:	90 e0       	ldi	r25, 0x00	; 0
    47e4:	82 0f       	add	r24, r18
    47e6:	91 1d       	adc	r25, r1
    47e8:	8f 3f       	cpi	r24, 0xFF	; 255
    47ea:	91 05       	cpc	r25, r1
    47ec:	20 f4       	brcc	.+8      	; 0x47f6 <mousekey_param_inc+0x98>
                mk_max_speed += inc;
    47ee:	62 0f       	add	r22, r18
    47f0:	60 93 12 01 	sts	0x0112, r22
    47f4:	03 c0       	rjmp	.+6      	; 0x47fc <mousekey_param_inc+0x9e>
            else
                mk_max_speed = UINT8_MAX;
    47f6:	8f ef       	ldi	r24, 0xFF	; 255
    47f8:	80 93 12 01 	sts	0x0112, r24
            PRINT_SET_VAL(mk_max_speed);
    47fc:	80 91 12 01 	lds	r24, 0x0112
    4800:	1f 92       	push	r1
    4802:	8f 93       	push	r24
    4804:	81 e5       	ldi	r24, 0x51	; 81
    4806:	96 e0       	ldi	r25, 0x06	; 6
    4808:	44 c0       	rjmp	.+136    	; 0x4892 <mousekey_param_inc+0x134>
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
    480a:	20 91 11 01 	lds	r18, 0x0111
    480e:	86 2f       	mov	r24, r22
    4810:	90 e0       	ldi	r25, 0x00	; 0
    4812:	82 0f       	add	r24, r18
    4814:	91 1d       	adc	r25, r1
    4816:	8f 3f       	cpi	r24, 0xFF	; 255
    4818:	91 05       	cpc	r25, r1
    481a:	20 f4       	brcc	.+8      	; 0x4824 <mousekey_param_inc+0xc6>
                mk_time_to_max += inc;
    481c:	62 0f       	add	r22, r18
    481e:	60 93 11 01 	sts	0x0111, r22
    4822:	03 c0       	rjmp	.+6      	; 0x482a <mousekey_param_inc+0xcc>
            else
                mk_time_to_max = UINT8_MAX;
    4824:	8f ef       	ldi	r24, 0xFF	; 255
    4826:	80 93 11 01 	sts	0x0111, r24
            PRINT_SET_VAL(mk_time_to_max);
    482a:	80 91 11 01 	lds	r24, 0x0111
    482e:	1f 92       	push	r1
    4830:	8f 93       	push	r24
    4832:	8c e3       	ldi	r24, 0x3C	; 60
    4834:	96 e0       	ldi	r25, 0x06	; 6
    4836:	2d c0       	rjmp	.+90     	; 0x4892 <mousekey_param_inc+0x134>
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    4838:	20 91 10 01 	lds	r18, 0x0110
    483c:	86 2f       	mov	r24, r22
    483e:	90 e0       	ldi	r25, 0x00	; 0
    4840:	82 0f       	add	r24, r18
    4842:	91 1d       	adc	r25, r1
    4844:	8f 3f       	cpi	r24, 0xFF	; 255
    4846:	91 05       	cpc	r25, r1
    4848:	20 f4       	brcc	.+8      	; 0x4852 <mousekey_param_inc+0xf4>
                mk_wheel_max_speed += inc;
    484a:	62 0f       	add	r22, r18
    484c:	60 93 10 01 	sts	0x0110, r22
    4850:	03 c0       	rjmp	.+6      	; 0x4858 <mousekey_param_inc+0xfa>
            else
                mk_wheel_max_speed = UINT8_MAX;
    4852:	8f ef       	ldi	r24, 0xFF	; 255
    4854:	80 93 10 01 	sts	0x0110, r24
            PRINT_SET_VAL(mk_wheel_max_speed);
    4858:	80 91 10 01 	lds	r24, 0x0110
    485c:	1f 92       	push	r1
    485e:	8f 93       	push	r24
    4860:	83 e2       	ldi	r24, 0x23	; 35
    4862:	96 e0       	ldi	r25, 0x06	; 6
    4864:	16 c0       	rjmp	.+44     	; 0x4892 <mousekey_param_inc+0x134>
            break;
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    4866:	20 91 0f 01 	lds	r18, 0x010F
    486a:	86 2f       	mov	r24, r22
    486c:	90 e0       	ldi	r25, 0x00	; 0
    486e:	82 0f       	add	r24, r18
    4870:	91 1d       	adc	r25, r1
    4872:	8f 3f       	cpi	r24, 0xFF	; 255
    4874:	91 05       	cpc	r25, r1
    4876:	20 f4       	brcc	.+8      	; 0x4880 <mousekey_param_inc+0x122>
                mk_wheel_time_to_max += inc;
    4878:	62 0f       	add	r22, r18
    487a:	60 93 0f 01 	sts	0x010F, r22
    487e:	03 c0       	rjmp	.+6      	; 0x4886 <mousekey_param_inc+0x128>
            else
                mk_wheel_time_to_max = UINT8_MAX;
    4880:	8f ef       	ldi	r24, 0xFF	; 255
    4882:	80 93 0f 01 	sts	0x010F, r24
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4886:	80 91 0f 01 	lds	r24, 0x010F
    488a:	1f 92       	push	r1
    488c:	8f 93       	push	r24
    488e:	88 e0       	ldi	r24, 0x08	; 8
    4890:	96 e0       	ldi	r25, 0x06	; 6
    4892:	9f 93       	push	r25
    4894:	8f 93       	push	r24
    4896:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
            break;
    489a:	0f 90       	pop	r0
    489c:	0f 90       	pop	r0
    489e:	0f 90       	pop	r0
    48a0:	0f 90       	pop	r0
    48a2:	08 95       	ret

000048a4 <mousekey_param_dec>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
    48a4:	83 30       	cpi	r24, 0x03	; 3
    48a6:	81 f1       	breq	.+96     	; 0x4908 <mousekey_param_dec+0x64>
    48a8:	28 f4       	brcc	.+10     	; 0x48b4 <mousekey_param_dec+0x10>
    48aa:	81 30       	cpi	r24, 0x01	; 1
    48ac:	59 f0       	breq	.+22     	; 0x48c4 <mousekey_param_dec+0x20>
    48ae:	82 30       	cpi	r24, 0x02	; 2
    48b0:	d1 f0       	breq	.+52     	; 0x48e6 <mousekey_param_dec+0x42>
    48b2:	08 95       	ret
    48b4:	85 30       	cpi	r24, 0x05	; 5
    48b6:	09 f4       	brne	.+2      	; 0x48ba <mousekey_param_dec+0x16>
    48b8:	49 c0       	rjmp	.+146    	; 0x494c <mousekey_param_dec+0xa8>
    48ba:	b8 f1       	brcs	.+110    	; 0x492a <mousekey_param_dec+0x86>
    48bc:	86 30       	cpi	r24, 0x06	; 6
    48be:	09 f4       	brne	.+2      	; 0x48c2 <mousekey_param_dec+0x1e>
    48c0:	56 c0       	rjmp	.+172    	; 0x496e <mousekey_param_dec+0xca>
    48c2:	08 95       	ret
        case 1:
            if (mk_delay > dec)
    48c4:	80 91 14 01 	lds	r24, 0x0114
    48c8:	68 17       	cp	r22, r24
    48ca:	20 f4       	brcc	.+8      	; 0x48d4 <mousekey_param_dec+0x30>
                mk_delay -= dec;
    48cc:	86 1b       	sub	r24, r22
    48ce:	80 93 14 01 	sts	0x0114, r24
    48d2:	02 c0       	rjmp	.+4      	; 0x48d8 <mousekey_param_dec+0x34>
            else
                mk_delay = 0;
    48d4:	10 92 14 01 	sts	0x0114, r1
            PRINT_SET_VAL(mk_delay);
    48d8:	80 91 14 01 	lds	r24, 0x0114
    48dc:	1f 92       	push	r1
    48de:	8f 93       	push	r24
    48e0:	89 ef       	ldi	r24, 0xF9	; 249
    48e2:	95 e0       	ldi	r25, 0x05	; 5
    48e4:	54 c0       	rjmp	.+168    	; 0x498e <mousekey_param_dec+0xea>
            break;
        case 2:
            if (mk_interval > dec)
    48e6:	80 91 13 01 	lds	r24, 0x0113
    48ea:	68 17       	cp	r22, r24
    48ec:	20 f4       	brcc	.+8      	; 0x48f6 <mousekey_param_dec+0x52>
                mk_interval -= dec;
    48ee:	86 1b       	sub	r24, r22
    48f0:	80 93 13 01 	sts	0x0113, r24
    48f4:	02 c0       	rjmp	.+4      	; 0x48fa <mousekey_param_dec+0x56>
            else
                mk_interval = 0;
    48f6:	10 92 13 01 	sts	0x0113, r1
            PRINT_SET_VAL(mk_interval);
    48fa:	80 91 13 01 	lds	r24, 0x0113
    48fe:	1f 92       	push	r1
    4900:	8f 93       	push	r24
    4902:	87 ee       	ldi	r24, 0xE7	; 231
    4904:	95 e0       	ldi	r25, 0x05	; 5
    4906:	43 c0       	rjmp	.+134    	; 0x498e <mousekey_param_dec+0xea>
            break;
        case 3:
            if (mk_max_speed > dec)
    4908:	80 91 12 01 	lds	r24, 0x0112
    490c:	68 17       	cp	r22, r24
    490e:	20 f4       	brcc	.+8      	; 0x4918 <mousekey_param_dec+0x74>
                mk_max_speed -= dec;
    4910:	86 1b       	sub	r24, r22
    4912:	80 93 12 01 	sts	0x0112, r24
    4916:	02 c0       	rjmp	.+4      	; 0x491c <mousekey_param_dec+0x78>
            else
                mk_max_speed = 0;
    4918:	10 92 12 01 	sts	0x0112, r1
            PRINT_SET_VAL(mk_max_speed);
    491c:	80 91 12 01 	lds	r24, 0x0112
    4920:	1f 92       	push	r1
    4922:	8f 93       	push	r24
    4924:	84 ed       	ldi	r24, 0xD4	; 212
    4926:	95 e0       	ldi	r25, 0x05	; 5
    4928:	32 c0       	rjmp	.+100    	; 0x498e <mousekey_param_dec+0xea>
            break;
        case 4:
            if (mk_time_to_max > dec)
    492a:	80 91 11 01 	lds	r24, 0x0111
    492e:	68 17       	cp	r22, r24
    4930:	20 f4       	brcc	.+8      	; 0x493a <mousekey_param_dec+0x96>
                mk_time_to_max -= dec;
    4932:	86 1b       	sub	r24, r22
    4934:	80 93 11 01 	sts	0x0111, r24
    4938:	02 c0       	rjmp	.+4      	; 0x493e <mousekey_param_dec+0x9a>
            else
                mk_time_to_max = 0;
    493a:	10 92 11 01 	sts	0x0111, r1
            PRINT_SET_VAL(mk_time_to_max);
    493e:	80 91 11 01 	lds	r24, 0x0111
    4942:	1f 92       	push	r1
    4944:	8f 93       	push	r24
    4946:	8f eb       	ldi	r24, 0xBF	; 191
    4948:	95 e0       	ldi	r25, 0x05	; 5
    494a:	21 c0       	rjmp	.+66     	; 0x498e <mousekey_param_dec+0xea>
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
    494c:	80 91 10 01 	lds	r24, 0x0110
    4950:	68 17       	cp	r22, r24
    4952:	20 f4       	brcc	.+8      	; 0x495c <mousekey_param_dec+0xb8>
                mk_wheel_max_speed -= dec;
    4954:	86 1b       	sub	r24, r22
    4956:	80 93 10 01 	sts	0x0110, r24
    495a:	02 c0       	rjmp	.+4      	; 0x4960 <mousekey_param_dec+0xbc>
            else
                mk_wheel_max_speed = 0;
    495c:	10 92 10 01 	sts	0x0110, r1
            PRINT_SET_VAL(mk_wheel_max_speed);
    4960:	80 91 10 01 	lds	r24, 0x0110
    4964:	1f 92       	push	r1
    4966:	8f 93       	push	r24
    4968:	86 ea       	ldi	r24, 0xA6	; 166
    496a:	95 e0       	ldi	r25, 0x05	; 5
    496c:	10 c0       	rjmp	.+32     	; 0x498e <mousekey_param_dec+0xea>
            break;
        case 6:
            if (mk_wheel_time_to_max > dec)
    496e:	80 91 0f 01 	lds	r24, 0x010F
    4972:	68 17       	cp	r22, r24
    4974:	20 f4       	brcc	.+8      	; 0x497e <mousekey_param_dec+0xda>
                mk_wheel_time_to_max -= dec;
    4976:	86 1b       	sub	r24, r22
    4978:	80 93 0f 01 	sts	0x010F, r24
    497c:	02 c0       	rjmp	.+4      	; 0x4982 <mousekey_param_dec+0xde>
            else
                mk_wheel_time_to_max = 0;
    497e:	10 92 0f 01 	sts	0x010F, r1
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4982:	80 91 0f 01 	lds	r24, 0x010F
    4986:	1f 92       	push	r1
    4988:	8f 93       	push	r24
    498a:	8b e8       	ldi	r24, 0x8B	; 139
    498c:	95 e0       	ldi	r25, 0x05	; 5
    498e:	9f 93       	push	r25
    4990:	8f 93       	push	r24
    4992:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
            break;
    4996:	0f 90       	pop	r0
    4998:	0f 90       	pop	r0
    499a:	0f 90       	pop	r0
    499c:	0f 90       	pop	r0
    499e:	08 95       	ret

000049a0 <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    49a0:	cf 93       	push	r28
    49a2:	c8 2f       	mov	r28, r24
    xprintf("L%d\n", layer);
    49a4:	1f 92       	push	r1
    49a6:	8f 93       	push	r24
    49a8:	20 e9       	ldi	r18, 0x90	; 144
    49aa:	38 e0       	ldi	r19, 0x08	; 8
    49ac:	3f 93       	push	r19
    49ae:	2f 93       	push	r18
    49b0:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    default_layer_set(1UL<<layer);
    49b4:	61 e0       	ldi	r22, 0x01	; 1
    49b6:	70 e0       	ldi	r23, 0x00	; 0
    49b8:	80 e0       	ldi	r24, 0x00	; 0
    49ba:	90 e0       	ldi	r25, 0x00	; 0
    49bc:	04 c0       	rjmp	.+8      	; 0x49c6 <switch_default_layer+0x26>
    49be:	66 0f       	add	r22, r22
    49c0:	77 1f       	adc	r23, r23
    49c2:	88 1f       	adc	r24, r24
    49c4:	99 1f       	adc	r25, r25
    49c6:	ca 95       	dec	r28
    49c8:	d2 f7       	brpl	.-12     	; 0x49be <switch_default_layer+0x1e>
    49ca:	0e 94 8a 1b 	call	0x3714	; 0x3714 <default_layer_set>
    clear_keyboard();
    49ce:	0f 90       	pop	r0
    49d0:	0f 90       	pop	r0
    49d2:	0f 90       	pop	r0
    49d4:	0f 90       	pop	r0
}
    49d6:	cf 91       	pop	r28

static void switch_default_layer(uint8_t layer)
{
    xprintf("L%d\n", layer);
    default_layer_set(1UL<<layer);
    clear_keyboard();
    49d8:	0c 94 49 17 	jmp	0x2e92	; 0x2e92 <clear_keyboard>

000049dc <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    49dc:	cf 93       	push	r28
    static host_driver_t *host_driver = 0;
#endif
#ifdef SLEEP_LED_ENABLE
    static bool sleep_led_test = false;
#endif
    switch (code) {
    49de:	8b 31       	cpi	r24, 0x1B	; 27
    49e0:	09 f4       	brne	.+2      	; 0x49e4 <command_common+0x8>
    49e2:	09 c2       	rjmp	.+1042   	; 0x4df6 <command_common+0x41a>
    49e4:	08 f0       	brcs	.+2      	; 0x49e8 <command_common+0xc>
    49e6:	49 c0       	rjmp	.+146    	; 0x4a7a <command_common+0x9e>
    49e8:	8e 30       	cpi	r24, 0x0E	; 14
    49ea:	09 f4       	brne	.+2      	; 0x49ee <command_common+0x12>
    49ec:	17 c2       	rjmp	.+1070   	; 0x4e1c <command_common+0x440>
    49ee:	00 f5       	brcc	.+64     	; 0x4a30 <command_common+0x54>
    49f0:	87 30       	cpi	r24, 0x07	; 7
    49f2:	09 f4       	brne	.+2      	; 0x49f6 <command_common+0x1a>
    49f4:	e7 c1       	rjmp	.+974    	; 0x4dc4 <command_common+0x3e8>
    49f6:	a8 f4       	brcc	.+42     	; 0x4a22 <command_common+0x46>
    49f8:	86 30       	cpi	r24, 0x06	; 6
    49fa:	09 f0       	breq	.+2      	; 0x49fe <command_common+0x22>
    49fc:	95 c2       	rjmp	.+1322   	; 0x4f28 <command_common+0x54c>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    49fe:	80 91 d9 01 	lds	r24, 0x01D9
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    4a02:	81 7f       	andi	r24, 0xF1	; 241
    4a04:	8e 7f       	andi	r24, 0xFE	; 254
    4a06:	80 93 d9 01 	sts	0x01D9, r24
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    4a0a:	85 e9       	ldi	r24, 0x95	; 149
    4a0c:	98 e0       	ldi	r25, 0x08	; 8
    4a0e:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
            debug_matrix   = false;
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
            command_console_help();
            print("C> ");
    4a12:	80 ef       	ldi	r24, 0xF0	; 240
    4a14:	9c e0       	ldi	r25, 0x0C	; 12
    4a16:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
            command_state = CONSOLE;
    4a1a:	81 e0       	ldi	r24, 0x01	; 1
    4a1c:	80 93 e9 01 	sts	0x01E9, r24
    4a20:	cf c1       	rjmp	.+926    	; 0x4dc0 <command_common+0x3e4>
    static host_driver_t *host_driver = 0;
#endif
#ifdef SLEEP_LED_ENABLE
    static bool sleep_led_test = false;
#endif
    switch (code) {
    4a22:	88 30       	cpi	r24, 0x08	; 8
    4a24:	09 f4       	brne	.+2      	; 0x4a28 <command_common+0x4c>
    4a26:	5b c0       	rjmp	.+182    	; 0x4ade <command_common+0x102>
    4a28:	8b 30       	cpi	r24, 0x0B	; 11
    4a2a:	09 f4       	brne	.+2      	; 0x4a2e <command_common+0x52>
    4a2c:	c5 c1       	rjmp	.+906    	; 0x4db8 <command_common+0x3dc>
    4a2e:	7c c2       	rjmp	.+1272   	; 0x4f28 <command_common+0x54c>
    4a30:	81 31       	cpi	r24, 0x11	; 17
    4a32:	09 f4       	brne	.+2      	; 0x4a36 <command_common+0x5a>
    4a34:	61 c2       	rjmp	.+1218   	; 0x4ef8 <command_common+0x51c>
    4a36:	20 f4       	brcc	.+8      	; 0x4a40 <command_common+0x64>
    4a38:	80 31       	cpi	r24, 0x10	; 16
    4a3a:	09 f4       	brne	.+2      	; 0x4a3e <command_common+0x62>
    4a3c:	02 c2       	rjmp	.+1028   	; 0x4e42 <command_common+0x466>
    4a3e:	74 c2       	rjmp	.+1256   	; 0x4f28 <command_common+0x54c>
    4a40:	86 31       	cpi	r24, 0x16	; 22
    4a42:	09 f4       	brne	.+2      	; 0x4a46 <command_common+0x6a>
    4a44:	18 c2       	rjmp	.+1072   	; 0x4e76 <command_common+0x49a>
    4a46:	89 31       	cpi	r24, 0x19	; 25
    4a48:	09 f0       	breq	.+2      	; 0x4a4c <command_common+0x70>
    4a4a:	6e c2       	rjmp	.+1244   	; 0x4f28 <command_common+0x54c>
            } else {
                print("\nmouse: off\n");
            }
            break;
        case KC_V: // print version & information
            print("\n\t- Version -\n");
    4a4c:	84 e6       	ldi	r24, 0x64	; 100
    4a4e:	9c e0       	ldi	r25, 0x0C	; 12
    4a50:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    4a54:	8b e4       	ldi	r24, 0x4B	; 75
    4a56:	9c e0       	ldi	r25, 0x0C	; 12
    4a58:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    4a5c:	89 e0       	ldi	r24, 0x09	; 9
    4a5e:	9c e0       	ldi	r25, 0x0C	; 12
    4a60:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    4a64:	82 ee       	ldi	r24, 0xE2	; 226
    4a66:	9b e0       	ldi	r25, 0x0B	; 11
    4a68:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
            /* build options */
            print("OPTIONS:"
    4a6c:	8d e9       	ldi	r24, 0x9D	; 157
    4a6e:	9b e0       	ldi	r25, 0x0B	; 11
    4a70:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    4a74:	82 e7       	ldi	r24, 0x72	; 114
    4a76:	9b e0       	ldi	r25, 0x0B	; 11
    4a78:	a1 c1       	rjmp	.+834    	; 0x4dbc <command_common+0x3e0>
    static host_driver_t *host_driver = 0;
#endif
#ifdef SLEEP_LED_ENABLE
    static bool sleep_led_test = false;
#endif
    switch (code) {
    4a7a:	85 33       	cpi	r24, 0x35	; 53
    4a7c:	09 f4       	brne	.+2      	; 0x4a80 <command_common+0xa4>
    4a7e:	4e c2       	rjmp	.+1180   	; 0x4f1c <command_common+0x540>
    4a80:	68 f4       	brcc	.+26     	; 0x4a9c <command_common+0xc0>
    4a82:	87 32       	cpi	r24, 0x27	; 39
    4a84:	09 f4       	brne	.+2      	; 0x4a88 <command_common+0xac>
    4a86:	4a c2       	rjmp	.+1172   	; 0x4f1c <command_common+0x540>
    4a88:	28 f4       	brcc	.+10     	; 0x4a94 <command_common+0xb8>
    4a8a:	8e 31       	cpi	r24, 0x1E	; 30
    4a8c:	08 f4       	brcc	.+2      	; 0x4a90 <command_common+0xb4>
    4a8e:	4c c2       	rjmp	.+1176   	; 0x4f28 <command_common+0x54c>
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    4a90:	8d 51       	subi	r24, 0x1D	; 29
    4a92:	47 c2       	rjmp	.+1166   	; 0x4f22 <command_common+0x546>
    static host_driver_t *host_driver = 0;
#endif
#ifdef SLEEP_LED_ENABLE
    static bool sleep_led_test = false;
#endif
    switch (code) {
    4a94:	89 32       	cpi	r24, 0x29	; 41
    4a96:	09 f4       	brne	.+2      	; 0x4a9a <command_common+0xbe>
    4a98:	41 c2       	rjmp	.+1154   	; 0x4f1c <command_common+0x540>
    4a9a:	46 c2       	rjmp	.+1164   	; 0x4f28 <command_common+0x54c>
    4a9c:	83 34       	cpi	r24, 0x43	; 67
    4a9e:	38 f4       	brcc	.+14     	; 0x4aae <command_common+0xd2>
    4aa0:	8a 33       	cpi	r24, 0x3A	; 58
    4aa2:	08 f0       	brcs	.+2      	; 0x4aa6 <command_common+0xca>
    4aa4:	3d c2       	rjmp	.+1146   	; 0x4f20 <command_common+0x544>
    4aa6:	88 33       	cpi	r24, 0x38	; 56
    4aa8:	09 f4       	brne	.+2      	; 0x4aac <command_common+0xd0>
    4aaa:	86 c1       	rjmp	.+780    	; 0x4db8 <command_common+0x3dc>
    4aac:	3d c2       	rjmp	.+1146   	; 0x4f28 <command_common+0x54c>
    4aae:	83 34       	cpi	r24, 0x43	; 67
    4ab0:	09 f4       	brne	.+2      	; 0x4ab4 <command_common+0xd8>
    4ab2:	34 c2       	rjmp	.+1128   	; 0x4f1c <command_common+0x540>
    4ab4:	88 34       	cpi	r24, 0x48	; 72
    4ab6:	09 f0       	breq	.+2      	; 0x4aba <command_common+0xde>
    4ab8:	37 c2       	rjmp	.+1134   	; 0x4f28 <command_common+0x54c>
            command_console_help();
            print("C> ");
            command_state = CONSOLE;
            break;
        case KC_PAUSE:
            clear_keyboard();
    4aba:	0e 94 49 17 	call	0x2e92	; 0x2e92 <clear_keyboard>
            print("\n\nbootloader... ");
    4abe:	8f ed       	ldi	r24, 0xDF	; 223
    4ac0:	9c e0       	ldi	r25, 0x0C	; 12
    4ac2:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    4ac6:	9f ef       	ldi	r25, 0xFF	; 255
    4ac8:	23 ed       	ldi	r18, 0xD3	; 211
    4aca:	80 e3       	ldi	r24, 0x30	; 48
    4acc:	91 50       	subi	r25, 0x01	; 1
    4ace:	20 40       	sbci	r18, 0x00	; 0
    4ad0:	80 40       	sbci	r24, 0x00	; 0
    4ad2:	e1 f7       	brne	.-8      	; 0x4acc <command_common+0xf0>
    4ad4:	00 c0       	rjmp	.+0      	; 0x4ad6 <command_common+0xfa>
    4ad6:	00 00       	nop
            wait_ms(1000);
            bootloader_jump(); // not return
    4ad8:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <bootloader_jump>
    4adc:	71 c1       	rjmp	.+738    	; 0x4dc0 <command_common+0x3e4>
            sleep_led_test = !sleep_led_test;
            break;
#endif
#ifdef BOOTMAGIC_ENABLE
        case KC_E:
            print("eeconfig:\n");
    4ade:	84 ef       	ldi	r24, 0xF4	; 244
    4ae0:	9c e0       	ldi	r25, 0x0C	; 12
    4ae2:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
}

#ifdef BOOTMAGIC_ENABLE
static void print_eeconfig(void)
{
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    4ae6:	8f ec       	ldi	r24, 0xCF	; 207
    4ae8:	9a e0       	ldi	r25, 0x0A	; 10
    4aea:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    4aee:	0e 94 d5 20 	call	0x41aa	; 0x41aa <eeconfig_read_default_layer>
    4af2:	1f 92       	push	r1
    4af4:	8f 93       	push	r24
    4af6:	8c ec       	ldi	r24, 0xCC	; 204
    4af8:	9a e0       	ldi	r25, 0x0A	; 10
    4afa:	9f 93       	push	r25
    4afc:	8f 93       	push	r24
    4afe:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    4b02:	8a ec       	ldi	r24, 0xCA	; 202
    4b04:	9a e0       	ldi	r25, 0x0A	; 10
    4b06:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>

    debug_config_t dc;
    dc.raw = eeconfig_read_debug();
    4b0a:	0e 94 cc 20 	call	0x4198	; 0x4198 <eeconfig_read_debug>
    4b0e:	c8 2f       	mov	r28, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    4b10:	87 eb       	ldi	r24, 0xB7	; 183
    4b12:	9a e0       	ldi	r25, 0x0A	; 10
    4b14:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    4b18:	1f 92       	push	r1
    4b1a:	cf 93       	push	r28
    4b1c:	22 eb       	ldi	r18, 0xB2	; 178
    4b1e:	3a e0       	ldi	r19, 0x0A	; 10
    4b20:	3f 93       	push	r19
    4b22:	2f 93       	push	r18
    4b24:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    4b28:	80 eb       	ldi	r24, 0xB0	; 176
    4b2a:	9a e0       	ldi	r25, 0x0A	; 10
    4b2c:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    4b30:	86 ea       	ldi	r24, 0xA6	; 166
    4b32:	9a e0       	ldi	r25, 0x0A	; 10
    4b34:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    4b38:	8c 2f       	mov	r24, r28
    4b3a:	81 70       	andi	r24, 0x01	; 1
    4b3c:	1f 92       	push	r1
    4b3e:	8f 93       	push	r24
    4b40:	23 ea       	ldi	r18, 0xA3	; 163
    4b42:	3a e0       	ldi	r19, 0x0A	; 10
    4b44:	3f 93       	push	r19
    4b46:	2f 93       	push	r18
    4b48:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    4b4c:	81 ea       	ldi	r24, 0xA1	; 161
    4b4e:	9a e0       	ldi	r25, 0x0A	; 10
    4b50:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    4b54:	87 e9       	ldi	r24, 0x97	; 151
    4b56:	9a e0       	ldi	r25, 0x0A	; 10
    4b58:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    4b5c:	c1 fb       	bst	r28, 1
    4b5e:	88 27       	eor	r24, r24
    4b60:	80 f9       	bld	r24, 0
    4b62:	1f 92       	push	r1
    4b64:	8f 93       	push	r24
    4b66:	24 e9       	ldi	r18, 0x94	; 148
    4b68:	3a e0       	ldi	r19, 0x0A	; 10
    4b6a:	3f 93       	push	r19
    4b6c:	2f 93       	push	r18
    4b6e:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    4b72:	82 e9       	ldi	r24, 0x92	; 146
    4b74:	9a e0       	ldi	r25, 0x0A	; 10
    4b76:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    4b7a:	86 e8       	ldi	r24, 0x86	; 134
    4b7c:	9a e0       	ldi	r25, 0x0A	; 10
    4b7e:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    4b82:	c2 fb       	bst	r28, 2
    4b84:	88 27       	eor	r24, r24
    4b86:	80 f9       	bld	r24, 0
    4b88:	1f 92       	push	r1
    4b8a:	8f 93       	push	r24
    4b8c:	23 e8       	ldi	r18, 0x83	; 131
    4b8e:	3a e0       	ldi	r19, 0x0A	; 10
    4b90:	3f 93       	push	r19
    4b92:	2f 93       	push	r18
    4b94:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    4b98:	81 e8       	ldi	r24, 0x81	; 129
    4b9a:	9a e0       	ldi	r25, 0x0A	; 10
    4b9c:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    4ba0:	88 e7       	ldi	r24, 0x78	; 120
    4ba2:	9a e0       	ldi	r25, 0x0A	; 10
    4ba4:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    4ba8:	c3 fb       	bst	r28, 3
    4baa:	cc 27       	eor	r28, r28
    4bac:	c0 f9       	bld	r28, 0
    4bae:	1f 92       	push	r1
    4bb0:	cf 93       	push	r28
    4bb2:	85 e7       	ldi	r24, 0x75	; 117
    4bb4:	9a e0       	ldi	r25, 0x0A	; 10
    4bb6:	9f 93       	push	r25
    4bb8:	8f 93       	push	r24
    4bba:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    4bbe:	83 e7       	ldi	r24, 0x73	; 115
    4bc0:	9a e0       	ldi	r25, 0x0A	; 10
    4bc2:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>

    keymap_config_t kc;
    kc.raw = eeconfig_read_keymap();
    4bc6:	0e 94 de 20 	call	0x41bc	; 0x41bc <eeconfig_read_keymap>
    4bca:	c8 2f       	mov	r28, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    4bcc:	8f e5       	ldi	r24, 0x5F	; 95
    4bce:	9a e0       	ldi	r25, 0x0A	; 10
    4bd0:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    4bd4:	1f 92       	push	r1
    4bd6:	cf 93       	push	r28
    4bd8:	2a e5       	ldi	r18, 0x5A	; 90
    4bda:	3a e0       	ldi	r19, 0x0A	; 10
    4bdc:	3f 93       	push	r19
    4bde:	2f 93       	push	r18
    4be0:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    4be4:	88 e5       	ldi	r24, 0x58	; 88
    4be6:	9a e0       	ldi	r25, 0x0A	; 10
    4be8:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    4bec:	8f e3       	ldi	r24, 0x3F	; 63
    4bee:	9a e0       	ldi	r25, 0x0A	; 10
    4bf0:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    4bf4:	8c 2f       	mov	r24, r28
    4bf6:	81 70       	andi	r24, 0x01	; 1
    4bf8:	1f 92       	push	r1
    4bfa:	8f 93       	push	r24
    4bfc:	2c e3       	ldi	r18, 0x3C	; 60
    4bfe:	3a e0       	ldi	r19, 0x0A	; 10
    4c00:	3f 93       	push	r19
    4c02:	2f 93       	push	r18
    4c04:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    4c08:	8d b7       	in	r24, 0x3d	; 61
    4c0a:	9e b7       	in	r25, 0x3e	; 62
    4c0c:	80 96       	adiw	r24, 0x20	; 32
    4c0e:	0f b6       	in	r0, 0x3f	; 63
    4c10:	f8 94       	cli
    4c12:	9e bf       	out	0x3e, r25	; 62
    4c14:	0f be       	out	0x3f, r0	; 63
    4c16:	8d bf       	out	0x3d, r24	; 61
    4c18:	8a e3       	ldi	r24, 0x3A	; 58
    4c1a:	9a e0       	ldi	r25, 0x0A	; 10
    4c1c:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    4c20:	83 e2       	ldi	r24, 0x23	; 35
    4c22:	9a e0       	ldi	r25, 0x0A	; 10
    4c24:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    4c28:	c1 fb       	bst	r28, 1
    4c2a:	88 27       	eor	r24, r24
    4c2c:	80 f9       	bld	r24, 0
    4c2e:	1f 92       	push	r1
    4c30:	8f 93       	push	r24
    4c32:	20 e2       	ldi	r18, 0x20	; 32
    4c34:	3a e0       	ldi	r19, 0x0A	; 10
    4c36:	3f 93       	push	r19
    4c38:	2f 93       	push	r18
    4c3a:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    4c3e:	8e e1       	ldi	r24, 0x1E	; 30
    4c40:	9a e0       	ldi	r25, 0x0A	; 10
    4c42:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    4c46:	8c e0       	ldi	r24, 0x0C	; 12
    4c48:	9a e0       	ldi	r25, 0x0A	; 10
    4c4a:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    4c4e:	c2 fb       	bst	r28, 2
    4c50:	88 27       	eor	r24, r24
    4c52:	80 f9       	bld	r24, 0
    4c54:	1f 92       	push	r1
    4c56:	8f 93       	push	r24
    4c58:	29 e0       	ldi	r18, 0x09	; 9
    4c5a:	3a e0       	ldi	r19, 0x0A	; 10
    4c5c:	3f 93       	push	r19
    4c5e:	2f 93       	push	r18
    4c60:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    4c64:	87 e0       	ldi	r24, 0x07	; 7
    4c66:	9a e0       	ldi	r25, 0x0A	; 10
    4c68:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    4c6c:	85 ef       	ldi	r24, 0xF5	; 245
    4c6e:	99 e0       	ldi	r25, 0x09	; 9
    4c70:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    4c74:	c3 fb       	bst	r28, 3
    4c76:	88 27       	eor	r24, r24
    4c78:	80 f9       	bld	r24, 0
    4c7a:	1f 92       	push	r1
    4c7c:	8f 93       	push	r24
    4c7e:	22 ef       	ldi	r18, 0xF2	; 242
    4c80:	39 e0       	ldi	r19, 0x09	; 9
    4c82:	3f 93       	push	r19
    4c84:	2f 93       	push	r18
    4c86:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    4c8a:	80 ef       	ldi	r24, 0xF0	; 240
    4c8c:	99 e0       	ldi	r25, 0x09	; 9
    4c8e:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    4c92:	86 ee       	ldi	r24, 0xE6	; 230
    4c94:	99 e0       	ldi	r25, 0x09	; 9
    4c96:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    4c9a:	c4 fb       	bst	r28, 4
    4c9c:	88 27       	eor	r24, r24
    4c9e:	80 f9       	bld	r24, 0
    4ca0:	1f 92       	push	r1
    4ca2:	8f 93       	push	r24
    4ca4:	23 ee       	ldi	r18, 0xE3	; 227
    4ca6:	39 e0       	ldi	r19, 0x09	; 9
    4ca8:	3f 93       	push	r19
    4caa:	2f 93       	push	r18
    4cac:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    4cb0:	81 ee       	ldi	r24, 0xE1	; 225
    4cb2:	99 e0       	ldi	r25, 0x09	; 9
    4cb4:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    4cb8:	8f ec       	ldi	r24, 0xCF	; 207
    4cba:	99 e0       	ldi	r25, 0x09	; 9
    4cbc:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    4cc0:	c5 fb       	bst	r28, 5
    4cc2:	88 27       	eor	r24, r24
    4cc4:	80 f9       	bld	r24, 0
    4cc6:	1f 92       	push	r1
    4cc8:	8f 93       	push	r24
    4cca:	2c ec       	ldi	r18, 0xCC	; 204
    4ccc:	39 e0       	ldi	r19, 0x09	; 9
    4cce:	3f 93       	push	r19
    4cd0:	2f 93       	push	r18
    4cd2:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    4cd6:	8a ec       	ldi	r24, 0xCA	; 202
    4cd8:	99 e0       	ldi	r25, 0x09	; 9
    4cda:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    4cde:	8e ea       	ldi	r24, 0xAE	; 174
    4ce0:	99 e0       	ldi	r25, 0x09	; 9
    4ce2:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    4ce6:	c6 fb       	bst	r28, 6
    4ce8:	88 27       	eor	r24, r24
    4cea:	80 f9       	bld	r24, 0
    4cec:	1f 92       	push	r1
    4cee:	8f 93       	push	r24
    4cf0:	2b ea       	ldi	r18, 0xAB	; 171
    4cf2:	39 e0       	ldi	r19, 0x09	; 9
    4cf4:	3f 93       	push	r19
    4cf6:	2f 93       	push	r18
    4cf8:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    4cfc:	89 ea       	ldi	r24, 0xA9	; 169
    4cfe:	99 e0       	ldi	r25, 0x09	; 9
    4d00:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    4d04:	81 ea       	ldi	r24, 0xA1	; 161
    4d06:	99 e0       	ldi	r25, 0x09	; 9
    4d08:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    4d0c:	c7 fb       	bst	r28, 7
    4d0e:	cc 27       	eor	r28, r28
    4d10:	c0 f9       	bld	r28, 0
    4d12:	1f 92       	push	r1
    4d14:	cf 93       	push	r28
    4d16:	8e e9       	ldi	r24, 0x9E	; 158
    4d18:	99 e0       	ldi	r25, 0x09	; 9
    4d1a:	9f 93       	push	r25
    4d1c:	8f 93       	push	r24
    4d1e:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    4d22:	8c e9       	ldi	r24, 0x9C	; 156
    4d24:	99 e0       	ldi	r25, 0x09	; 9
    4d26:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>

#ifdef BACKLIGHT_ENABLE
    backlight_config_t bc;
    bc.raw = eeconfig_read_backlight();
    4d2a:	0e 94 e7 20 	call	0x41ce	; 0x41ce <eeconfig_read_backlight>
    4d2e:	c8 2f       	mov	r28, r24
    print("backlight_config.raw: "); print_hex8(bc.raw); print("\n");
    4d30:	85 e8       	ldi	r24, 0x85	; 133
    4d32:	99 e0       	ldi	r25, 0x09	; 9
    4d34:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    4d38:	1f 92       	push	r1
    4d3a:	cf 93       	push	r28
    4d3c:	20 e8       	ldi	r18, 0x80	; 128
    4d3e:	39 e0       	ldi	r19, 0x09	; 9
    4d40:	3f 93       	push	r19
    4d42:	2f 93       	push	r18
    4d44:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    4d48:	8d b7       	in	r24, 0x3d	; 61
    4d4a:	9e b7       	in	r25, 0x3e	; 62
    4d4c:	80 96       	adiw	r24, 0x20	; 32
    4d4e:	0f b6       	in	r0, 0x3f	; 63
    4d50:	f8 94       	cli
    4d52:	9e bf       	out	0x3e, r25	; 62
    4d54:	0f be       	out	0x3f, r0	; 63
    4d56:	8d bf       	out	0x3d, r24	; 61
    4d58:	8e e7       	ldi	r24, 0x7E	; 126
    4d5a:	99 e0       	ldi	r25, 0x09	; 9
    4d5c:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    print(".enable: "); print_dec(bc.enable); print("\n");
    4d60:	84 e7       	ldi	r24, 0x74	; 116
    4d62:	99 e0       	ldi	r25, 0x09	; 9
    4d64:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    4d68:	8c 2f       	mov	r24, r28
    4d6a:	81 70       	andi	r24, 0x01	; 1
    4d6c:	1f 92       	push	r1
    4d6e:	8f 93       	push	r24
    4d70:	21 e7       	ldi	r18, 0x71	; 113
    4d72:	39 e0       	ldi	r19, 0x09	; 9
    4d74:	3f 93       	push	r19
    4d76:	2f 93       	push	r18
    4d78:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    4d7c:	8f e6       	ldi	r24, 0x6F	; 111
    4d7e:	99 e0       	ldi	r25, 0x09	; 9
    4d80:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    print(".level: "); print_dec(bc.level); print("\n");
    4d84:	86 e6       	ldi	r24, 0x66	; 102
    4d86:	99 e0       	ldi	r25, 0x09	; 9
    4d88:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    4d8c:	c6 95       	lsr	r28
    4d8e:	1f 92       	push	r1
    4d90:	cf 93       	push	r28
    4d92:	83 e6       	ldi	r24, 0x63	; 99
    4d94:	99 e0       	ldi	r25, 0x09	; 9
    4d96:	9f 93       	push	r25
    4d98:	8f 93       	push	r24
    4d9a:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    4d9e:	81 e6       	ldi	r24, 0x61	; 97
    4da0:	99 e0       	ldi	r25, 0x09	; 9
    4da2:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    4da6:	8d b7       	in	r24, 0x3d	; 61
    4da8:	9e b7       	in	r25, 0x3e	; 62
    4daa:	08 96       	adiw	r24, 0x08	; 8
    4dac:	0f b6       	in	r0, 0x3f	; 63
    4dae:	f8 94       	cli
    4db0:	9e bf       	out	0x3e, r25	; 62
    4db2:	0f be       	out	0x3f, r0	; 63
    4db4:	8d bf       	out	0x3d, r24	; 61
    4db6:	04 c0       	rjmp	.+8      	; 0x4dc0 <command_common+0x3e4>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\t- Magic -\n"
    4db8:	8c eb       	ldi	r24, 0xBC	; 188
    4dba:	98 e0       	ldi	r25, 0x08	; 8
    4dbc:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
            break;
        default:
            print("?");
            return false;
    }
    return true;
    4dc0:	c1 e0       	ldi	r28, 0x01	; 1
    4dc2:	b7 c0       	rjmp	.+366    	; 0x4f32 <command_common+0x556>
            print("\n\nbootloader... ");
            wait_ms(1000);
            bootloader_jump(); // not return
            break;
        case KC_D:
            if (debug_enable) {
    4dc4:	80 91 d9 01 	lds	r24, 0x01D9
    4dc8:	c8 2f       	mov	r28, r24
    4dca:	c1 70       	andi	r28, 0x01	; 1
    4dcc:	80 ff       	sbrs	r24, 0
    4dce:	09 c0       	rjmp	.+18     	; 0x4de2 <command_common+0x406>
                print("\ndebug: off\n");
    4dd0:	82 ed       	ldi	r24, 0xD2	; 210
    4dd2:	9c e0       	ldi	r25, 0x0C	; 12
    4dd4:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
                debug_matrix   = false;
    4dd8:	80 91 d9 01 	lds	r24, 0x01D9
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    4ddc:	81 7f       	andi	r24, 0xF1	; 241
    4dde:	8e 7f       	andi	r24, 0xFE	; 254
    4de0:	44 c0       	rjmp	.+136    	; 0x4e6a <command_common+0x48e>
            } else {
                print("\ndebug: on\n");
    4de2:	86 ec       	ldi	r24, 0xC6	; 198
    4de4:	9c e0       	ldi	r25, 0x0C	; 12
    4de6:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
                debug_enable   = true;
    4dea:	80 91 d9 01 	lds	r24, 0x01D9
    4dee:	81 60       	ori	r24, 0x01	; 1
    4df0:	80 93 d9 01 	sts	0x01D9, r24
    4df4:	e5 cf       	rjmp	.-54     	; 0x4dc0 <command_common+0x3e4>
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    4df6:	80 91 d9 01 	lds	r24, 0x01D9
    4dfa:	81 fb       	bst	r24, 1
    4dfc:	cc 27       	eor	r28, r28
    4dfe:	c0 f9       	bld	r28, 0
    4e00:	91 e0       	ldi	r25, 0x01	; 1
    4e02:	c9 27       	eor	r28, r25
    4e04:	c0 fb       	bst	r28, 0
    4e06:	81 f9       	bld	r24, 1
    4e08:	80 93 d9 01 	sts	0x01D9, r24
            if (debug_matrix) {
    4e0c:	cc 23       	and	r28, r28
    4e0e:	19 f0       	breq	.+6      	; 0x4e16 <command_common+0x43a>
                print("\nmatrix: on\n");
    4e10:	89 eb       	ldi	r24, 0xB9	; 185
    4e12:	9c e0       	ldi	r25, 0x0C	; 12
    4e14:	25 c0       	rjmp	.+74     	; 0x4e60 <command_common+0x484>
                debug_enable = true;
            } else {
                print("\nmatrix: off\n");
    4e16:	8b ea       	ldi	r24, 0xAB	; 171
    4e18:	9c e0       	ldi	r25, 0x0C	; 12
    4e1a:	d0 cf       	rjmp	.-96     	; 0x4dbc <command_common+0x3e0>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    4e1c:	80 91 d9 01 	lds	r24, 0x01D9
    4e20:	82 fb       	bst	r24, 2
    4e22:	cc 27       	eor	r28, r28
    4e24:	c0 f9       	bld	r28, 0
    4e26:	91 e0       	ldi	r25, 0x01	; 1
    4e28:	c9 27       	eor	r28, r25
    4e2a:	c0 fb       	bst	r28, 0
    4e2c:	82 f9       	bld	r24, 2
    4e2e:	80 93 d9 01 	sts	0x01D9, r24
            if (debug_keyboard) {
    4e32:	cc 23       	and	r28, r28
    4e34:	19 f0       	breq	.+6      	; 0x4e3c <command_common+0x460>
                print("\nkeyboard: on\n");
    4e36:	8c e9       	ldi	r24, 0x9C	; 156
    4e38:	9c e0       	ldi	r25, 0x0C	; 12
    4e3a:	12 c0       	rjmp	.+36     	; 0x4e60 <command_common+0x484>
                debug_enable = true;
            } else {
                print("\nkeyboard: off\n");
    4e3c:	8c e8       	ldi	r24, 0x8C	; 140
    4e3e:	9c e0       	ldi	r25, 0x0C	; 12
    4e40:	bd cf       	rjmp	.-134    	; 0x4dbc <command_common+0x3e0>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    4e42:	80 91 d9 01 	lds	r24, 0x01D9
    4e46:	83 fb       	bst	r24, 3
    4e48:	cc 27       	eor	r28, r28
    4e4a:	c0 f9       	bld	r28, 0
    4e4c:	91 e0       	ldi	r25, 0x01	; 1
    4e4e:	c9 27       	eor	r28, r25
    4e50:	c0 fb       	bst	r28, 0
    4e52:	83 f9       	bld	r24, 3
    4e54:	80 93 d9 01 	sts	0x01D9, r24
            if (debug_mouse) {
    4e58:	cc 23       	and	r28, r28
    4e5a:	51 f0       	breq	.+20     	; 0x4e70 <command_common+0x494>
                print("\nmouse: on\n");
    4e5c:	80 e8       	ldi	r24, 0x80	; 128
    4e5e:	9c e0       	ldi	r25, 0x0C	; 12
    4e60:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
                debug_enable = true;
    4e64:	80 91 d9 01 	lds	r24, 0x01D9
    4e68:	81 60       	ori	r24, 0x01	; 1
    4e6a:	80 93 d9 01 	sts	0x01D9, r24
    4e6e:	61 c0       	rjmp	.+194    	; 0x4f32 <command_common+0x556>
            } else {
                print("\nmouse: off\n");
    4e70:	83 e7       	ldi	r24, 0x73	; 115
    4e72:	9c e0       	ldi	r25, 0x0C	; 12
    4e74:	a3 cf       	rjmp	.-186    	; 0x4dbc <command_common+0x3e0>
            // TODO
            );
#endif
            break;
        case KC_S:
            print("\n\t- Status -\n");
    4e76:	84 e6       	ldi	r24, 0x64	; 100
    4e78:	9b e0       	ldi	r25, 0x0B	; 11
    4e7a:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
            print_val_hex8(host_keyboard_leds());
    4e7e:	0e 94 bc 10 	call	0x2178	; 0x2178 <host_keyboard_leds>
    4e82:	1f 92       	push	r1
    4e84:	8f 93       	push	r24
    4e86:	8a e4       	ldi	r24, 0x4A	; 74
    4e88:	9b e0       	ldi	r25, 0x0B	; 11
    4e8a:	9f 93       	push	r25
    4e8c:	8f 93       	push	r24
    4e8e:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
            print_val_hex8(keyboard_protocol);
    4e92:	80 91 0b 01 	lds	r24, 0x010B
    4e96:	1f 92       	push	r1
    4e98:	8f 93       	push	r24
    4e9a:	83 e3       	ldi	r24, 0x33	; 51
    4e9c:	9b e0       	ldi	r25, 0x0B	; 11
    4e9e:	9f 93       	push	r25
    4ea0:	8f 93       	push	r24
    4ea2:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
            print_val_hex8(keyboard_idle);
    4ea6:	80 91 69 01 	lds	r24, 0x0169
    4eaa:	1f 92       	push	r1
    4eac:	8f 93       	push	r24
    4eae:	80 e2       	ldi	r24, 0x20	; 32
    4eb0:	9b e0       	ldi	r25, 0x0B	; 11
    4eb2:	9f 93       	push	r25
    4eb4:	8f 93       	push	r24
    4eb6:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
#ifdef NKRO_ENABLE
            print_val_hex8(keyboard_nkro);
    4eba:	80 91 0c 01 	lds	r24, 0x010C
    4ebe:	1f 92       	push	r1
    4ec0:	8f 93       	push	r24
    4ec2:	8d e0       	ldi	r24, 0x0D	; 13
    4ec4:	9b e0       	ldi	r25, 0x0B	; 11
    4ec6:	9f 93       	push	r25
    4ec8:	8f 93       	push	r24
    4eca:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
#endif
            print_val_hex32(timer_read32());
    4ece:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <timer_read32>
    4ed2:	9f 93       	push	r25
    4ed4:	8f 93       	push	r24
    4ed6:	7f 93       	push	r23
    4ed8:	6f 93       	push	r22
    4eda:	86 ef       	ldi	r24, 0xF6	; 246
    4edc:	9a e0       	ldi	r25, 0x0A	; 10
    4ede:	9f 93       	push	r25
    4ee0:	8f 93       	push	r24
    4ee2:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
#ifdef PROTOCOL_PJRC
#   if USB_COUNT_SOF
            print_val_hex8(usbSofCount);
#   endif
#endif
            break;
    4ee6:	8d b7       	in	r24, 0x3d	; 61
    4ee8:	9e b7       	in	r25, 0x3e	; 62
    4eea:	46 96       	adiw	r24, 0x16	; 22
    4eec:	0f b6       	in	r0, 0x3f	; 63
    4eee:	f8 94       	cli
    4ef0:	9e bf       	out	0x3e, r25	; 62
    4ef2:	0f be       	out	0x3f, r0	; 63
    4ef4:	8d bf       	out	0x3d, r24	; 61
    4ef6:	64 cf       	rjmp	.-312    	; 0x4dc0 <command_common+0x3e4>
#ifdef NKRO_ENABLE
        case KC_N:
            clear_keyboard(); //Prevents stuck keys.
    4ef8:	0e 94 49 17 	call	0x2e92	; 0x2e92 <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
    4efc:	c0 91 0c 01 	lds	r28, 0x010C
    4f00:	81 e0       	ldi	r24, 0x01	; 1
    4f02:	c8 27       	eor	r28, r24
    4f04:	c0 93 0c 01 	sts	0x010C, r28
            if (keyboard_nkro) {
    4f08:	cc 23       	and	r28, r28
    4f0a:	29 f0       	breq	.+10     	; 0x4f16 <command_common+0x53a>
                print("NKRO: on\n");
    4f0c:	8c ee       	ldi	r24, 0xEC	; 236
    4f0e:	9a e0       	ldi	r25, 0x0A	; 10
    4f10:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    4f14:	0e c0       	rjmp	.+28     	; 0x4f32 <command_common+0x556>
            } else {
                print("NKRO: off\n");
    4f16:	81 ee       	ldi	r24, 0xE1	; 225
    4f18:	9a e0       	ldi	r25, 0x0A	; 10
    4f1a:	50 cf       	rjmp	.-352    	; 0x4dbc <command_common+0x3e0>
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
    4f1c:	80 e0       	ldi	r24, 0x00	; 0
    4f1e:	01 c0       	rjmp	.+2      	; 0x4f22 <command_common+0x546>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    4f20:	89 53       	subi	r24, 0x39	; 57
    4f22:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <switch_default_layer>
    4f26:	4c cf       	rjmp	.-360    	; 0x4dc0 <command_common+0x3e4>
            break;
        default:
            print("?");
    4f28:	8f ed       	ldi	r24, 0xDF	; 223
    4f2a:	9a e0       	ldi	r25, 0x0A	; 10
    4f2c:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
            return false;
    4f30:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return true;
}
    4f32:	8c 2f       	mov	r24, r28
    4f34:	cf 91       	pop	r28
    4f36:	08 95       	ret

00004f38 <command_extra>:
bool command_extra(uint8_t code) __attribute__ ((weak));
bool command_extra(uint8_t code)
{
    (void)code;
    return false;
}
    4f38:	80 e0       	ldi	r24, 0x00	; 0
    4f3a:	08 95       	ret

00004f3c <command_console_extra>:
bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    (void)code;
    return false;
}
    4f3c:	80 e0       	ldi	r24, 0x00	; 0
    4f3e:	08 95       	ret

00004f40 <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    4f40:	cf 93       	push	r28
    4f42:	c8 2f       	mov	r28, r24
    switch (command_state) {
    4f44:	80 91 e9 01 	lds	r24, 0x01E9
    4f48:	81 30       	cpi	r24, 0x01	; 1
    4f4a:	71 f0       	breq	.+28     	; 0x4f68 <command_proc+0x28>
    4f4c:	20 f0       	brcs	.+8      	; 0x4f56 <command_proc+0x16>
    4f4e:	82 30       	cpi	r24, 0x02	; 2
    4f50:	09 f4       	brne	.+2      	; 0x4f54 <command_proc+0x14>
    4f52:	48 c0       	rjmp	.+144    	; 0x4fe4 <command_proc+0xa4>
    4f54:	3f c1       	rjmp	.+638    	; 0x51d4 <command_proc+0x294>
        case ONESHOT:
            if (!IS_COMMAND())
    4f56:	a0 91 0d 01 	lds	r26, 0x010D
    4f5a:	b0 91 0e 01 	lds	r27, 0x010E
    4f5e:	8c 91       	ld	r24, X
    4f60:	82 32       	cpi	r24, 0x22	; 34
    4f62:	09 f0       	breq	.+2      	; 0x4f66 <command_proc+0x26>
    4f64:	39 c1       	rjmp	.+626    	; 0x51d8 <command_proc+0x298>
    4f66:	07 c0       	rjmp	.+14     	; 0x4f76 <command_proc+0x36>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    4f68:	a0 91 0d 01 	lds	r26, 0x010D
    4f6c:	b0 91 0e 01 	lds	r27, 0x010E
    4f70:	8c 91       	ld	r24, X
    4f72:	82 32       	cpi	r24, 0x22	; 34
    4f74:	49 f4       	brne	.+18     	; 0x4f88 <command_proc+0x48>
                return (command_extra(code) || command_common(code));
    4f76:	8c 2f       	mov	r24, r28
    4f78:	0e 94 9c 27 	call	0x4f38	; 0x4f38 <command_extra>
    4f7c:	81 11       	cpse	r24, r1
    4f7e:	2f c0       	rjmp	.+94     	; 0x4fde <command_proc+0x9e>
    4f80:	8c 2f       	mov	r24, r28
    4f82:	0e 94 ee 24 	call	0x49dc	; 0x49dc <command_common>
    4f86:	2c c0       	rjmp	.+88     	; 0x4fe0 <command_proc+0xa0>
            else
                return (command_console_extra(code) || command_console(code));
    4f88:	8c 2f       	mov	r24, r28
    4f8a:	0e 94 9e 27 	call	0x4f3c	; 0x4f3c <command_console_extra>
    4f8e:	81 11       	cpse	r24, r1
    4f90:	26 c0       	rjmp	.+76     	; 0x4fde <command_proc+0x9e>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    4f92:	c4 31       	cpi	r28, 0x14	; 20
    4f94:	e1 f0       	breq	.+56     	; 0x4fce <command_proc+0x8e>
    4f96:	70 f4       	brcc	.+28     	; 0x4fb4 <command_proc+0x74>
    4f98:	cb 30       	cpi	r28, 0x0B	; 11
    4f9a:	81 f0       	breq	.+32     	; 0x4fbc <command_proc+0x7c>
    4f9c:	c0 31       	cpi	r28, 0x10	; 16
    4f9e:	d1 f4       	brne	.+52     	; 0x4fd4 <command_proc+0x94>
        case KC_ESC:
            command_state = ONESHOT;
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
    4fa0:	0e 94 98 23 	call	0x4730	; 0x4730 <mousekey_console_help>
            print("M> ");
    4fa4:	88 e8       	ldi	r24, 0x88	; 136
    4fa6:	98 e0       	ldi	r25, 0x08	; 8
    4fa8:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
            command_state = MOUSEKEY;
    4fac:	82 e0       	ldi	r24, 0x02	; 2
    4fae:	80 93 e9 01 	sts	0x01E9, r24
    4fb2:	15 c0       	rjmp	.+42     	; 0x4fde <command_proc+0x9e>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    4fb4:	c9 32       	cpi	r28, 0x29	; 41
    4fb6:	59 f0       	breq	.+22     	; 0x4fce <command_proc+0x8e>
    4fb8:	c8 33       	cpi	r28, 0x38	; 56
    4fba:	61 f4       	brne	.+24     	; 0x4fd4 <command_proc+0x94>
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    4fbc:	85 e9       	ldi	r24, 0x95	; 149
    4fbe:	98 e0       	ldi	r25, 0x08	; 8
    4fc0:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    4fc4:	8c e8       	ldi	r24, 0x8C	; 140
    4fc6:	98 e0       	ldi	r25, 0x08	; 8
    4fc8:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    4fcc:	08 c0       	rjmp	.+16     	; 0x4fde <command_proc+0x9e>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            command_state = ONESHOT;
    4fce:	10 92 e9 01 	sts	0x01E9, r1
    4fd2:	04 c1       	rjmp	.+520    	; 0x51dc <command_proc+0x29c>
            print("M> ");
            command_state = MOUSEKEY;
            return true;
#endif
        default:
            print("?");
    4fd4:	86 e8       	ldi	r24, 0x86	; 134
    4fd6:	98 e0       	ldi	r25, 0x08	; 8
    4fd8:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    4fdc:	ff c0       	rjmp	.+510    	; 0x51dc <command_proc+0x29c>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    4fde:	81 e0       	ldi	r24, 0x01	; 1
    4fe0:	81 70       	andi	r24, 0x01	; 1
    4fe2:	fe c0       	rjmp	.+508    	; 0x51e0 <command_proc+0x2a0>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    4fe4:	c4 32       	cpi	r28, 0x24	; 36
    4fe6:	28 f5       	brcc	.+74     	; 0x5032 <command_proc+0xf2>
    4fe8:	ce 31       	cpi	r28, 0x1E	; 30
    4fea:	08 f0       	brcs	.+2      	; 0x4fee <command_proc+0xae>
    4fec:	c1 c0       	rjmp	.+386    	; 0x5170 <command_proc+0x230>
    4fee:	cb 30       	cpi	r28, 0x0B	; 11
    4ff0:	a1 f1       	breq	.+104    	; 0x505a <command_proc+0x11a>
    4ff2:	d0 f4       	brcc	.+52     	; 0x5028 <command_proc+0xe8>
    4ff4:	c7 30       	cpi	r28, 0x07	; 7
    4ff6:	09 f0       	breq	.+2      	; 0x4ffa <command_proc+0xba>
    4ff8:	d3 c0       	rjmp	.+422    	; 0x51a0 <command_proc+0x260>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
    4ffa:	8e e1       	ldi	r24, 0x1E	; 30
    4ffc:	80 93 14 01 	sts	0x0114, r24
            mk_interval = MOUSEKEY_INTERVAL;
    5000:	82 e3       	ldi	r24, 0x32	; 50
    5002:	80 93 13 01 	sts	0x0113, r24
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    5006:	8a e0       	ldi	r24, 0x0A	; 10
    5008:	80 93 12 01 	sts	0x0112, r24
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    500c:	84 e1       	ldi	r24, 0x14	; 20
    500e:	80 93 11 01 	sts	0x0111, r24
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    5012:	88 e0       	ldi	r24, 0x08	; 8
    5014:	80 93 10 01 	sts	0x0110, r24
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    5018:	88 e2       	ldi	r24, 0x28	; 40
    501a:	80 93 0f 01 	sts	0x010F, r24
            print("set default\n");
    501e:	8c e2       	ldi	r24, 0x2C	; 44
    5020:	97 e0       	ldi	r25, 0x07	; 7
    5022:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    5026:	bf c0       	rjmp	.+382    	; 0x51a6 <command_proc+0x266>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    5028:	c3 31       	cpi	r28, 0x13	; 19
    502a:	49 f1       	breq	.+82     	; 0x507e <command_proc+0x13e>
    502c:	c4 31       	cpi	r28, 0x14	; 20
    502e:	c1 f0       	breq	.+48     	; 0x5060 <command_proc+0x120>
    5030:	b7 c0       	rjmp	.+366    	; 0x51a0 <command_proc+0x260>
    5032:	cb 34       	cpi	r28, 0x4B	; 75
    5034:	09 f4       	brne	.+2      	; 0x5038 <command_proc+0xf8>
    5036:	a9 c0       	rjmp	.+338    	; 0x518a <command_proc+0x24a>
    5038:	28 f4       	brcc	.+10     	; 0x5044 <command_proc+0x104>
    503a:	c9 32       	cpi	r28, 0x29	; 41
    503c:	89 f0       	breq	.+34     	; 0x5060 <command_proc+0x120>
    503e:	c8 33       	cpi	r28, 0x38	; 56
    5040:	61 f0       	breq	.+24     	; 0x505a <command_proc+0x11a>
    5042:	ae c0       	rjmp	.+348    	; 0x51a0 <command_proc+0x260>
    5044:	c1 35       	cpi	r28, 0x51	; 81
    5046:	09 f4       	brne	.+2      	; 0x504a <command_proc+0x10a>
    5048:	9e c0       	rjmp	.+316    	; 0x5186 <command_proc+0x246>
    504a:	c2 35       	cpi	r28, 0x52	; 82
    504c:	09 f4       	brne	.+2      	; 0x5050 <command_proc+0x110>
    504e:	99 c0       	rjmp	.+306    	; 0x5182 <command_proc+0x242>
    5050:	ce 34       	cpi	r28, 0x4E	; 78
    5052:	09 f0       	breq	.+2      	; 0x5056 <command_proc+0x116>
    5054:	a5 c0       	rjmp	.+330    	; 0x51a0 <command_proc+0x260>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    5056:	6a e0       	ldi	r22, 0x0A	; 10
    5058:	9e c0       	rjmp	.+316    	; 0x5196 <command_proc+0x256>
static bool mousekey_console(uint8_t code)
{
    switch (code) {
        case KC_H:
        case KC_SLASH: /* ? */
            mousekey_console_help();
    505a:	0e 94 98 23 	call	0x4730	; 0x4730 <mousekey_console_help>
    505e:	a3 c0       	rjmp	.+326    	; 0x51a6 <command_proc+0x266>
            break;
        case KC_Q:
        case KC_ESC:
            if (mousekey_param) {
    5060:	80 91 e8 01 	lds	r24, 0x01E8
    5064:	88 23       	and	r24, r24
    5066:	19 f0       	breq	.+6      	; 0x506e <command_proc+0x12e>
                mousekey_param = 0;
    5068:	10 92 e8 01 	sts	0x01E8, r1
    506c:	9c c0       	rjmp	.+312    	; 0x51a6 <command_proc+0x266>
            } else {
                print("C> ");
    506e:	89 e3       	ldi	r24, 0x39	; 57
    5070:	97 e0       	ldi	r25, 0x07	; 7
    5072:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
                command_state = CONSOLE;
    5076:	81 e0       	ldi	r24, 0x01	; 1
    5078:	80 93 e9 01 	sts	0x01E9, r24
    507c:	b1 c0       	rjmp	.+354    	; 0x51e0 <command_proc+0x2a0>
 ***********************************************************/
static uint8_t mousekey_param = 0;

static void mousekey_param_print(void)
{
    print("\n\t- Values -\n");
    507e:	83 e1       	ldi	r24, 0x13	; 19
    5080:	97 e0       	ldi	r25, 0x07	; 7
    5082:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    5086:	81 e0       	ldi	r24, 0x01	; 1
    5088:	97 e0       	ldi	r25, 0x07	; 7
    508a:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    508e:	80 91 14 01 	lds	r24, 0x0114
    5092:	1f 92       	push	r1
    5094:	8f 93       	push	r24
    5096:	8e ef       	ldi	r24, 0xFE	; 254
    5098:	96 e0       	ldi	r25, 0x06	; 6
    509a:	9f 93       	push	r25
    509c:	8f 93       	push	r24
    509e:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    50a2:	8c ef       	ldi	r24, 0xFC	; 252
    50a4:	96 e0       	ldi	r25, 0x06	; 6
    50a6:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    50aa:	8a ee       	ldi	r24, 0xEA	; 234
    50ac:	96 e0       	ldi	r25, 0x06	; 6
    50ae:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    50b2:	80 91 13 01 	lds	r24, 0x0113
    50b6:	1f 92       	push	r1
    50b8:	8f 93       	push	r24
    50ba:	87 ee       	ldi	r24, 0xE7	; 231
    50bc:	96 e0       	ldi	r25, 0x06	; 6
    50be:	9f 93       	push	r25
    50c0:	8f 93       	push	r24
    50c2:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    50c6:	85 ee       	ldi	r24, 0xE5	; 229
    50c8:	96 e0       	ldi	r25, 0x06	; 6
    50ca:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    50ce:	86 ed       	ldi	r24, 0xD6	; 214
    50d0:	96 e0       	ldi	r25, 0x06	; 6
    50d2:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    50d6:	80 91 12 01 	lds	r24, 0x0112
    50da:	1f 92       	push	r1
    50dc:	8f 93       	push	r24
    50de:	83 ed       	ldi	r24, 0xD3	; 211
    50e0:	96 e0       	ldi	r25, 0x06	; 6
    50e2:	9f 93       	push	r25
    50e4:	8f 93       	push	r24
    50e6:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    50ea:	81 ed       	ldi	r24, 0xD1	; 209
    50ec:	96 e0       	ldi	r25, 0x06	; 6
    50ee:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    50f2:	80 ec       	ldi	r24, 0xC0	; 192
    50f4:	96 e0       	ldi	r25, 0x06	; 6
    50f6:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    50fa:	80 91 11 01 	lds	r24, 0x0111
    50fe:	1f 92       	push	r1
    5100:	8f 93       	push	r24
    5102:	8d eb       	ldi	r24, 0xBD	; 189
    5104:	96 e0       	ldi	r25, 0x06	; 6
    5106:	9f 93       	push	r25
    5108:	8f 93       	push	r24
    510a:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    510e:	8b eb       	ldi	r24, 0xBB	; 187
    5110:	96 e0       	ldi	r25, 0x06	; 6
    5112:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    5116:	86 ea       	ldi	r24, 0xA6	; 166
    5118:	96 e0       	ldi	r25, 0x06	; 6
    511a:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    511e:	80 91 10 01 	lds	r24, 0x0110
    5122:	1f 92       	push	r1
    5124:	8f 93       	push	r24
    5126:	83 ea       	ldi	r24, 0xA3	; 163
    5128:	96 e0       	ldi	r25, 0x06	; 6
    512a:	9f 93       	push	r25
    512c:	8f 93       	push	r24
    512e:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    5132:	81 ea       	ldi	r24, 0xA1	; 161
    5134:	96 e0       	ldi	r25, 0x06	; 6
    5136:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    513a:	8a e8       	ldi	r24, 0x8A	; 138
    513c:	96 e0       	ldi	r25, 0x06	; 6
    513e:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    5142:	80 91 0f 01 	lds	r24, 0x010F
    5146:	1f 92       	push	r1
    5148:	8f 93       	push	r24
    514a:	87 e8       	ldi	r24, 0x87	; 135
    514c:	96 e0       	ldi	r25, 0x06	; 6
    514e:	9f 93       	push	r25
    5150:	8f 93       	push	r24
    5152:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    5156:	85 e8       	ldi	r24, 0x85	; 133
    5158:	96 e0       	ldi	r25, 0x06	; 6
    515a:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
    515e:	8d b7       	in	r24, 0x3d	; 61
    5160:	9e b7       	in	r25, 0x3e	; 62
    5162:	48 96       	adiw	r24, 0x18	; 24
    5164:	0f b6       	in	r0, 0x3f	; 63
    5166:	f8 94       	cli
    5168:	9e bf       	out	0x3e, r25	; 62
    516a:	0f be       	out	0x3f, r0	; 63
    516c:	8d bf       	out	0x3d, r24	; 61
    516e:	1b c0       	rjmp	.+54     	; 0x51a6 <command_proc+0x266>
    5170:	ce 51       	subi	r28, 0x1E	; 30
    5172:	ec 2f       	mov	r30, r28
    5174:	f0 e0       	ldi	r31, 0x00	; 0
    5176:	e2 5d       	subi	r30, 0xD2	; 210
    5178:	fe 4f       	sbci	r31, 0xFE	; 254
        case KC_2:
        case KC_3:
        case KC_4:
        case KC_5:
        case KC_6:
            mousekey_param = numkey2num(code);
    517a:	80 81       	ld	r24, Z
    517c:	80 93 e8 01 	sts	0x01E8, r24
    5180:	12 c0       	rjmp	.+36     	; 0x51a6 <command_proc+0x266>
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
    5182:	61 e0       	ldi	r22, 0x01	; 1
    5184:	03 c0       	rjmp	.+6      	; 0x518c <command_proc+0x24c>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
    5186:	61 e0       	ldi	r22, 0x01	; 1
    5188:	06 c0       	rjmp	.+12     	; 0x5196 <command_proc+0x256>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
    518a:	6a e0       	ldi	r22, 0x0A	; 10
    518c:	80 91 e8 01 	lds	r24, 0x01E8
    5190:	0e 94 af 23 	call	0x475e	; 0x475e <mousekey_param_inc>
    5194:	08 c0       	rjmp	.+16     	; 0x51a6 <command_proc+0x266>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    5196:	80 91 e8 01 	lds	r24, 0x01E8
    519a:	0e 94 52 24 	call	0x48a4	; 0x48a4 <mousekey_param_dec>
    519e:	03 c0       	rjmp	.+6      	; 0x51a6 <command_proc+0x266>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
            print("set default\n");
            break;
        default:
            print("?");
    51a0:	8a e2       	ldi	r24, 0x2A	; 42
    51a2:	97 e0       	ldi	r25, 0x07	; 7
    51a4:	13 c0       	rjmp	.+38     	; 0x51cc <command_proc+0x28c>
            return false;
    }
    if (mousekey_param) {
    51a6:	80 91 e8 01 	lds	r24, 0x01E8
    51aa:	88 23       	and	r24, r24
    51ac:	69 f0       	breq	.+26     	; 0x51c8 <command_proc+0x288>
        xprintf("M%d> ", mousekey_param);
    51ae:	1f 92       	push	r1
    51b0:	8f 93       	push	r24
    51b2:	84 e2       	ldi	r24, 0x24	; 36
    51b4:	97 e0       	ldi	r25, 0x07	; 7
    51b6:	9f 93       	push	r25
    51b8:	8f 93       	push	r24
    51ba:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    51be:	0f 90       	pop	r0
    51c0:	0f 90       	pop	r0
    51c2:	0f 90       	pop	r0
    51c4:	0f 90       	pop	r0
    51c6:	04 c0       	rjmp	.+8      	; 0x51d0 <command_proc+0x290>
    } else {
        print("M>" );
    51c8:	81 e2       	ldi	r24, 0x21	; 33
    51ca:	97 e0       	ldi	r25, 0x07	; 7
    51cc:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xputs>
#endif
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
    51d0:	81 e0       	ldi	r24, 0x01	; 1
    51d2:	06 c0       	rjmp	.+12     	; 0x51e0 <command_proc+0x2a0>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    51d4:	10 92 e9 01 	sts	0x01E9, r1
bool command_proc(uint8_t code)
{
    switch (command_state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
    51d8:	80 e0       	ldi	r24, 0x00	; 0
    51da:	02 c0       	rjmp	.+4      	; 0x51e0 <command_proc+0x2a0>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    51dc:	80 e0       	ldi	r24, 0x00	; 0
    51de:	00 cf       	rjmp	.-512    	; 0x4fe0 <command_proc+0xa0>
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
}
    51e0:	cf 91       	pop	r28
    51e2:	08 95       	ret

000051e4 <backlight_init>:
backlight_config_t backlight_config;

void backlight_init(void)
{
    /* check signature */
    if (!eeconfig_is_enabled()) {
    51e4:	0e 94 c1 20 	call	0x4182	; 0x4182 <eeconfig_is_enabled>
    51e8:	81 11       	cpse	r24, r1
    51ea:	02 c0       	rjmp	.+4      	; 0x51f0 <backlight_init+0xc>
        eeconfig_init();
    51ec:	0e 94 a2 20 	call	0x4144	; 0x4144 <eeconfig_init>
    }
    backlight_config.raw = eeconfig_read_backlight();
    51f0:	0e 94 e7 20 	call	0x41ce	; 0x41ce <eeconfig_read_backlight>
    51f4:	80 93 f8 01 	sts	0x01F8, r24
    backlight_set(backlight_config.enable ? backlight_config.level : 0);
    51f8:	80 ff       	sbrs	r24, 0
    51fa:	02 c0       	rjmp	.+4      	; 0x5200 <backlight_init+0x1c>
    51fc:	86 95       	lsr	r24
    51fe:	01 c0       	rjmp	.+2      	; 0x5202 <backlight_init+0x1e>
    5200:	80 e0       	ldi	r24, 0x00	; 0
    5202:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <backlight_set>

00005206 <backlight_increase>:
}

void backlight_increase(void)
{
    if(backlight_config.level < BACKLIGHT_LEVELS)
    5206:	80 91 f8 01 	lds	r24, 0x01F8
    520a:	98 2f       	mov	r25, r24
    520c:	96 95       	lsr	r25
    520e:	29 2f       	mov	r18, r25
    5210:	30 e0       	ldi	r19, 0x00	; 0
    5212:	24 30       	cpi	r18, 0x04	; 4
    5214:	31 05       	cpc	r19, r1
    5216:	4c f4       	brge	.+18     	; 0x522a <backlight_increase+0x24>
    {
        backlight_config.level++;
    5218:	9f 5f       	subi	r25, 0xFF	; 255
    521a:	99 0f       	add	r25, r25
    521c:	81 70       	andi	r24, 0x01	; 1
        backlight_config.enable = 1;
    521e:	89 2b       	or	r24, r25
    5220:	81 60       	ori	r24, 0x01	; 1
    5222:	80 93 f8 01 	sts	0x01F8, r24
        eeconfig_write_backlight(backlight_config.raw);
    5226:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <eeconfig_write_backlight>
    }
    dprintf("backlight increase: %u\n", backlight_config.level);
    522a:	80 91 d9 01 	lds	r24, 0x01D9
    522e:	80 ff       	sbrs	r24, 0
    5230:	0f c0       	rjmp	.+30     	; 0x5250 <backlight_increase+0x4a>
    5232:	80 91 f8 01 	lds	r24, 0x01F8
    5236:	86 95       	lsr	r24
    5238:	1f 92       	push	r1
    523a:	8f 93       	push	r24
    523c:	81 e4       	ldi	r24, 0x41	; 65
    523e:	9d e0       	ldi	r25, 0x0D	; 13
    5240:	9f 93       	push	r25
    5242:	8f 93       	push	r24
    5244:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    5248:	0f 90       	pop	r0
    524a:	0f 90       	pop	r0
    524c:	0f 90       	pop	r0
    524e:	0f 90       	pop	r0
    backlight_set(backlight_config.level);
    5250:	80 91 f8 01 	lds	r24, 0x01F8
    5254:	86 95       	lsr	r24
    5256:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <backlight_set>

0000525a <backlight_decrease>:
}

void backlight_decrease(void)
{
    if(backlight_config.level > 0)
    525a:	80 91 f8 01 	lds	r24, 0x01F8
    525e:	98 2f       	mov	r25, r24
    5260:	96 95       	lsr	r25
    5262:	91 f0       	breq	.+36     	; 0x5288 <backlight_decrease+0x2e>
    {
        backlight_config.level--;
    5264:	91 58       	subi	r25, 0x81	; 129
    5266:	99 0f       	add	r25, r25
    5268:	81 70       	andi	r24, 0x01	; 1
    526a:	89 2b       	or	r24, r25
    526c:	80 93 f8 01 	sts	0x01F8, r24
        backlight_config.enable = !!backlight_config.level;
    5270:	8e 7f       	andi	r24, 0xFE	; 254
    5272:	91 e0       	ldi	r25, 0x01	; 1
    5274:	09 f4       	brne	.+2      	; 0x5278 <backlight_decrease+0x1e>
    5276:	90 e0       	ldi	r25, 0x00	; 0
    5278:	80 91 f8 01 	lds	r24, 0x01F8
    527c:	90 fb       	bst	r25, 0
    527e:	80 f9       	bld	r24, 0
    5280:	80 93 f8 01 	sts	0x01F8, r24
        eeconfig_write_backlight(backlight_config.raw);
    5284:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <eeconfig_write_backlight>
    }
    dprintf("backlight decrease: %u\n", backlight_config.level);
    5288:	80 91 d9 01 	lds	r24, 0x01D9
    528c:	80 ff       	sbrs	r24, 0
    528e:	0f c0       	rjmp	.+30     	; 0x52ae <backlight_decrease+0x54>
    5290:	80 91 f8 01 	lds	r24, 0x01F8
    5294:	86 95       	lsr	r24
    5296:	1f 92       	push	r1
    5298:	8f 93       	push	r24
    529a:	89 e2       	ldi	r24, 0x29	; 41
    529c:	9d e0       	ldi	r25, 0x0D	; 13
    529e:	9f 93       	push	r25
    52a0:	8f 93       	push	r24
    52a2:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    52a6:	0f 90       	pop	r0
    52a8:	0f 90       	pop	r0
    52aa:	0f 90       	pop	r0
    52ac:	0f 90       	pop	r0
    backlight_set(backlight_config.level);
    52ae:	80 91 f8 01 	lds	r24, 0x01F8
    52b2:	86 95       	lsr	r24
    52b4:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <backlight_set>

000052b8 <backlight_toggle>:
}

void backlight_toggle(void)
{
    backlight_config.enable ^= 1;
    52b8:	80 91 f8 01 	lds	r24, 0x01F8
    52bc:	98 2f       	mov	r25, r24
    52be:	90 95       	com	r25
    52c0:	90 fb       	bst	r25, 0
    52c2:	80 f9       	bld	r24, 0
    52c4:	80 93 f8 01 	sts	0x01F8, r24
    eeconfig_write_backlight(backlight_config.raw);
    52c8:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <eeconfig_write_backlight>
    dprintf("backlight toggle: %u\n", backlight_config.enable);
    52cc:	80 91 d9 01 	lds	r24, 0x01D9
    52d0:	80 ff       	sbrs	r24, 0
    52d2:	0f c0       	rjmp	.+30     	; 0x52f2 <backlight_toggle+0x3a>
    52d4:	80 91 f8 01 	lds	r24, 0x01F8
    52d8:	81 70       	andi	r24, 0x01	; 1
    52da:	1f 92       	push	r1
    52dc:	8f 93       	push	r24
    52de:	83 e1       	ldi	r24, 0x13	; 19
    52e0:	9d e0       	ldi	r25, 0x0D	; 13
    52e2:	9f 93       	push	r25
    52e4:	8f 93       	push	r24
    52e6:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    52ea:	0f 90       	pop	r0
    52ec:	0f 90       	pop	r0
    52ee:	0f 90       	pop	r0
    52f0:	0f 90       	pop	r0
    backlight_set(backlight_config.enable ? backlight_config.level : 0);
    52f2:	80 91 f8 01 	lds	r24, 0x01F8
    52f6:	80 ff       	sbrs	r24, 0
    52f8:	02 c0       	rjmp	.+4      	; 0x52fe <backlight_toggle+0x46>
    52fa:	86 95       	lsr	r24
    52fc:	01 c0       	rjmp	.+2      	; 0x5300 <backlight_toggle+0x48>
    52fe:	80 e0       	ldi	r24, 0x00	; 0
    5300:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <backlight_set>

00005304 <backlight_step>:
}

void backlight_step(void)
{
    backlight_config.level++;
    5304:	30 91 f8 01 	lds	r19, 0x01F8
    5308:	23 2f       	mov	r18, r19
    530a:	26 95       	lsr	r18
    530c:	2f 5f       	subi	r18, 0xFF	; 255
    530e:	2f 77       	andi	r18, 0x7F	; 127
    if(backlight_config.level > BACKLIGHT_LEVELS)
    5310:	82 2f       	mov	r24, r18
    5312:	90 e0       	ldi	r25, 0x00	; 0
    5314:	31 70       	andi	r19, 0x01	; 1
    5316:	05 97       	sbiw	r24, 0x05	; 5
    5318:	2c f4       	brge	.+10     	; 0x5324 <backlight_step+0x20>
    backlight_set(backlight_config.enable ? backlight_config.level : 0);
}

void backlight_step(void)
{
    backlight_config.level++;
    531a:	22 0f       	add	r18, r18
    531c:	23 2b       	or	r18, r19
    531e:	20 93 f8 01 	sts	0x01F8, r18
    5322:	02 c0       	rjmp	.+4      	; 0x5328 <backlight_step+0x24>
    if(backlight_config.level > BACKLIGHT_LEVELS)
    {
        backlight_config.level = 0;
    5324:	30 93 f8 01 	sts	0x01F8, r19
    }
    backlight_config.enable = !!backlight_config.level;
    5328:	80 91 f8 01 	lds	r24, 0x01F8
    532c:	8e 7f       	andi	r24, 0xFE	; 254
    532e:	91 e0       	ldi	r25, 0x01	; 1
    5330:	09 f4       	brne	.+2      	; 0x5334 <backlight_step+0x30>
    5332:	90 e0       	ldi	r25, 0x00	; 0
    5334:	80 91 f8 01 	lds	r24, 0x01F8
    5338:	90 fb       	bst	r25, 0
    533a:	80 f9       	bld	r24, 0
    533c:	80 93 f8 01 	sts	0x01F8, r24
    eeconfig_write_backlight(backlight_config.raw);
    5340:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <eeconfig_write_backlight>
    dprintf("backlight step: %u\n", backlight_config.level);
    5344:	80 91 d9 01 	lds	r24, 0x01D9
    5348:	80 ff       	sbrs	r24, 0
    534a:	0f c0       	rjmp	.+30     	; 0x536a <backlight_step+0x66>
    534c:	80 91 f8 01 	lds	r24, 0x01F8
    5350:	86 95       	lsr	r24
    5352:	1f 92       	push	r1
    5354:	8f 93       	push	r24
    5356:	8f ef       	ldi	r24, 0xFF	; 255
    5358:	9c e0       	ldi	r25, 0x0C	; 12
    535a:	9f 93       	push	r25
    535c:	8f 93       	push	r24
    535e:	0e 94 98 07 	call	0xf30	; 0xf30 <__xprintf>
    5362:	0f 90       	pop	r0
    5364:	0f 90       	pop	r0
    5366:	0f 90       	pop	r0
    5368:	0f 90       	pop	r0
    backlight_set(backlight_config.level);
    536a:	80 91 f8 01 	lds	r24, 0x01F8
    536e:	86 95       	lsr	r24
    5370:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <backlight_set>

00005374 <backlight_level>:
}

void backlight_level(uint8_t level)
{
    backlight_config.level ^= level;
    5374:	20 91 f8 01 	lds	r18, 0x01F8
    5378:	92 2f       	mov	r25, r18
    537a:	96 95       	lsr	r25
    537c:	98 27       	eor	r25, r24
    537e:	99 0f       	add	r25, r25
    5380:	82 2f       	mov	r24, r18
    5382:	81 70       	andi	r24, 0x01	; 1
    5384:	89 2b       	or	r24, r25
    5386:	80 93 f8 01 	sts	0x01F8, r24
    backlight_config.enable = !!backlight_config.level;
    538a:	8e 7f       	andi	r24, 0xFE	; 254
    538c:	91 e0       	ldi	r25, 0x01	; 1
    538e:	09 f4       	brne	.+2      	; 0x5392 <backlight_level+0x1e>
    5390:	90 e0       	ldi	r25, 0x00	; 0
    5392:	80 91 f8 01 	lds	r24, 0x01F8
    5396:	90 fb       	bst	r25, 0
    5398:	80 f9       	bld	r24, 0
    539a:	80 93 f8 01 	sts	0x01F8, r24
    eeconfig_write_backlight(backlight_config.raw);
    539e:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <eeconfig_write_backlight>
    backlight_set(backlight_config.level);
    53a2:	80 91 f8 01 	lds	r24, 0x01F8
    53a6:	86 95       	lsr	r24
    53a8:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <backlight_set>

000053ac <__fixsfsi>:
    53ac:	04 d0       	rcall	.+8      	; 0x53b6 <__fixunssfsi>
    53ae:	68 94       	set
    53b0:	b1 11       	cpse	r27, r1
    53b2:	8d c0       	rjmp	.+282    	; 0x54ce <__fp_szero>
    53b4:	08 95       	ret

000053b6 <__fixunssfsi>:
    53b6:	70 d0       	rcall	.+224    	; 0x5498 <__fp_splitA>
    53b8:	88 f0       	brcs	.+34     	; 0x53dc <__fixunssfsi+0x26>
    53ba:	9f 57       	subi	r25, 0x7F	; 127
    53bc:	90 f0       	brcs	.+36     	; 0x53e2 <__fixunssfsi+0x2c>
    53be:	b9 2f       	mov	r27, r25
    53c0:	99 27       	eor	r25, r25
    53c2:	b7 51       	subi	r27, 0x17	; 23
    53c4:	a0 f0       	brcs	.+40     	; 0x53ee <__fixunssfsi+0x38>
    53c6:	d1 f0       	breq	.+52     	; 0x53fc <__fixunssfsi+0x46>
    53c8:	66 0f       	add	r22, r22
    53ca:	77 1f       	adc	r23, r23
    53cc:	88 1f       	adc	r24, r24
    53ce:	99 1f       	adc	r25, r25
    53d0:	1a f0       	brmi	.+6      	; 0x53d8 <__fixunssfsi+0x22>
    53d2:	ba 95       	dec	r27
    53d4:	c9 f7       	brne	.-14     	; 0x53c8 <__fixunssfsi+0x12>
    53d6:	12 c0       	rjmp	.+36     	; 0x53fc <__fixunssfsi+0x46>
    53d8:	b1 30       	cpi	r27, 0x01	; 1
    53da:	81 f0       	breq	.+32     	; 0x53fc <__fixunssfsi+0x46>
    53dc:	77 d0       	rcall	.+238    	; 0x54cc <__fp_zero>
    53de:	b1 e0       	ldi	r27, 0x01	; 1
    53e0:	08 95       	ret
    53e2:	74 c0       	rjmp	.+232    	; 0x54cc <__fp_zero>
    53e4:	67 2f       	mov	r22, r23
    53e6:	78 2f       	mov	r23, r24
    53e8:	88 27       	eor	r24, r24
    53ea:	b8 5f       	subi	r27, 0xF8	; 248
    53ec:	39 f0       	breq	.+14     	; 0x53fc <__fixunssfsi+0x46>
    53ee:	b9 3f       	cpi	r27, 0xF9	; 249
    53f0:	cc f3       	brlt	.-14     	; 0x53e4 <__fixunssfsi+0x2e>
    53f2:	86 95       	lsr	r24
    53f4:	77 95       	ror	r23
    53f6:	67 95       	ror	r22
    53f8:	b3 95       	inc	r27
    53fa:	d9 f7       	brne	.-10     	; 0x53f2 <__fixunssfsi+0x3c>
    53fc:	3e f4       	brtc	.+14     	; 0x540c <__fixunssfsi+0x56>
    53fe:	90 95       	com	r25
    5400:	80 95       	com	r24
    5402:	70 95       	com	r23
    5404:	61 95       	neg	r22
    5406:	7f 4f       	sbci	r23, 0xFF	; 255
    5408:	8f 4f       	sbci	r24, 0xFF	; 255
    540a:	9f 4f       	sbci	r25, 0xFF	; 255
    540c:	08 95       	ret

0000540e <__floatunsisf>:
    540e:	e8 94       	clt
    5410:	09 c0       	rjmp	.+18     	; 0x5424 <__floatsisf+0x12>

00005412 <__floatsisf>:
    5412:	97 fb       	bst	r25, 7
    5414:	3e f4       	brtc	.+14     	; 0x5424 <__floatsisf+0x12>
    5416:	90 95       	com	r25
    5418:	80 95       	com	r24
    541a:	70 95       	com	r23
    541c:	61 95       	neg	r22
    541e:	7f 4f       	sbci	r23, 0xFF	; 255
    5420:	8f 4f       	sbci	r24, 0xFF	; 255
    5422:	9f 4f       	sbci	r25, 0xFF	; 255
    5424:	99 23       	and	r25, r25
    5426:	a9 f0       	breq	.+42     	; 0x5452 <__floatsisf+0x40>
    5428:	f9 2f       	mov	r31, r25
    542a:	96 e9       	ldi	r25, 0x96	; 150
    542c:	bb 27       	eor	r27, r27
    542e:	93 95       	inc	r25
    5430:	f6 95       	lsr	r31
    5432:	87 95       	ror	r24
    5434:	77 95       	ror	r23
    5436:	67 95       	ror	r22
    5438:	b7 95       	ror	r27
    543a:	f1 11       	cpse	r31, r1
    543c:	f8 cf       	rjmp	.-16     	; 0x542e <__floatsisf+0x1c>
    543e:	fa f4       	brpl	.+62     	; 0x547e <__floatsisf+0x6c>
    5440:	bb 0f       	add	r27, r27
    5442:	11 f4       	brne	.+4      	; 0x5448 <__floatsisf+0x36>
    5444:	60 ff       	sbrs	r22, 0
    5446:	1b c0       	rjmp	.+54     	; 0x547e <__floatsisf+0x6c>
    5448:	6f 5f       	subi	r22, 0xFF	; 255
    544a:	7f 4f       	sbci	r23, 0xFF	; 255
    544c:	8f 4f       	sbci	r24, 0xFF	; 255
    544e:	9f 4f       	sbci	r25, 0xFF	; 255
    5450:	16 c0       	rjmp	.+44     	; 0x547e <__floatsisf+0x6c>
    5452:	88 23       	and	r24, r24
    5454:	11 f0       	breq	.+4      	; 0x545a <__floatsisf+0x48>
    5456:	96 e9       	ldi	r25, 0x96	; 150
    5458:	11 c0       	rjmp	.+34     	; 0x547c <__floatsisf+0x6a>
    545a:	77 23       	and	r23, r23
    545c:	21 f0       	breq	.+8      	; 0x5466 <__floatsisf+0x54>
    545e:	9e e8       	ldi	r25, 0x8E	; 142
    5460:	87 2f       	mov	r24, r23
    5462:	76 2f       	mov	r23, r22
    5464:	05 c0       	rjmp	.+10     	; 0x5470 <__floatsisf+0x5e>
    5466:	66 23       	and	r22, r22
    5468:	71 f0       	breq	.+28     	; 0x5486 <__floatsisf+0x74>
    546a:	96 e8       	ldi	r25, 0x86	; 134
    546c:	86 2f       	mov	r24, r22
    546e:	70 e0       	ldi	r23, 0x00	; 0
    5470:	60 e0       	ldi	r22, 0x00	; 0
    5472:	2a f0       	brmi	.+10     	; 0x547e <__floatsisf+0x6c>
    5474:	9a 95       	dec	r25
    5476:	66 0f       	add	r22, r22
    5478:	77 1f       	adc	r23, r23
    547a:	88 1f       	adc	r24, r24
    547c:	da f7       	brpl	.-10     	; 0x5474 <__floatsisf+0x62>
    547e:	88 0f       	add	r24, r24
    5480:	96 95       	lsr	r25
    5482:	87 95       	ror	r24
    5484:	97 f9       	bld	r25, 7
    5486:	08 95       	ret

00005488 <__fp_split3>:
    5488:	57 fd       	sbrc	r21, 7
    548a:	90 58       	subi	r25, 0x80	; 128
    548c:	44 0f       	add	r20, r20
    548e:	55 1f       	adc	r21, r21
    5490:	59 f0       	breq	.+22     	; 0x54a8 <__fp_splitA+0x10>
    5492:	5f 3f       	cpi	r21, 0xFF	; 255
    5494:	71 f0       	breq	.+28     	; 0x54b2 <__fp_splitA+0x1a>
    5496:	47 95       	ror	r20

00005498 <__fp_splitA>:
    5498:	88 0f       	add	r24, r24
    549a:	97 fb       	bst	r25, 7
    549c:	99 1f       	adc	r25, r25
    549e:	61 f0       	breq	.+24     	; 0x54b8 <__fp_splitA+0x20>
    54a0:	9f 3f       	cpi	r25, 0xFF	; 255
    54a2:	79 f0       	breq	.+30     	; 0x54c2 <__fp_splitA+0x2a>
    54a4:	87 95       	ror	r24
    54a6:	08 95       	ret
    54a8:	12 16       	cp	r1, r18
    54aa:	13 06       	cpc	r1, r19
    54ac:	14 06       	cpc	r1, r20
    54ae:	55 1f       	adc	r21, r21
    54b0:	f2 cf       	rjmp	.-28     	; 0x5496 <__fp_split3+0xe>
    54b2:	46 95       	lsr	r20
    54b4:	f1 df       	rcall	.-30     	; 0x5498 <__fp_splitA>
    54b6:	08 c0       	rjmp	.+16     	; 0x54c8 <__fp_splitA+0x30>
    54b8:	16 16       	cp	r1, r22
    54ba:	17 06       	cpc	r1, r23
    54bc:	18 06       	cpc	r1, r24
    54be:	99 1f       	adc	r25, r25
    54c0:	f1 cf       	rjmp	.-30     	; 0x54a4 <__fp_splitA+0xc>
    54c2:	86 95       	lsr	r24
    54c4:	71 05       	cpc	r23, r1
    54c6:	61 05       	cpc	r22, r1
    54c8:	08 94       	sec
    54ca:	08 95       	ret

000054cc <__fp_zero>:
    54cc:	e8 94       	clt

000054ce <__fp_szero>:
    54ce:	bb 27       	eor	r27, r27
    54d0:	66 27       	eor	r22, r22
    54d2:	77 27       	eor	r23, r23
    54d4:	cb 01       	movw	r24, r22
    54d6:	97 f9       	bld	r25, 7
    54d8:	08 95       	ret

000054da <__mulsf3>:
    54da:	0b d0       	rcall	.+22     	; 0x54f2 <__mulsf3x>
    54dc:	78 c0       	rjmp	.+240    	; 0x55ce <__fp_round>
    54de:	69 d0       	rcall	.+210    	; 0x55b2 <__fp_pscA>
    54e0:	28 f0       	brcs	.+10     	; 0x54ec <__mulsf3+0x12>
    54e2:	6e d0       	rcall	.+220    	; 0x55c0 <__fp_pscB>
    54e4:	18 f0       	brcs	.+6      	; 0x54ec <__mulsf3+0x12>
    54e6:	95 23       	and	r25, r21
    54e8:	09 f0       	breq	.+2      	; 0x54ec <__mulsf3+0x12>
    54ea:	5a c0       	rjmp	.+180    	; 0x55a0 <__fp_inf>
    54ec:	5f c0       	rjmp	.+190    	; 0x55ac <__fp_nan>
    54ee:	11 24       	eor	r1, r1
    54f0:	ee cf       	rjmp	.-36     	; 0x54ce <__fp_szero>

000054f2 <__mulsf3x>:
    54f2:	ca df       	rcall	.-108    	; 0x5488 <__fp_split3>
    54f4:	a0 f3       	brcs	.-24     	; 0x54de <__mulsf3+0x4>

000054f6 <__mulsf3_pse>:
    54f6:	95 9f       	mul	r25, r21
    54f8:	d1 f3       	breq	.-12     	; 0x54ee <__mulsf3+0x14>
    54fa:	95 0f       	add	r25, r21
    54fc:	50 e0       	ldi	r21, 0x00	; 0
    54fe:	55 1f       	adc	r21, r21
    5500:	62 9f       	mul	r22, r18
    5502:	f0 01       	movw	r30, r0
    5504:	72 9f       	mul	r23, r18
    5506:	bb 27       	eor	r27, r27
    5508:	f0 0d       	add	r31, r0
    550a:	b1 1d       	adc	r27, r1
    550c:	63 9f       	mul	r22, r19
    550e:	aa 27       	eor	r26, r26
    5510:	f0 0d       	add	r31, r0
    5512:	b1 1d       	adc	r27, r1
    5514:	aa 1f       	adc	r26, r26
    5516:	64 9f       	mul	r22, r20
    5518:	66 27       	eor	r22, r22
    551a:	b0 0d       	add	r27, r0
    551c:	a1 1d       	adc	r26, r1
    551e:	66 1f       	adc	r22, r22
    5520:	82 9f       	mul	r24, r18
    5522:	22 27       	eor	r18, r18
    5524:	b0 0d       	add	r27, r0
    5526:	a1 1d       	adc	r26, r1
    5528:	62 1f       	adc	r22, r18
    552a:	73 9f       	mul	r23, r19
    552c:	b0 0d       	add	r27, r0
    552e:	a1 1d       	adc	r26, r1
    5530:	62 1f       	adc	r22, r18
    5532:	83 9f       	mul	r24, r19
    5534:	a0 0d       	add	r26, r0
    5536:	61 1d       	adc	r22, r1
    5538:	22 1f       	adc	r18, r18
    553a:	74 9f       	mul	r23, r20
    553c:	33 27       	eor	r19, r19
    553e:	a0 0d       	add	r26, r0
    5540:	61 1d       	adc	r22, r1
    5542:	23 1f       	adc	r18, r19
    5544:	84 9f       	mul	r24, r20
    5546:	60 0d       	add	r22, r0
    5548:	21 1d       	adc	r18, r1
    554a:	82 2f       	mov	r24, r18
    554c:	76 2f       	mov	r23, r22
    554e:	6a 2f       	mov	r22, r26
    5550:	11 24       	eor	r1, r1
    5552:	9f 57       	subi	r25, 0x7F	; 127
    5554:	50 40       	sbci	r21, 0x00	; 0
    5556:	8a f0       	brmi	.+34     	; 0x557a <__mulsf3_pse+0x84>
    5558:	e1 f0       	breq	.+56     	; 0x5592 <__mulsf3_pse+0x9c>
    555a:	88 23       	and	r24, r24
    555c:	4a f0       	brmi	.+18     	; 0x5570 <__mulsf3_pse+0x7a>
    555e:	ee 0f       	add	r30, r30
    5560:	ff 1f       	adc	r31, r31
    5562:	bb 1f       	adc	r27, r27
    5564:	66 1f       	adc	r22, r22
    5566:	77 1f       	adc	r23, r23
    5568:	88 1f       	adc	r24, r24
    556a:	91 50       	subi	r25, 0x01	; 1
    556c:	50 40       	sbci	r21, 0x00	; 0
    556e:	a9 f7       	brne	.-22     	; 0x555a <__mulsf3_pse+0x64>
    5570:	9e 3f       	cpi	r25, 0xFE	; 254
    5572:	51 05       	cpc	r21, r1
    5574:	70 f0       	brcs	.+28     	; 0x5592 <__mulsf3_pse+0x9c>
    5576:	14 c0       	rjmp	.+40     	; 0x55a0 <__fp_inf>
    5578:	aa cf       	rjmp	.-172    	; 0x54ce <__fp_szero>
    557a:	5f 3f       	cpi	r21, 0xFF	; 255
    557c:	ec f3       	brlt	.-6      	; 0x5578 <__mulsf3_pse+0x82>
    557e:	98 3e       	cpi	r25, 0xE8	; 232
    5580:	dc f3       	brlt	.-10     	; 0x5578 <__mulsf3_pse+0x82>
    5582:	86 95       	lsr	r24
    5584:	77 95       	ror	r23
    5586:	67 95       	ror	r22
    5588:	b7 95       	ror	r27
    558a:	f7 95       	ror	r31
    558c:	e7 95       	ror	r30
    558e:	9f 5f       	subi	r25, 0xFF	; 255
    5590:	c1 f7       	brne	.-16     	; 0x5582 <__mulsf3_pse+0x8c>
    5592:	fe 2b       	or	r31, r30
    5594:	88 0f       	add	r24, r24
    5596:	91 1d       	adc	r25, r1
    5598:	96 95       	lsr	r25
    559a:	87 95       	ror	r24
    559c:	97 f9       	bld	r25, 7
    559e:	08 95       	ret

000055a0 <__fp_inf>:
    55a0:	97 f9       	bld	r25, 7
    55a2:	9f 67       	ori	r25, 0x7F	; 127
    55a4:	80 e8       	ldi	r24, 0x80	; 128
    55a6:	70 e0       	ldi	r23, 0x00	; 0
    55a8:	60 e0       	ldi	r22, 0x00	; 0
    55aa:	08 95       	ret

000055ac <__fp_nan>:
    55ac:	9f ef       	ldi	r25, 0xFF	; 255
    55ae:	80 ec       	ldi	r24, 0xC0	; 192
    55b0:	08 95       	ret

000055b2 <__fp_pscA>:
    55b2:	00 24       	eor	r0, r0
    55b4:	0a 94       	dec	r0
    55b6:	16 16       	cp	r1, r22
    55b8:	17 06       	cpc	r1, r23
    55ba:	18 06       	cpc	r1, r24
    55bc:	09 06       	cpc	r0, r25
    55be:	08 95       	ret

000055c0 <__fp_pscB>:
    55c0:	00 24       	eor	r0, r0
    55c2:	0a 94       	dec	r0
    55c4:	12 16       	cp	r1, r18
    55c6:	13 06       	cpc	r1, r19
    55c8:	14 06       	cpc	r1, r20
    55ca:	05 06       	cpc	r0, r21
    55cc:	08 95       	ret

000055ce <__fp_round>:
    55ce:	09 2e       	mov	r0, r25
    55d0:	03 94       	inc	r0
    55d2:	00 0c       	add	r0, r0
    55d4:	11 f4       	brne	.+4      	; 0x55da <__fp_round+0xc>
    55d6:	88 23       	and	r24, r24
    55d8:	52 f0       	brmi	.+20     	; 0x55ee <__fp_round+0x20>
    55da:	bb 0f       	add	r27, r27
    55dc:	40 f4       	brcc	.+16     	; 0x55ee <__fp_round+0x20>
    55de:	bf 2b       	or	r27, r31
    55e0:	11 f4       	brne	.+4      	; 0x55e6 <__fp_round+0x18>
    55e2:	60 ff       	sbrs	r22, 0
    55e4:	04 c0       	rjmp	.+8      	; 0x55ee <__fp_round+0x20>
    55e6:	6f 5f       	subi	r22, 0xFF	; 255
    55e8:	7f 4f       	sbci	r23, 0xFF	; 255
    55ea:	8f 4f       	sbci	r24, 0xFF	; 255
    55ec:	9f 4f       	sbci	r25, 0xFF	; 255
    55ee:	08 95       	ret

000055f0 <__udivmodqi4>:
    55f0:	99 1b       	sub	r25, r25
    55f2:	79 e0       	ldi	r23, 0x09	; 9
    55f4:	04 c0       	rjmp	.+8      	; 0x55fe <__udivmodqi4_ep>

000055f6 <__udivmodqi4_loop>:
    55f6:	99 1f       	adc	r25, r25
    55f8:	96 17       	cp	r25, r22
    55fa:	08 f0       	brcs	.+2      	; 0x55fe <__udivmodqi4_ep>
    55fc:	96 1b       	sub	r25, r22

000055fe <__udivmodqi4_ep>:
    55fe:	88 1f       	adc	r24, r24
    5600:	7a 95       	dec	r23
    5602:	c9 f7       	brne	.-14     	; 0x55f6 <__udivmodqi4_loop>
    5604:	80 95       	com	r24
    5606:	08 95       	ret

00005608 <__divmodhi4>:
    5608:	97 fb       	bst	r25, 7
    560a:	07 2e       	mov	r0, r23
    560c:	16 f4       	brtc	.+4      	; 0x5612 <__divmodhi4+0xa>
    560e:	00 94       	com	r0
    5610:	07 d0       	rcall	.+14     	; 0x5620 <__divmodhi4_neg1>
    5612:	77 fd       	sbrc	r23, 7
    5614:	09 d0       	rcall	.+18     	; 0x5628 <__divmodhi4_neg2>
    5616:	0e 94 1e 2b 	call	0x563c	; 0x563c <__udivmodhi4>
    561a:	07 fc       	sbrc	r0, 7
    561c:	05 d0       	rcall	.+10     	; 0x5628 <__divmodhi4_neg2>
    561e:	3e f4       	brtc	.+14     	; 0x562e <__divmodhi4_exit>

00005620 <__divmodhi4_neg1>:
    5620:	90 95       	com	r25
    5622:	81 95       	neg	r24
    5624:	9f 4f       	sbci	r25, 0xFF	; 255
    5626:	08 95       	ret

00005628 <__divmodhi4_neg2>:
    5628:	70 95       	com	r23
    562a:	61 95       	neg	r22
    562c:	7f 4f       	sbci	r23, 0xFF	; 255

0000562e <__divmodhi4_exit>:
    562e:	08 95       	ret

00005630 <__tablejump2__>:
    5630:	ee 0f       	add	r30, r30
    5632:	ff 1f       	adc	r31, r31

00005634 <__tablejump__>:
    5634:	05 90       	lpm	r0, Z+
    5636:	f4 91       	lpm	r31, Z
    5638:	e0 2d       	mov	r30, r0
    563a:	09 94       	ijmp

0000563c <__udivmodhi4>:
    563c:	aa 1b       	sub	r26, r26
    563e:	bb 1b       	sub	r27, r27
    5640:	51 e1       	ldi	r21, 0x11	; 17
    5642:	07 c0       	rjmp	.+14     	; 0x5652 <__udivmodhi4_ep>

00005644 <__udivmodhi4_loop>:
    5644:	aa 1f       	adc	r26, r26
    5646:	bb 1f       	adc	r27, r27
    5648:	a6 17       	cp	r26, r22
    564a:	b7 07       	cpc	r27, r23
    564c:	10 f0       	brcs	.+4      	; 0x5652 <__udivmodhi4_ep>
    564e:	a6 1b       	sub	r26, r22
    5650:	b7 0b       	sbc	r27, r23

00005652 <__udivmodhi4_ep>:
    5652:	88 1f       	adc	r24, r24
    5654:	99 1f       	adc	r25, r25
    5656:	5a 95       	dec	r21
    5658:	a9 f7       	brne	.-22     	; 0x5644 <__udivmodhi4_loop>
    565a:	80 95       	com	r24
    565c:	90 95       	com	r25
    565e:	bc 01       	movw	r22, r24
    5660:	cd 01       	movw	r24, r26
    5662:	08 95       	ret

00005664 <__eerd_byte_m32u4>:
    5664:	f9 99       	sbic	0x1f, 1	; 31
    5666:	fe cf       	rjmp	.-4      	; 0x5664 <__eerd_byte_m32u4>
    5668:	92 bd       	out	0x22, r25	; 34
    566a:	81 bd       	out	0x21, r24	; 33
    566c:	f8 9a       	sbi	0x1f, 0	; 31
    566e:	99 27       	eor	r25, r25
    5670:	80 b5       	in	r24, 0x20	; 32
    5672:	08 95       	ret

00005674 <__eerd_word_m32u4>:
    5674:	a8 e1       	ldi	r26, 0x18	; 24
    5676:	b0 e0       	ldi	r27, 0x00	; 0
    5678:	42 e0       	ldi	r20, 0x02	; 2
    567a:	50 e0       	ldi	r21, 0x00	; 0
    567c:	0c 94 55 2b 	jmp	0x56aa	; 0x56aa <__eerd_blraw_m32u4>

00005680 <__eewr_byte_m32u4>:
    5680:	26 2f       	mov	r18, r22

00005682 <__eewr_r18_m32u4>:
    5682:	f9 99       	sbic	0x1f, 1	; 31
    5684:	fe cf       	rjmp	.-4      	; 0x5682 <__eewr_r18_m32u4>
    5686:	1f ba       	out	0x1f, r1	; 31
    5688:	92 bd       	out	0x22, r25	; 34
    568a:	81 bd       	out	0x21, r24	; 33
    568c:	20 bd       	out	0x20, r18	; 32
    568e:	0f b6       	in	r0, 0x3f	; 63
    5690:	f8 94       	cli
    5692:	fa 9a       	sbi	0x1f, 2	; 31
    5694:	f9 9a       	sbi	0x1f, 1	; 31
    5696:	0f be       	out	0x3f, r0	; 63
    5698:	01 96       	adiw	r24, 0x01	; 1
    569a:	08 95       	ret

0000569c <__eewr_word_m32u4>:
    569c:	0e 94 40 2b 	call	0x5680	; 0x5680 <__eewr_byte_m32u4>
    56a0:	27 2f       	mov	r18, r23
    56a2:	0c 94 41 2b 	jmp	0x5682	; 0x5682 <__eewr_r18_m32u4>

000056a6 <__eerd_block_m32u4>:
    56a6:	dc 01       	movw	r26, r24
    56a8:	cb 01       	movw	r24, r22

000056aa <__eerd_blraw_m32u4>:
    56aa:	fc 01       	movw	r30, r24
    56ac:	f9 99       	sbic	0x1f, 1	; 31
    56ae:	fe cf       	rjmp	.-4      	; 0x56ac <__eerd_blraw_m32u4+0x2>
    56b0:	06 c0       	rjmp	.+12     	; 0x56be <__eerd_blraw_m32u4+0x14>
    56b2:	f2 bd       	out	0x22, r31	; 34
    56b4:	e1 bd       	out	0x21, r30	; 33
    56b6:	f8 9a       	sbi	0x1f, 0	; 31
    56b8:	31 96       	adiw	r30, 0x01	; 1
    56ba:	00 b4       	in	r0, 0x20	; 32
    56bc:	0d 92       	st	X+, r0
    56be:	41 50       	subi	r20, 0x01	; 1
    56c0:	50 40       	sbci	r21, 0x00	; 0
    56c2:	b8 f7       	brcc	.-18     	; 0x56b2 <__eerd_blraw_m32u4+0x8>
    56c4:	08 95       	ret

000056c6 <_exit>:
    56c6:	f8 94       	cli

000056c8 <__stop_program>:
    56c8:	ff cf       	rjmp	.-2      	; 0x56c8 <__stop_program>
